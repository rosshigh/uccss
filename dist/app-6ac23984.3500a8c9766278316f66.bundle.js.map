{"version":3,"file":"app-6ac23984.3500a8c9766278316f66.bundle.js","mappings":"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AIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;;AA3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAveA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAshBA;;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AA9jBA;AAikBA;AAAA;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AAAA;AAAA;AAJA;AAKA;;AAtkBA;AAwkBA;;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AA1nBA;AA6nBA;AACA;AACA;AACA;;AAhoBA;AAAA;AAkoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AADA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKA;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAloBA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AA2oBA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3oBA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACNA;AAEA;AAGA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AATA;;AAAA;AAAA;AAWA;AAAA;AAAA;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;AAnMA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AA+MA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AAvNA;AAAA;AAyNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AACA;AACA;AACA;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzNA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAZA;;AAAA;;AAAA;AAiBA;;AACA;AACA;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAlCA;AAoCA;;AACA;AACA;AAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AApDA;AAsDA;;AACA;;AACA;AACA;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;AA7FA;AA+FA;;AACA;AACA;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AArHA;AAuHA;;AACA;AACA;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;AA1IA;AA4IA;;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAxJA;AA0JA;;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAMA;;AACA;AAAA;AAAA;AAAA;;AACA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hBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhhBA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAqhBA;;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;AACA;;AACA;;AACA;AACA;;AACA;AACA;AAEA;;AA7iBA;AA+iBA;;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;AACA;;AACA;;AACA;AACA;;AACA;AACA;AACA;;AA3kBA;AA6kBA;;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;AACA;;AACA;;AACA;AACA;;AACA;AACA;AACA;;AArmBA;AAumBA;;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;AACA;;AACA;;AACA;AACA;;AACA;AACA;AAEA;AACA;;AAnoBA;AAqoBA;;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;AACA;;AACA;;AACA;AACA;;AACA;AACA;AACA;;AA7pBA;AAAA;AA+pBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AAHA;AAAA;;AAAA;AAIA;;AAJA;AAAA;AAAA;AAAA;;AAMA;AANA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/pBA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AA+qBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AArwBA;AAwwBA;AACA;AACA;AACA;;AA3wBA;AAAA;AA6wBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AADA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKA;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA7wBA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAuxBA;AACA;;AAxxBA;AAAA;AA0xBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1xBA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AAGA;AAGA;AAAA;AACA;AACA;AACA;AACA;;;AAPA;;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AAHA;AAAA;AAAA;;AAAA;AAKA;;AALA;AAAA;AAAA;AAAA;;AAOA;AAPA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYA;AAZA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AA1CA;AA6CA;AACA;AACA;AACA;;AAhDA;AAAA;AAkDA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAMA;;AACA;AACA;AACA;AACA;AACA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAcA;;AACA;AACA;AACA;;AAjBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlDA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AA2EA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;;AAnFA;AAAA;AAqFA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArFA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AAGA;AAEA;AACA;AACA;;AAJA;;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AAKA;AACA;AACA;;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzBA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AAKA;AACA;AACA;;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApCA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AA+CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AAMA;AACA;AACA;AACA;;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/CA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA","sources":["webpack://client/./src/resources/data/clientRequests.js","webpack://client/./src/resources/data/config.js","webpack://client/./src/resources/data/curriculum.js","webpack://client/./src/resources/data/dataServices.js","webpack://client/./src/resources/data/documents.js","webpack://client/./src/resources/data/downloads.js","webpack://client/./src/resources/data/events.js","webpack://client/./src/resources/data/helpTickets.js","webpack://client/./src/resources/data/inventory.js","webpack://client/./src/resources/data/is4ua.js"],"sourcesContent":["import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\nimport {Utils} from '../utils/utils';\r\nimport {AppConfig} from '../../config/appConfig';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class ClientRequests {\r\n\r\n  CLIENT_REQUESTS_SERVICES = 'clientRequests';\r\n  CLIENT_REQUEST_DETAILS='clientRequestsDetails';\r\n  CLIENT_REQUEST_LOCK_SERVICES = 'clientRequestLocks';\r\n  CUSTOMER_ACTION = 'clientRequests/customerAction';\r\n  CLIENT_REQUEST_EMAIL = \"clientRequests/sendMail\";\r\n\r\n    constructor(data, utils, config) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n        this.config = config;\r\n    }\r\n\r\n    async getClientRequestsArray(options, refresh){\r\n        if (!this.requestsArray || refresh) {\r\n          var url = this.CLIENT_REQUESTS_SERVICES;\r\n          url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.requestsArray = serverResponse;\r\n                }  else {\r\n                    this.data.processError(serverResponse);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getActiveClientRequestsArray(personId, sessions){\r\n        var url = this.CLIENT_REQUESTS_SERVICES;\r\n        url += \"/\" + personId + \"/\" + sessions\r\n        try {\r\n            let serverResponse = await this.data.get(url);\r\n            if (!serverResponse.error) {\r\n                this.requestsArray = serverResponse;\r\n            } else {\r\n               this.requestsArray = new Array()\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n          \r\n        }\r\n    }\r\n\r\n    async getRequest(id){\r\n         try {\r\n            let serverResponse = await this.data.get(this.CLIENT_REQUESTS_SERVICES + \"/\" + id);\r\n            if (!serverResponse.error) {\r\n                this.selectedRequest = serverResponse;\r\n            } else {\r\n                this.selectedRequest = null;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    selectRequest(index){\r\n        if (index === undefined) {\r\n            this.selectedRequest = this.emptyRequest();\r\n        } else {\r\n            try {\r\n                this.selectedRequest = this.utils.copyObject(this.requestsArray[index]);\r\n                this.editRequestIndex = index;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.selectedRequest = this.emptyRequest();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    selectRequstById(id){\r\n      this.selectedRequest = null;\r\n      for(var i = 0; i < this.requestsArray.length; i++){\r\n        if(this.requestsArray[i]._id === id){\r\n          this.selectedRequest = this.utils.copyObject(this.requestsArray[i]);\r\n           this.editRequestIndex = i;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    setSelectedRequest(request){\r\n      this.selectedRequest = this.utils.copyObject(request);\r\n    }\r\n\r\n    emptyRequest(){\r\n        var newObj = new Object();;\r\n        newObj.requestStatus = this.config.UNASSIGNED_REQUEST_CODE;\r\n        newObj.undergradIds = 0;\r\n        newObj.graduateIds = 0;\r\n        newObj.startDate = \"\";\r\n        newObj.endDate = \"\";\r\n        newObj.addUndergraduates = 0;\r\n        newObj.addGraduates = 0;\r\n        newObj.comments = \"\";\r\n        newObj.requestDetails = new Array();\r\n        newObj.audit = new Array();\r\n        newObj.audit.push({\r\n            event: 'Created',\r\n            eventDate: new Date(),\r\n            personId: \"\"\r\n        })\r\n        return newObj;\r\n    }\r\n\r\n    async getCurrentCount(options){\r\n       var url = this.CLIENT_REQUESTS_SERVICES +'/current/count';\r\n       url += options ? options : \"\";\r\n       var response = await this.data.get(url);\r\n       if (!response.error) {\r\n           this.unassignedRequests = this.utils.countItems(this.config.UNASSIGNED_REQUEST_CODE, 'requestStatus', response);\r\n           this.updatedRequests =  this.utils.countItems(this.config.UPDATED_REQUEST_CODE, 'requestStatus', response);\r\n           this.customerActionRequests =  this.utils.countItems(this.config.CUSTOMER_ACTION_REQUEST_CODE, 'requestStatus', response);\r\n           return response.count;\r\n       } else {\r\n           return null;\r\n       }\r\n    }\r\n\r\n    async getClientRequestsDetailsArray(options, refresh){\r\n        if (!this.requestsArray || refresh) {\r\n          var url = this.CLIENT_REQUEST_DETAILS; \r\n          url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.requestsDetailsArray = serverResponse;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getClientRequestsDetailsArrayAnalytics(options, refresh){\r\n        if (!this.requestsArray || refresh) {\r\n          var url = this.CLIENT_REQUEST_DETAILS + \"/analytics\"; \r\n          url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.requestsDetailsArrayAnalytics = serverResponse;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getClientRequestsDetailFaccoArray(sessionId, institutionId, refresh){\r\n        if(!this.requestsDetailsArray || !this.requestsDetailsArray.length || refresh){\r\n            let serverResponse = await this.data.get(this.CLIENT_REQUEST_DETAILS + '/' + sessionId + '/' + institutionId);\r\n            if (!serverResponse.error) {\r\n                this.requestsDetailsArray = serverResponse;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    async saveRequestWithId(){\r\n        if(!this.selectedRequest){\r\n            return;\r\n        }\r\n\r\n        var serverResponse = await this.data.saveObject(this.selectedRequest, this.CLIENT_REQUESTS_SERVICES + \"/\" + this.selectedRequest._id, \"put\");\r\n            if(!serverResponse.error){\r\n                if(this.requestsArray && this.editRequestIndex){\r\n                    this.requestsArray[this.editRequestIndex]  = this.utils.copyObject(this.selectedRequest);\r\n                }\r\n            }\r\n            return serverResponse;\r\n    }\r\n\r\n    async saveRequest(email){\r\n        if(!this.selectedRequest){\r\n            return;\r\n        }\r\n        var url =  this.CLIENT_REQUESTS_SERVICES; \r\n\r\n        if(!this.selectedRequest._id){\r\n            let serverResponse = await this.data.saveObject(this.selectedRequest, url, \"post\");\r\n            if(!serverResponse.error){\r\n                if(email.email){\r\n                    email.clientRequestNo = serverResponse.clientRequestNo;\r\n                    email.reason = 1;\r\n                    this.data.saveObject(email, this.CLIENT_REQUEST_EMAIL, \"post\");\r\n                }\r\n                if(this.requestsArray){\r\n                    this.requestsArray.push(this.selectedRequest);\r\n                }\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedRequest, url, \"put\");\r\n            if(!serverResponse.error){\r\n                 if(email.email){\r\n                    email.requestNo = this.selectedRequest.requestNo;\r\n                     email.reason = 2;\r\n                    this.data.saveObject(email, this.CLIENT_REQUEST_EMAIL, \"post\");\r\n                }\r\n                if(this.requestsArray && this.editRequestIndex){\r\n                    this.requestsArray[this.editRequestIndex]  = this.utils.copyObject(this.selectedRequest);\r\n                }\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    async deleteAssignment(index){\r\n         if(!this.selectedRequest){\r\n            return;\r\n        }\r\n        var url =  this.CLIENT_REQUESTS_SERVICES + \"/deleteAssignment\";\r\n        var serverResponse = await this.data.saveObject(this.selectedRequest, url, \"put\");\r\n        if(!serverResponse.error){\r\n            this.selectedRequestDetail = serverResponse;\r\n            if(!this.selectedRequestDetail.requestId.courseId || this.selectedRequestDetail.requestId.courseId === null){\r\n                this.selectedRequestDetail.requestId.courseId = {_id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME};\r\n            }\r\n            this.requestsDetailsArray[index]  = this.utils.copyObject(this.selectedRequestDetail);\r\n        }\r\n        return serverResponse;\r\n\r\n    }\r\n\r\n    updateStatuses(updateIds, status){\r\n        for(let i = 0; i < this.requestsDetailsArray.length; i++){\r\n           if(updateIds.indexOf(this.requestsDetailsArray[i]._id) > -1){\r\n               this.requestsDetailsArray[i].requestStatus = status;\r\n               this.requestsDetailsArray[i].requestId.requestStatus = status;\r\n           }\r\n        }\r\n    }\r\n\r\n    async assignRequest(index, email){\r\n        if(!this.selectedRequest){\r\n            return;\r\n        }\r\n        var url = email ? this.CLIENT_REQUESTS_SERVICES + '/assign/?email=1' : this.CLIENT_REQUESTS_SERVICES + '/assign';\r\n         var serverResponse = await this.data.saveObject(this.selectedRequest, url, \"put\");\r\n        if(!serverResponse.error){\r\n            if(email && email.email){\r\n                this.data.saveObject(email, this.CLIENT_REQUEST_EMAIL, \"post\");\r\n            }\r\n            this.selectedRequestDetail = serverResponse;\r\n            if(!this.selectedRequestDetail.requestId.courseId || this.selectedRequestDetail.requestId.courseId === null){\r\n              this.selectedRequestDetail.requestId.courseId = {_id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME};\r\n            }\r\n            this.requestsDetailsArray[index]  = this.utils.copyObject(this.selectedRequestDetail);\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    async deleteRequest(){\r\n        if(!this.selectedRequestDetail._id){\r\n            return;\r\n        }\r\n\r\n        if(this.selectedRequestDetail.requestId){\r\n            let serverResponse = await this.data.deleteObject(this.CLIENT_REQUEST_DETAILS + '/' + this.selectedRequestDetail._id + '/' + this.selectedRequestDetail.requestId._id);\r\n            if (!serverResponse.error) {\r\n                this.requestsDetailsArray.splice(this.requestDetailIndex, 1);\r\n                return serverResponse;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        } else {\r\n            let serverResponse = await this.data.deleteObject(this.CLIENT_REQUEST_DETAILS + '/' + this.selectedRequestDetail._id);\r\n            if (!serverResponse.error) {\r\n                this.requestsDetailsArray.splice(this.requestDetailIndex, 1);\r\n                return serverResponse;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    isRequestDirty(obj, skip){ \r\n      if(this.selectedRequest){\r\n          if(!obj){\r\n              var obj = this.emptyRequest();\r\n          }\r\n            if(!skip) skip = new Array();\r\n            skip.push('audit');\r\n            return this.utils.objectsEqual(this.selectedRequest, obj, skip);\r\n        }\r\n        return new Array();\r\n    }\r\n\r\n    selectRequestDetail(index){\r\n          if(index === undefined || index > this.requestsDetailsArray.length - 1){\r\n              this.emptyRequestDetail();\r\n          } else {\r\n              this.selectedRequestDetail = this.requestsDetailsArray[index];\r\n              this.requestDetailIndex = index;\r\n          }\r\n          return this.selectedRequestDetail;\r\n    }\r\n\r\n    async getRequestDetail(id){\r\n        \r\n        let serverResponse = await this.data.get(this.CLIENT_REQUEST_DETAILS + \"/\" + id);\r\n        if (!serverResponse.error) {\r\n            this.selectedRequestDetail = serverResponse;\r\n            \r\n        } else {\r\n            this.selectedRequestDetail = null;\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    selectRequestDetailFromId(id){\r\n        this.requestsDetailsArray.forEach((item, index) => {\r\n          if(item._id === id){\r\n            this.selectedRequestDetail = this.utils.copyObject(item);\r\n            this.requestDetailIndex = index;\r\n            return;\r\n          }\r\n        });\r\n        return null;\r\n    }\r\n\r\n    setTheSelectedRequestDetail(request){\r\n      this.selectedRequestDetail = this.utils.copyObject(request);\r\n      if(this.requestsDetailsArray) {\r\n          for(let i = 0; i < this.requestsDetailsArray.length; i++){\r\n              if(this.requestsDetailsArray[i]._id === request._id) {\r\n                  this.requestDetailIndex = i;\r\n                   break;\r\n              }\r\n          }\r\n      }\r\n    }\r\n\r\n    emptyRequestDetail(){\r\n        var newObj = new Object();;\r\n        newObj.createdDate = new Date();\r\n        newObj.modifiedDate = new Date();\r\n        newObj.requestStatus = this.config.UNASSIGNED_REQUEST_CODE;\r\n        return newObj;\r\n    }\r\n\r\n    async saveRequestDetail(){\r\n        if(!this.selectedRequestDetail){ \r\n            return;\r\n        }\r\n        let response = await this.data.saveObject(this.selectedRequestDetail, this.CLIENT_REQUEST_DETAILS, \"put\");\r\n        if(!response.error){\r\n            this.selectedRequestDetail = response;\r\n            if(!this.selectedRequestDetail.requestId.courseId || this.selectedRequestDetail.requestId.courseId === null){\r\n              this.selectedRequestDetail.requestId.courseId = {_id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME};\r\n            }\r\n            this.requestsDetailsArray[this.requestDetailIndex] = this.utils.copyObject(this.selectedRequestDetail);\r\n            return response;\r\n        }\r\n    }\r\n\r\n    isRequestDetailDirty(obj, skip){\r\n      if(this.selectedRequestDetail){\r\n          if(!obj){\r\n              var obj = this.emptyRequestDetail();\r\n          }\r\n            var skip = skip ? skip : new Array();\r\n            skip.push('audit');\r\n            return this.utils.objectsEqual(this.selectedRequestDetail, obj, skip);\r\n        }\r\n        return new Array();\r\n    }\r\n\r\n    async getClientRequest(id){\r\n         let serverResponse = await this.data.get(this.CLIENT_REQUEST_DETAILS + '/' + id);\r\n        if (!serverResponse.error) {\r\n            this.selectedRequest = serverResponse;\r\n        } \r\n        return serverResponse;\r\n    }\r\n\r\n    async getSessionCount(sessionArray, numSessions, options, requestStatus){\r\n      var url = this.CLIENT_REQUESTS_SERVICES;\r\n      url += options ? options : \"\";\r\n      var response = await this.data.get(url);\r\n      if(!response.error){\r\n          var sessions = new Array();\r\n          var sessionCount = new Array();\r\n          numSessions = numSessions < sessionArray.length ? numSessions : sessionArray.length - 1;\r\n          for(var i = 0; i <= numSessions; i++){\r\n              sessions.push(sessionArray[i]._id);\r\n              sessionCount.push({count: 0, session: sessionArray[i].session});\r\n          }\r\n          requestStatus = requestStatus ? requestStatus.split(':') : undefined;\r\n          response.forEach((request) => {\r\n              var index = sessions.indexOf(request.sessionId);\r\n              if( index > -1){\r\n                  if(requestStatus){\r\n                      request.requestDetails.forEach((detail) => {\r\n                          if(requestStatus.indexOf(detail.requestStatus) > -1) {\r\n                              sessionCount[index].count += 1;\r\n                          }\r\n                      });\r\n                  } else {\r\n                      sessionCount[index].count += request.requestDetails.length;\r\n                  }\r\n\r\n              }\r\n          });\r\n         return sessionCount;\r\n      }\r\n    }\r\n\r\n    async sendCustomerMessage(message){\r\n        console.log(message)\r\n        var serverResponse = await this.data.saveObject(message, this.CLIENT_REQUEST_EMAIL, \"post\");\r\n        return serverResponse;\r\n    }\r\n\r\n    updateDetailStatuses(selectedRequestNo, status){\r\n        this.requestsDetailsArray.forEach(item => {\r\n            if(item.requestId && item.requestId.clientRequestNo == selectedRequestNo){\r\n                if(item.requestStatus != this.config.ASSIGNED_REQUEST_CODE) item.requestStatus = status;\r\n            }\r\n        })\r\n    }\r\n\r\n    updateDetailStatus(id, status){\r\n         this.requestsDetailsArray.forEach(item => {\r\n            if(item.requestId._id == id){\r\n                if(item.requestStatus != this.config.ASSIGNED_REQUEST_CODE) item.requestStatus = status;\r\n            }\r\n        })\r\n    }\r\n\r\n    async groupRequestsByInstitutionCountry(){\r\n        if(!this.requestsDetailsArrayAnalytics) {\r\n            return;\r\n        }\r\n        var sortedArray = new Array();\r\n        this.requestsDetailsArrayAnalytics.forEach(item => {\r\n            if(item['requestId'] &&  item['requestId'].institutionId && item['productId'] && item['productId'].name ){\r\n                item.sortValue = item['requestId'].institutionId.name + item['productId'].name;\r\n                sortedArray.push(item);\r\n            } \r\n        });\r\n\r\n        var sortedArray = this.requestsDetailsArrayAnalytics \r\n            .sort((a, b) => {\r\n                var result = (a.sortValue < b.sortValue) ? -1 : (a.sortValue > b.sortValue) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.analyticsInstitutionCountryResultArray = new Array(); \r\n        var instID = \"\";\r\n        var templateObj = new Object();\r\n        var that = this;\r\n        sortedArray.forEach(function(item){\r\n            // if(item.requestId){\r\n                if(item.sortValue != instID){\r\n                    instID = item.sortValue;\r\n                    var obj = that.utils.copyObject(templateObj);\r\n                    obj.name = item.requestId.institutionId.name;\r\n                    obj.institutionId = item.requestId.institutionId._id;\r\n                    obj.person = item.requestId.clientRequestsDetails.fullName;\r\n                    obj.productName = item.productId.name;\r\n                    obj.country = item.requestId.institutionId.country;\r\n                    obj.total = 0;\r\n                    obj.students = 0;\r\n                    that.analyticsInstitutionCountryResultArray.push(obj);\r\n                }\r\n                // if(item.requestStatus != skip){\r\n                    that.analyticsInstitutionCountryResultArray[that.analyticsInstitutionCountryResultArray.length-1]['total'] += 1;\r\n                    that.analyticsInstitutionCountryResultArray[that.analyticsInstitutionCountryResultArray.length-1]['students'] += parseInt(item.requestId.undergradIds) + parseInt(item.requestId.graduateIds);\r\n                    // var gradIds = item.requestId.graduateIds != null ? parseInt(item.requestId.graduateIds) : 0;\r\n                    // var underIds = item.requestId.undergradIds != null ? parseInt(item.requestId.undergradIds) : 0;\r\n                    // that.analyticsInstitutionResultArray[that.analyticsInstitutionResultArray.length-1]['studentIds'] += gradIds + underIds;\r\n                    // that.analyticsInstitutionResultArray[that.analyticsInstitutionResultArray.length-1]['studentIds'] += parseInt(item.requestId.graduateIds) + parseInt(item.requestId.undergradIds);\r\n                // }\r\n                // that.analyticsInstitutionResultArray[that.analyticsInstitutionResultArray.length-1][item.requestStatus] += 1;\r\n            // }\r\n          \r\n        })\r\n    }\r\n\r\n    async groupRequestsByInstitution(){\r\n        if(!this.requestsDetailsArrayAnalytics) {\r\n            return;\r\n        }\r\n        var sortedArray = this.requestsDetailsArrayAnalytics \r\n            .sort((a, b) => {\r\n                if(!a['requestId'] || !b['requestId'] || !a['requestId'].institutionId || !b['requestId'].institutionId ) return -1;\r\n                var result = (a['requestId'].institutionId.name < b['requestId'].institutionId.name) ? -1 : (a['requestId'].institutionId.name > b['requestId'].institutionId.name) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.analyticsInstitutionResultArray = new Array();\r\n        var instID = \"\";\r\n        var numStatuses = this.config.REQUEST_STATUS.length;\r\n        var templateObj = new Object();\r\n         templateObj['total'] = 0;\r\n         templateObj['studentIds'] = 0;\r\n        for(var i = 0; i < numStatuses; i++){\r\n            templateObj[this.config.REQUEST_STATUS[i].code] = 0;\r\n            if(this.config.REQUEST_STATUS[i].description === \"Cancelled\") {\r\n                var skip = this.config.REQUEST_STATUS[i].code;\r\n            }\r\n        }\r\n        var that = this;\r\n        sortedArray.forEach(function(item){\r\n            if(item.requestId){\r\n                if(item.requestId.institutionId && item.requestId.institutionId.name != instID){\r\n                    instID = item.requestId.institutionId.name;\r\n                    var obj = that.utils.copyObject(templateObj);\r\n                    obj.name = item.requestId.institutionId.name;\r\n                    obj.institutionId = item.requestId.institutionId._id;\r\n                    that.analyticsInstitutionResultArray.push(obj);\r\n                }\r\n                if(item.requestStatus != skip){\r\n                    that.analyticsInstitutionResultArray[that.analyticsInstitutionResultArray.length-1]['total'] += 1;\r\n                    var gradIds = item.requestId.graduateIds != null ? parseInt(item.requestId.graduateIds) : 0;\r\n                    var underIds = item.requestId.undergradIds != null ? parseInt(item.requestId.undergradIds) : 0;\r\n                    that.analyticsInstitutionResultArray[that.analyticsInstitutionResultArray.length-1]['studentIds'] += gradIds + underIds;\r\n                    // that.analyticsInstitutionResultArray[that.analyticsInstitutionResultArray.length-1]['studentIds'] += parseInt(item.requestId.graduateIds) + parseInt(item.requestId.undergradIds);\r\n                }\r\n                that.analyticsInstitutionResultArray[that.analyticsInstitutionResultArray.length-1][item.requestStatus] += 1;\r\n            }\r\n          \r\n        })\r\n        \r\n    }\r\n\r\n    groupRequestsByProduct(){\r\n         if(!this.requestsDetailsArrayAnalytics) {\r\n            return;\r\n        }\r\n        var sortedArray = this.requestsDetailsArrayAnalytics \r\n            .sort((a, b) => {\r\n                if(!a.productId || !b.productId) return -1;\r\n                var result = (a.productId.name < b.productId.name) ? -1 : (a.productId.name > b.productId.name) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.analyticsProductsResultArray = new Array();\r\n        var prodID = \"\";\r\n        var numStatuses = this.config.REQUEST_STATUS.length;\r\n        var templateObj = new Object();\r\n        templateObj['total'] = 0;\r\n        templateObj['studentIds'] = 0;\r\n        for(var i = 0; i < numStatuses; i++){\r\n            templateObj[this.config.REQUEST_STATUS[i].code] = 0;\r\n            if(this.config.REQUEST_STATUS[i].description === \"Cancelled\") {\r\n                var skip = this.config.REQUEST_STATUS[i].code;\r\n            }            \r\n        }\r\n\r\n        sortedArray.forEach(item => {\r\n            if(item.productId.name != prodID){ \r\n                prodID = item.productId.name;\r\n                var obj = this.utils.copyObject(templateObj);\r\n                obj.productId = item.productId;\r\n                obj.country = item.requestId.institutionId.country;\r\n                this.analyticsProductsResultArray.push(obj);\r\n            }\r\n            if(item.requestStatus != skip){\r\n                this.analyticsProductsResultArray[this.analyticsProductsResultArray.length-1]['total'] += 1;\r\n                var gradIds = item.requestId.graduateIds != null ? parseInt(item.requestId.graduateIds) : 0;\r\n                var underIds = item.requestId.undergradIds != null ? parseInt(item.requestId.undergradIds) : 0;\r\n                this.analyticsProductsResultArray[this.analyticsProductsResultArray.length-1]['studentIds'] += gradIds + underIds;\r\n            }            \r\n            this.analyticsProductsResultArray[this.analyticsProductsResultArray.length-1][item.requestStatus] += 1;\r\n        })\r\n    }\r\n\r\n    fieldSorter(fields) {\r\n        return (a, b) => fields.map(o => {\r\n            let dir = 1;\r\n            if (o[0] === '-') { dir = -1; o=o.substring(1); }\r\n            return a[o] > b[o] ? dir : a[o] < b[o] ? -(dir) : 0;\r\n        }).reduce((p,n) => p ? p : n, 0);\r\n    }\r\n\r\n    groupRequestsByCountry(){\r\n        if(!this.requestsDetailsArrayAnalytics) {\r\n            return;\r\n        }\r\n\r\n        var preSortedArray = this.requestsDetailsArrayAnalytics.forEach(item => {\r\n            if(item.requestId.institutionId && item.requestId.institutionId.country && item.productId.name) {\r\n                item.sortProperty = item.requestId.institutionId.country + item.productId.name;\r\n            } else { \r\n                item.sortProperty = \"ZZZZ\";\r\n            }\r\n            \r\n        });\r\n\r\n        var sortedArray = this.requestsDetailsArrayAnalytics.sort((a, b) =>{\r\n            var result = (a.sortProperty < b.sortProperty) ? -1 : (a.sortProperty > b.sortProperty) ? 1 : 0;\r\n            return result;\r\n        });\r\n\r\n        this.analyticsCountryProductsResultArray = new Array();\r\n        var prodID = \"\";\r\n        var country = \"\";\r\n        var numStatuses = this.config.REQUEST_STATUS.length;\r\n        var templateObj = new Object();\r\n        templateObj['total'] = 0;\r\n        templateObj['studentIds'] = 0;\r\n        for(var i = 0; i < numStatuses; i++){\r\n            templateObj[this.config.REQUEST_STATUS[i].code] = 0;\r\n            if(this.config.REQUEST_STATUS[i].description === \"Cancelled\") {\r\n                var skip = this.config.REQUEST_STATUS[i].code;\r\n            }            \r\n        }\r\n\r\n        sortedArray.forEach(item => {\r\n            if(item.productId.name != prodID || item.requestId.institutionId.country != country){ \r\n                prodID = item.productId.name;\r\n                country = item.requestId.institutionId ? item.requestId.institutionId.country : \"\";\r\n                var obj = this.utils.copyObject(templateObj);\r\n                obj.productId = item.productId;\r\n                obj.country = item.requestId.institutionId ? item.requestId.institutionId.country : \"\";\r\n                this.analyticsCountryProductsResultArray.push(obj);\r\n            }\r\n            if(item.requestStatus != skip){\r\n                this.analyticsCountryProductsResultArray[this.analyticsCountryProductsResultArray.length-1]['total'] += 1;\r\n                var gradIds = item.requestId.graduateIds != null ? parseInt(item.requestId.graduateIds) : 0;\r\n                var underIds = item.requestId.undergradIds != null ? parseInt(item.requestId.undergradIds) : 0;\r\n                this.analyticsCountryProductsResultArray[this.analyticsCountryProductsResultArray.length-1]['studentIds'] += gradIds + underIds;\r\n            }            \r\n            this.analyticsCountryProductsResultArray[this.analyticsCountryProductsResultArray.length-1][item.requestStatus] += 1;\r\n        })\r\n    }\r\n\r\n    lockRequest(obj){\r\n        if(obj.requestId) {\r\n            var response = this.data.saveObject(obj, this.CLIENT_REQUEST_LOCK_SERVICES, \"post\");\r\n        }\r\n    }\r\n\r\n    async getRequestLock(id){\r\n        var response = await this.data.get(this.CLIENT_REQUEST_LOCK_SERVICES + \"/\" + id);\r\n        if (!response.error) {\r\n                return response;\r\n        } else {\r\n                this.data.processError(response, \"There was an error retrieving the help ticket lock.\");\r\n        }\r\n    }\r\n\r\n    async removeRequestLock(id){\r\n        await this.data.deleteObject(this.CLIENT_REQUEST_LOCK_SERVICES + \"/\" + id);\r\n    }\r\n}\r\n","import {inject} from 'aurelia-framework';\r\n\r\nimport {DataServices} from './dataServices';\r\n\r\n@inject(DataServices)\r\nexport class Config {\r\n    CONFIG_SERVICE = 'config';\r\n    SESSIONS_CONFIG_SERVICE = 'semesterConfig';\r\n\r\n    token;\r\n\tuser;\r\n\r\n    constructor(data) {\r\n        this.data = data;   \r\n    }\r\n\r\n    async getConfigArray(refresh, options) {\r\n        if (!this.configArray || refresh) {\r\n            var url = this.data.CONFIG_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.configArray = serverResponse;\r\n                } else {\r\n                    this.data.processError(serverResponse);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async saveAll(saveConfigArray){\r\n        if(saveConfigArray){\r\n            var saveObj = {parameters: saveConfigArray};\r\n            let response = await this.data.saveObject(saveObj, this.CONFIG_SERVICE + '/saveAll', \"put\")\r\n            if (!response.error) {\r\n                return response;\r\n            }  else {\r\n                this.data.processError(response, \"There was an error updating the configuration.\");\r\n            }\r\n            return response;\r\n        }\r\n        return null;\r\n    }\r\n\r\n     async saveSessions(saveSessionArray){\r\n        if(saveSessionArray){\r\n            let response = await this.data.saveObject(saveSessionArray, this.SESSIONS_CONFIG_SERVICE, \"put\")\r\n            if (!response.error) {\r\n                return response;\r\n            }  else {\r\n                this.data.processError(response, \"There was an error updating the configuration.\");\r\n            }\r\n            return response;\r\n        }\r\n        return null;\r\n    }\r\n}","import {inject} from 'aurelia-framework';\r\nimport {Utils} from '../utils/utils';\r\nimport {DataServices} from './dataServices';\r\n\r\n@inject(DataServices, Utils)\r\nexport class Curriculum {\r\n    curriculumArray = undefined;\r\n\tcurriculumCatArray = undefined;\r\n\r\n    CURRICULUM_SERVICE = 'curriculum';\r\n    CURRICULUM_CATEGORY_SERVICE = 'curriculumcategory';\r\n\r\n    constructor(data, utils) {\r\n        this.data = data;\r\n\t\tthis.utils = utils;   \r\n    }\r\n\r\n    async getCurriculumArray(refresh, options) {\r\n        if (!this.configArray || refresh) {\r\n            var url = this.CURRICULUM_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.curriculumArray = serverResponse;\r\n                } else {\r\n                    this.data.processError(serverResponse);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n\tasync getCurriculumCategoryArray(refresh, options) {\r\n        if (!this.configArray || refresh) {\r\n            var url = this.CURRICULUM_CATEGORY_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.curriculumCatArray = serverResponse;\r\n                } else {\r\n                    this.data.processError(serverResponse);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n\tselectCurriculum(index) {\r\n        if (index === undefined) {\r\n            this.selectedCurriculum = this.emptyCurriculum();\r\n        } else {\r\n            try {\r\n                this.selectedCurriculum = this.utils.copyObject(this.curriculumArray[index]);\r\n                this.editIndex = index;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.selectedCurriculum = this.emptyCurriculum();\r\n            }\r\n        }\r\n    }\r\n\r\n    selectCurriculumById(id){\r\n        if(!id){\r\n            this.selectedCurriculum = this.emptyCurriculum();\r\n        } else {\r\n            for(var i = 0; i < this.curriculumArray.length; i++){\r\n                if(this.curriculumArray[i]._id === id){\r\n                    this.selectedCurriculum = this.utils.copyObject(this.curriculumArray[i]);\r\n                    this.editIndex = i;\r\n                    return;\r\n                }\r\n            }   \r\n        }\r\n    }\r\n\r\n\temptyCurriculum() {\r\n        var obj  = new Object();\r\n        obj.category = \"\";\r\n        obj.title = \"\";\r\n        obj.description = \"\";\r\n\t\tobj.notes = \"\";\r\n        obj.rating = 0;\r\n        obj.comments = new Array();\r\n        obj.products = new Array();\r\n        return obj;\r\n    }\r\n\r\n\tasync save() {\r\n        if (!this.selectedCurriculum._id) {\r\n            let response = await this.data.saveObject(this.selectedCurriculum, this.CURRICULUM_SERVICE, \"post\")\r\n                if (!response.error) {\r\n                    if(this.curriculumArray){\r\n                        this.curriculumArray.push(response);;\r\n                    }\r\n                } else {\r\n                     this.data.processError(response, \"There was an error creating the curriculum.\");\r\n                }\r\n                return response;\r\n        } else {\r\n            let response = await this.data.saveObject(this.selectedCurriculum, this.CURRICULUM_SERVICE, \"put\")\r\n                if (!response.error) {\r\n                    if(this.curriculumArray){\r\n                        this.curriculumArray[this.editIndex] = this.utils.copyObject(this.selectedCurriculum, this.curriculumArray[this.editIndex]);\r\n                    }\r\n                }  \r\n                return response;\r\n        }\r\n    }\r\n\r\n\tisDirty(obj){\r\n      if(this.selectedCurriculum){\r\n\t\tif(!obj){\r\n\t\t\tvar obj = this.emptyCurriculum(); \r\n\t\t}\r\n\t\treturn this.utils.objectsEqual(this.selectedCurriculum, obj, ['file']);\r\n        }\r\n        return new Array();\r\n    }\r\n\r\n\tasync delete(){\r\n\t\tif(this.selectedCurriculum._id){\r\n\t\t\tlet serverResponse = await this.data.deleteObject(this.CURRICULUM_SERVICE + '/' + this.selectedCurriculum._id);\r\n\t\t\tif (!serverResponse.error) {\r\n\t\t\t\tthis.curriculumArray.splice(this.editIndex, 1);\r\n\t\t\t\tthis.editIndex = - 1;\r\n\t\t\t}\r\n\t\t\treturn serverResponse;\r\n\t\t}\r\n\t}\r\n\r\n    selectCurriculumCategory(index){\r\n         if (index === undefined) {\r\n            this.selectedCurriculumCategory = this.emptyCurriculumCategory();\r\n        } else {\r\n            try {\r\n                this.selectedCurriculumCategory = this.utils.copyObject(this.curriculumCatArray[index]);\r\n                this.editCategoryIndex = index;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.selectedCurriculumCategory = this.emptyCurriculumCategory();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    selectCurriculumCategoryByName(name){\r\n         if (name === undefined) {\r\n            this.selectedCurriculumCategory = this.emptyCurriculumCategory();\r\n        } else {\r\n            try {\r\n                for(var i = 0; i < this.curriculumCatArray.length; i++ ){\r\n                    if( this.curriculumCatArray[i].name === name){\r\n                        this.selectedCurriculumCategory = this.utils.copyObject(this.curriculumCatArray[i]);\r\n                        this.editCategoryIndex = i;\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n            } catch (error) {\r\n                console.log(error);\r\n                this.selectedCurriculumCategory = this.emptyCurriculumCategory();\r\n            }\r\n        }\r\n    }\r\n\r\n    emptyCurriculumCategory() {\r\n        var obj  = new Object();\r\n        obj.name = \"\";\r\n        obj.description = \"\";\r\n        return obj;\r\n    }\r\n\r\n    async saveCategory(){\r\n         if (!this.selectedCurriculumCategory._id) {\r\n            let response = await this.data.saveObject(this.selectedCurriculumCategory, this.CURRICULUM_CATEGORY_SERVICE, \"post\")\r\n                if (!response.error) {\r\n                    if(this.curriculumCatArray){\r\n                        this.curriculumCatArray.push(response);;\r\n                    }\r\n                } else {\r\n                     this.data.processError(response, \"There was an error creating the curriculum catgory.\");\r\n                }\r\n                return response;\r\n        } else {\r\n            let response = await this.data.saveObject(this.selectedCurriculumCategory, this.CURRICULUM_CATEGORY_SERVICE, \"put\")\r\n                if (!response.error) {\r\n                    if(this.curriculumCatArray){\r\n                        this.curriculumCatArray[this.editCategoryIndex] = this.utils.copyObject(this.selectedCurriculumCategory, this.curriculumCatArray[this.editCategoryIndex]);\r\n                    }\r\n                } else {\r\n                     this.data.processError(response, \"There was an error creating the curriculum catgory.\");\r\n                }\r\n                return response;\r\n        }\r\n    }\r\n\r\n    async deleteCategory(){\r\n        if(this.selectedCurriculumCategory._id){\r\n\t\t\tlet serverResponse = await this.data.deleteObject(this.CURRICULUM_CATEGORY_SERVICE + '/' + this.selectedCurriculumCategory._id);\r\n\t\t\tif (!serverResponse.error) {\r\n\t\t\t\tthis.curriculumCatArray.splice(this.editCategoryIndex, 1);\r\n\t\t\t\tthis.editCategoryIndex = - 1;\r\n\t\t\t}\r\n\t\t\treturn serverResponse;\r\n\t\t}\r\n    }\r\n\r\n    curriculumExist(category){\r\n         let exists = false;\r\n         for(var i = 0; i < this.curriculumArray.length; i++){\r\n             if(this.curriculumArray[i].category === category){\r\n                 exists = true;\r\n                 break;\r\n             }\r\n         }\r\n         return exists;\r\n    }\r\n\r\n    async uploadFile(files){\r\n        let response = await this.data.uploadFiles(files, this.CURRICULUM_SERVICE + \"/upload\"  + \"/\" + this.selectedCurriculum._id + '/' + this.selectedCurriculum.category);\r\n        if(!response.error){\r\n            this.curriculumArray[this.editIndex].file = response.file;\r\n        }\r\n    }\r\n\r\n}","import {inject} from 'aurelia-framework';\r\nimport {HttpClient} from 'aurelia-http-client';\r\nimport {Utils} from '../utils/utils';\r\nimport {AppConfig} from '../../config/appConfig';\r\nimport {EventAggregator} from 'aurelia-event-aggregator';\r\n\r\n@inject(HttpClient, Utils, AppConfig, EventAggregator)\r\nexport class DataServices {\r\n    isRequesting = false;\r\n\r\n    constructor(http, utils, config, eventAggregator) {\r\n        this.http = http;\r\n        this.utils = utils;\r\n        this.config = config;\r\n        this.eventAggregator = eventAggregator;\r\n\r\n\t\tthis.http.configure(x => {\r\n\t\t\tx.withBaseUrl(this.config.BASE_URL);\r\n\t\t});\r\n    }\r\n\r\n\tactivate(){\r\n\t}\r\n\r\n  get(url){\r\n\t\tthis.isRequesting = true;\r\n\t\treturn this.http.createRequest(url)\r\n\t\t.asGet()\r\n\t\t.withHeader('Authorization', 'JWT ' + sessionStorage.getItem('token'))\r\n\t\t.send().then(response => {\r\n\t\t\tthis.isRequesting = false;\r\n  \t\t\tif (!response.isSuccess) {\r\n             return response;\r\n         } else {\r\n             return JSON.parse(response.response);\r\n         }\r\n     }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n         console.log(e);\r\n         return  {error: true, code: e.statusCode, message: e.statusText};\r\n     });\r\n\t}\r\n\r\n    getNoAuth(url){\r\n        this.isRequesting = true;\r\n\t\treturn this.http.createRequest(url)\r\n\t\t.asGet()\r\n\t\t.send().then(response => {\r\n\t\t\tthis.isRequesting = false;\r\n\t\t\tif (!response.isSuccess) {\r\n                     return response;\r\n                 } else {\r\n                     return JSON.parse(response.response);\r\n                 }\r\n             }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 console.log(e);\r\n                 return  {error: true, code: e.statusCode, message: e.statusText};\r\n             });\r\n    }\r\n\r\n\tsaveObject(content, url, method) {\r\n        this.isRequesting = true;\r\n\t\tif(method === 'put'){\r\n \t\t\treturn this.http.createRequest(url)\r\n\t\t\t .asPut()\r\n\t\t\t .withHeader('Authorization', 'JWT ' + sessionStorage.getItem('token'))\r\n\t\t\t .withContent(content)\r\n\t\t\t .send().then(response => {\r\n\t\t\t\t this.isRequesting = false;\r\n\t\t\t\tif (!response.isSuccess) {\r\n                     return response;\r\n                 } else {\r\n                     return JSON.parse(response.response);\r\n                 }\r\n             }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 console.log(e);\r\n                 return  {error: true, code: e.statusCode, message: e.statusText};\r\n             });\r\n\r\n\t\t} else if(method === 'post'){\r\n\t\t\treturn this.http.createRequest(url)\r\n\t\t\t .asPost()\r\n\t\t\t .withHeader('Authorization', 'JWT ' + sessionStorage.getItem('token'))\r\n\t\t\t .withContent(content)\r\n\t\t\t .send().then(response => {\r\n\t\t\t\t this.isRequesting = false;\r\n\t\t\t\tif (!response.isSuccess) {\r\n                     return response;\r\n                 } else {\r\n                     return JSON.parse(response.response);\r\n                 }\r\n             }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 console.log(e);\r\n                 return  {error: true, code: e.statusCode, message: e.statusText};\r\n             });\r\n\t\t}\r\n\r\n    }\r\n\r\n\tdeleteObject(url){\r\n\t\tthis.isRequesting = true;\r\n\t\treturn this.http.createRequest(url)\r\n\t\t.asDelete()\r\n\t\t.withHeader('Authorization', 'JWT ' + sessionStorage.getItem('token'))\r\n\t\t.send().then(response => {\r\n\t\t\t\tthis.isRequesting = false;\r\n\t\t\t\tif (!response.isSuccess) {\r\n                     return response;\r\n                 } else {\r\n                     if(response.statusCode  === 204){\r\n                        return response;\r\n                     } else {\r\n                        return JSON.parse(response.response);\r\n                     }\r\n\r\n                 }\r\n             }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 console.log(e);\r\n                 return  {error: true, code: e.statusCode, message: e.statusText};\r\n             });\r\n\t}\r\n\r\n    sendMail(content) {\r\n        this.isRequesting = true;\r\n\t\t\treturn this.http.createRequest('sendMail')\r\n\t\t\t .asPost()\r\n\t\t\t .withHeader('Authorization', 'JWT ' + sessionStorage.getItem('token'))\r\n\t\t\t .withContent(content)\r\n\t\t\t .send().then(response => {\r\n\t\t\t\t this.isRequesting = false;\r\n\t\t\t\tif (!response.isSuccess) {\r\n                     return response;\r\n                 } else {\r\n                     return JSON.parse(response.response);\r\n                 }\r\n             }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 console.log(e);\r\n                 return  {error: true, code: e.statusCode, message: e.statusText};\r\n             });\r\n\r\n    }\r\n\r\n    login(content, url){\r\n        return this.http.createRequest(url)\r\n\t\t\t .asPost()\r\n\t\t\t .withContent(content)\r\n\t\t\t .send().then(response => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 return JSON.parse(response.response);\r\n             }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 console.log(e);\r\n                 return  {error: true, code: e.statusCode, message: e.statusText};\r\n             });\r\n    }\r\n\r\n    uploadFiles(files, url){\r\n        // this.isRequesting = true;\r\n        this.progress = 0;\r\n\t\tlet formData = new FormData();\r\n\r\n\t\tfiles.forEach((item, index) => {\r\n            formData.append(\"file\" + index, item);\r\n        })\r\n\r\n\t\treturn this.http.createRequest(url)\r\n\t\t\t.asPost()\r\n\t\t\t.withHeader('Authorization', 'JWT ' + sessionStorage.getItem('token'))\r\n\t\t\t.withContent(formData)\r\n\t\t\t.skipContentProcessing()\r\n            .withProgressCallback(progress => {\r\n                console.log(progress.loaded)\r\n                this.eventAggregator.publish('upload-progress', {progress: progress.loaded, total: progress.total});\r\n                this.progress = progress.loaded / progress.total;\r\n            })\r\n\t\t\t.send().then(response => {\r\n\t\t\t\tthis.isRequesting = false;\r\n\t\t\t\tif (!response.isSuccess) {\r\n                     return response;\r\n                 } else {\r\n                     return JSON.parse(response.response);\r\n                 }\r\n             }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 console.log(e);\r\n                 return  {error: true, code: e.statusCode, message: e.statusText};\r\n             });\r\n\r\n    }\r\n\r\n    processError(obj, message) {\r\n        console.log(obj);\r\n        var msg = (message ? message : \"\") + \" \";\r\n        switch (obj.code) {\r\n            case 404:\r\n                msg = undefined;\r\n                break;\r\n            case 422:\r\n                msg = msg += \"The request was bad.  Contact your UCC.\";\r\n                break;\r\n            case 409:\r\n                msg = msg += \"The record already exists.\";\r\n                break;\r\n            case 500:\r\n                msg = msg += \"An unspecified error occured on the server.  Contact your UCC.\";\r\n                break;\r\n            default:\r\n                msg = msg += \"An unspecified error occured.  Contact your UCC.\"\r\n        }\r\n        if(msg && msg.length > 0) this.utils.showNotification(msg);\r\n    }\r\n\r\n    // //File URLs\r\n    FILE_URL = \"http://localhost:5000/api/upload\";\r\n    FILE_DOWNLOAD_URL = \"http://localhost:5000/\";\r\n\r\n    // //Institution Services\r\n    // INSTITUTION_SERVICES = \"institutions\";\r\n\r\n    // //People Services\r\n    // PEOPLE_SERVICE = \"people\";\r\n    // PERSON_REGISTER = \"people/register\"\r\n    // CHECK_EMAIL = 'people/checkEmail';\r\n    // CHECK_NAME = 'people/checkName';\r\n    // SEND_MAIL = 'people/sendMail';\r\n    // PASSWORD_RESET = 'passwordReset';\r\n    // NOTES_SERVICE = \"notes\";\r\n\r\n    // CURRICULUM_SERVICE = 'curriculum';\r\n    // CURRICULUM_CATEGORY_SERVICE = 'curriculumcategory';\r\n\r\n    // //IS4UA Services\r\n    IS4UA = 'is4ua';\r\n\r\n    // //Systems Services\r\n    // SYSTEMS_SERVICE = \"systems\";\r\n\r\n    // //Clients Services\r\n    CLIENTS_SERVICE = 'clients';\r\n    DELETE_ALL_CLIENTS = 'clients/system/SYSTEMID';\r\n\r\n\r\n    // //Products Services\r\n    // PRODUCTS_SERVICE = 'products';\r\n\r\n\r\n\r\n    // //Help Tickets\r\n    // HELP_TICKET_SERVICES = 'helpTickets';\r\n    // HELP_TICKET_CONTENT_SERVICES = \"helpTickets/content/HELPTICKETID/STATUS\";\r\n    // HELP_TICKET_LOCK_SERVICES = \"helpTicketLocks\";\r\n    // HELP_TICKET_TYPES = \"helpTicketsTypes\";\r\n\r\n    // //Downloads\r\n    // DOWNLOADS_SERVICE = \"apps\";\r\n    // APPLICATION_CATEGORY_SERVICE = \"appsCategory\";\r\n    // DOCUMENTS_SERVICE = \"documents\";\r\n    // DOCUMENTS_CATEGORY_SERVICE = \"documentCategory\";\r\n    // DOWNLOADS_UPLOADS = \"downloads/upload\";\r\n\r\n    // //Clientrequests Services\r\n    COURSES_SERVICE = 'courses';\r\n    PERSON_COURSES_SERVICE = 'courses/person/PERSONID';\r\n    // CLIENT_REQUESTS_SERVICES = 'clientRequests';\r\n    // CLIENT_REQUEST_DETAILS='clientRequestsDetails';\r\n    // CLIENT_REQUEST_LOCK_SERVICES = 'clientRequestLocks';\r\n    // CUSTOMER_ACTION = 'clientRequests/customerAction';\r\n\r\n    CONFIG_SERVICE = 'config';\r\n    SESSIONS_CONFIG_SERVICE = 'semesterConfig';\r\n\r\n    //File upload\r\n    DOCUMENTS_FILE_UPLOAD = 'documents/file';\r\n\r\n    // API_KEY='0f85bb931f8faad7e35b6f685aa4e931';\r\n    // OPEN_WEATHER_MAP_SERVICE = 'http://api.openweathermap.org/data/2.5/weather';\r\n\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\nimport {Utils} from '../utils/utils';\r\nimport {AppConfig} from '../../config/appConfig';\r\nimport moment from 'moment';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class DocumentsServices {\r\n\r\n    DOCUMENTS_SERVICE = \"documents\";\r\n    DOCUMENTS_CATEGORY_SERVICE = \"documentCategory\"; \r\n\r\n    \r\n\r\n    constructor(data, utils, config) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n        this.config = config;\r\n    }\r\n\r\n    //Documents\r\n    async getDocumentsArray(refresh, options) {\r\n        if (!this.documentsArray || refresh) {\r\n            var url = this.DOCUMENTS_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.status) {\r\n                    this.documentsArray = serverResponse;\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                return undefined;\r\n            }\r\n        }\r\n        return this.documentsArray;\r\n    }\r\n\r\n    selectDocument(index) {\r\n        if (!index && index != 0) {\r\n            this.selectedDocument = this.emptyDocument();\r\n        } else {\r\n            try {\r\n                this.selectedDocument = this.utils.copyObject(this.documentsArray[index]);\r\n                this.editDocumentIndex = index;\r\n            } catch (error) {\r\n                this.selectedDocument = this.emptyDocument();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    emptyDocument() {\r\n        var newObj = new Object();\r\n        newObj.name = \"\";\r\n        newObj.description = \"\";\r\n        newObj.type = 0;\r\n        newObj.files = new Array();\r\n        newObj.active = true;\r\n        newObj.createdDate = new Date();\r\n\r\n        return newObj;\r\n    }\r\n\r\n    async saveDocument() {\r\n        if (!this.selectedDocument) {\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedDocument._id) {\r\n            let serverResponse = await this.data.saveObject(this.selectedDocument, this.DOCUMENTS_SERVICE, \"post\");\r\n            if (!serverResponse.status) {\r\n                this.selectedDocument = serverResponse;\r\n                this.documentsArray.push(this.selectedDocument);\r\n                this.editDocumentIndex = this.documentsArray.length - 1;\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedDocument, this.DOCUMENTS_SERVICE, \"put\");\r\n            if (!serverResponse.status) {\r\n                this.documentsArray[this.editDocumentIndex] = this.utils.copyObject(this.selectedDocument, this.documentsArray[this.editDocumentIndex]);\r\n            }\r\n            return serverResponse;\r\n        }\r\n\r\n    }\r\n\r\n    uploadFile(files, version){\r\n        let path = this.selectedCat.code + '$@' + this.selectedDocument.name\r\n       this.data.uploadFiles(files, this.data.DOCUMENTS_FILE_UPLOAD + \"/\" + path + '/' + version);\r\n    }\r\n\r\n    async deleteFile(index){\r\n        if (!this.selectedDocument || !this.selectedDocument._id) {\r\n            return;\r\n        }\r\n        let serverResponse = await this.data.deleteObject(this.data.DOCUMENTS_FILE_UPLOAD + '/' + this.selectedDocument._id + '/' + index);\r\n        if (!serverResponse.status) {\r\n            this.selectedDocument.files.splice(index,1);\r\n            this.documentsArray[this.editDocumentIndex] = this.utils.copyObject(this.selectedDocument, this.documentsArray[this.editDocumentIndex]);\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    async deleteDocument(){\r\n         let serverResponse = await this.data.deleteObject(this.DOCUMENTS_SERVICE + '/' + this.selectedDocument._id);\r\n            if (serverResponse.status === 204) {\r\n                this.documentsArray.splice(this.editDocumentIndex, 1);\r\n                this.editDownloadIndex = - 1;\r\n            }\r\n            return serverResponse;\r\n    }\r\n\r\n    isDirty(obj){\r\n        if(this.selectedDocument){\r\n            if(!obj){\r\n                var obj = this.emptyDocument();\r\n            }\r\n            var skip = ['file'];\r\n            return this.utils.objectsEqual(this.selectedDocument, obj, skip );\r\n        }\r\n        return new Array();\r\n     }\r\n\r\n    //Categories\r\n    async getDocumentsCategoriesArray(refresh, options) {\r\n        if (!this.docCatsArray || refresh) {\r\n            var url = this.DOCUMENTS_CATEGORY_SERVICE;\r\n            url += options ? options : \"\";;\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.docCatsArray = serverResponse;\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                return undefined;\r\n            }\r\n        }\r\n        return this.docCatsArray;\r\n    }\r\n\r\n    selectCategory(index){\r\n         if (!index && index != 0) {\r\n            this.selectedCat = this.emptyCat();\r\n        } else {\r\n            try {\r\n                this.selectedCat = this.utils.copyObject(this.docCatsArray[index]);\r\n                this.editCatIndex = index;\r\n            } catch (error) {\r\n                this.selectedCat = this.emptyCat();\r\n            }\r\n        }\r\n    }\r\n\r\n    selectCategoryByCode(index) {\r\n        if (!index && index != 0) {\r\n            this.selectedCat = this.emptyCat();\r\n        } else {\r\n            try {\r\n                for(var i = 0; i<this.docCatsArray.length; i++){\r\n                    if(this.docCatsArray[i].code == index){\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n                this.selectedCat = this.utils.copyObject(this.docCatsArray[index]);\r\n                this.editCatIndex = index;\r\n            } catch (error) {\r\n                this.selectedCat = this.emptyCat();\r\n            }\r\n        }\r\n    }\r\n\r\n    emptyCat() {\r\n        var newObj = new Object();\r\n        var newCode = 0;\r\n        for(var i = 0; i < this.docCatsArray.length; i++){\r\n            if(this.docCatsArray[i].code > newCode) newCode = this.docCatsArray[i].code;\r\n        }\r\n        newObj.code = newCode + 1;\r\n        newObj.description = \"\";\r\n\r\n        return newObj;\r\n    }\r\n\r\n    async saveCategory() {\r\n        if (!this.selectedCat) {\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedCat._id) {\r\n            let serverResponse = await this.data.saveObject(this.selectedCat, this.DOCUMENTS_CATEGORY_SERVICE, \"post\");\r\n            if (!serverResponse.status) {\r\n                this.docCatsArray.push(serverResponse);\r\n                this.editCatIndex = this.docCatsArray.length - 1;\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedCat, this.DOCUMENTS_CATEGORY_SERVICE, \"put\");\r\n            if (!serverResponse.status) {\r\n                this.docCatsArray[this.editCatIndex] = this.utils.copyObject(this.selectedCat, this.docCatsArray[this.editCatIndex]);\r\n            }\r\n            return serverResponse;\r\n        }\r\n\r\n    }\r\n\r\n    async deleteCat(){\r\n        if (this.selectedCat._id) {\r\n            let serverResponse = await this.data.deleteObject(this.DOCUMENTS_CATEGORY_SERVICE + '/' + this.selectedCat._id);\r\n            if (serverResponse.status === 204) {\r\n                this.docCatsArray.splice(this.editCatIndex, 1);\r\n                this.editCatIndex = - 1;\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            return {error: \"no category selected\"}\r\n        }\r\n    }\r\n\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\nimport {Utils} from '../utils/utils';\r\nimport {AppConfig} from '../../config/appConfig';\r\nimport moment from 'moment';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class Downloads {\r\n    DOWNLOADS_SERVICE = \"apps\";\r\n    APPLICATION_CATEGORY_SERVICE = \"appsCategory\";\r\n    DOWNLOADS_UPLOADS = \"downloads/upload\";\r\n\r\n    constructor(data, utils, config) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n        this.config = config; \r\n    }\r\n\r\n    //Downloads\r\n    async getDownloadsArray(refresh, options) {\r\n        if (!this.appDownloadsArray || refresh) {\r\n            var url = this.DOWNLOADS_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.appDownloadsArray = serverResponse;\r\n                } \r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    selectDownload(index) {\r\n        if (!index && index != 0) {\r\n            this.selectedDownload = this.emptyDownload();\r\n        } else {\r\n            try {\r\n                this.selectedDownload = this.utils.copyObject(this.appDownloadsArray[index]);\r\n                this.editDownloadIndex = index;\r\n            } catch (error) {\r\n                this.selectedDownload = this.emptyDownload();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    emptyDownload() {\r\n        var newObj = new Object();\r\n        newObj.name = \"\";\r\n        newObj.description = \"\";\r\n        newObj.type = 0;\r\n        newObj.file = \"\";\r\n        newObj.createdDate = new Date();\r\n        newObj.active = true;\r\n        newObj.helpTicketRelevant = false;\r\n\r\n        return newObj;\r\n    }\r\n\r\n    async saveDownload() {\r\n        if (!this.selectedDownload) {\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedDownload._id) {\r\n            let serverResponse = await this.data.saveObject(this.selectedDownload, this.DOWNLOADS_SERVICE, \"post\");\r\n            if (!serverResponse.error) {\r\n                this.selectedDownload = serverResponse;\r\n                this.appDownloadsArray.push(this.selectedDownload);\r\n                this.editDownloadIndex = this.appDownloadsArray.length - 1;\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedDownload, this.DOWNLOADS_SERVICE, \"put\");\r\n            if (!serverResponse.error) {\r\n                this.appDownloadsArray[this.editDownloadIndex] = this.utils.copyObject(this.selectedDownload, this.appDownloadsArray[this.editDownloadIndex]);\r\n            }\r\n            return serverResponse;\r\n        }\r\n\r\n    }\r\n\r\n    async uploadFile(files){\r\n        let response = await this.data.uploadFiles(files, this.DOWNLOADS_UPLOADS + \"/\" + this.selectedDownload._id + '/' + this.selectedDownload.downCatcode);\r\n        if(!response.error){\r\n            this.appDownloadsArray[this.editDownloadIndex].file = response.file;\r\n        }\r\n    }\r\n\r\n    async deleteDownload(){\r\n         let serverResponse = await this.data.deleteObject(this.DOWNLOADS_SERVICE + '/' + this.selectedDownload._id);\r\n            if (!serverResponse.error) {\r\n                this.appDownloadsArray.splice(this.editDownloadIndex, 1);\r\n                this.editDownloadIndex = - 1;\r\n            }\r\n            return serverResponse;\r\n    }\r\n\r\n    isDirty(obj){\r\n        if(this.selectedDownload){\r\n            if(!obj){\r\n                var obj = this.emptyDownload();\r\n            }\r\n            var skip = ['file'];  \r\n            return this.utils.objectsEqual(this.selectedDownload, obj, skip );\r\n        }\r\n        return new Array();\r\n     }\r\n     \r\n\r\n   \r\n    //Categories\r\n    async getDownloadCategoriesArray(refresh, options) {\r\n        if (!this.appCatsArray || refresh) {\r\n            var url = this.APPLICATION_CATEGORY_SERVICE;\r\n            url += options ? options : \"\";;\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.appCatsArray = serverResponse;\r\n                } \r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    selectCategory(index) {\r\n        if (!index && index != 0) {\r\n            this.selectedCat = this.emptyCat();\r\n        } else {\r\n            try {\r\n                this.selectedCat = this.utils.copyObject(this.appCatsArray[index]);\r\n                this.editCatIndex = index;\r\n            } catch (error) {\r\n                this.selectedCat = this.emptyCat();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    selectCategoryByCode(code) {\r\n        if (!code && code != 0) {\r\n            this.selectedCat = this.emptyCat();\r\n        } else {\r\n            try {\r\n                this.editCatIndex = 0;\r\n                this.appCatsArray.forEach((item, index) => {\r\n                    if(item.downCatcode == code)  this.editCatIndex = index;\r\n                })\r\n                this.selectedCat = this.utils.copyObject(this.appCatsArray[this.editCatIndex]);\r\n            } catch (error) {\r\n                this.selectedCat = this.emptyCat();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    emptyCat() {\r\n        var newObj = new Object();\r\n        newObj.code = 0;\r\n        newObj.description = \"\";\r\n\r\n        return newObj;\r\n    }\r\n\r\n    documentsExist(code){\r\n        if (!code && code != 0) {\r\n           return false;\r\n        } else {\r\n            for(var i = 0; i <  this.appDownloadsArray.length; i++){\r\n                if(this.appDownloadsArray[i].downCatcode == code) return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async saveCategory() {\r\n        if (!this.selectedCat) {\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedCat._id) {\r\n            let serverResponse = await this.data.saveObject(this.selectedCat, this.APPLICATION_CATEGORY_SERVICE, \"post\");\r\n            if (!serverResponse.error) {\r\n                this.appCatsArray.push(serverResponse);\r\n                this.selectedCat = serverReponse;\r\n                this.editCatIndex = this.appCatsArrayInternal.length - 1;\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedCat, this.APPLICATION_CATEGORY_SERVICE, \"put\");\r\n            if (!serverResponse.error) {\r\n                this.appCatsArray[this.editCatIndex] = this.utils.copyObject(this.selectedCat, this.appCatsArray[this.editCatIndex]);\r\n            }\r\n            return serverResponse;\r\n        }\r\n\r\n    }\r\n\r\n    async deleteCat(){\r\n        if (this.selectedCat._id) {\r\n            let serverResponse = await this.data.deleteObject(this.APPLICATION_CATEGORY_SERVICE + '/' + this.selectedCat._id);\r\n            if (!serverResponse.error) {\r\n                this.appCatsArray.splice(this.editCatIndex, 1);\r\n                this.editCatIndex = - 1;\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            return {error: \"no category selected\"}\r\n        }\r\n    }\r\n}","import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\nimport {Utils} from '../utils/utils';\r\n\r\nimport moment from 'moment';\r\n\r\n@inject(DataServices, Utils)\r\nexport class Events {\r\n\r\n    EVENTS_SERVICE = 'events';\r\n\r\n    constructor(data, utils) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n    }\r\n\r\n    async getEventsArray(options, refresh) {\r\n        if (!this.eventArray || refresh) {\r\n            var url = this.EVENTS_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    if(Object.prototype.toString.call(serverResponse) == '[object Array]'){\r\n                        this.eventArray = serverResponse;\r\n                    } else {\r\n                        this.eventArray = new Array();;                        \r\n                    }\r\n                } else {\r\n                    this.data.processError(serverResponse);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n    \r\n    async getEventsPersonArray(personId, refresh) {\r\n        if (!this.eventArray || refresh) {\r\n            var url = this.EVENTS_SERVICE + \"/\" + personId;\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    if(Object.prototype.toString.call(serverResponse) == '[object Array]'){\r\n                        this.eventArray = serverResponse;\r\n                    } else {\r\n                        this.eventArray = new Array();;                        \r\n                    }\r\n                } else {\r\n                    this.data.processError(serverResponse);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\t}\r\n    \r\n\r\n\tselectEvent(index) {\r\n        if (index === undefined) {\r\n            this.selectedEvent = this.emptyEvent();\r\n        } else {\r\n\t\t\tthis.selectedEvent = this.utils.copyObject(this.eventArray[index]);\r\n\t\t\tthis.editIndex = index;\r\n        }\r\n    }\r\n    \r\n    selectEventById(eventId){\r\n        if(eventId == undefined) {\r\n            this.selectedEvent = this.emptyEvent();\r\n        } else {\r\n            for(var i = 0; i < this.eventArray.length; i++){\r\n                if(this.eventArray[i]._id === eventId) {\r\n                    this.editIndex = i;\r\n                    this.selectedEvent = this.utils.copyObject(this.eventArray[i]);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n         this.selectedEvent = this.emptyEvent();\r\n    }\r\n\r\n    setEvent(event){\r\n        this.selectedEvent = this.utils.copyObject(event);\r\n    }\r\n\r\n    createEvent(event){\r\n        var obj = new Object();\r\n        obj.title = event.eventTitle;\r\n        obj.end =event.eventEnd\r\n        obj.start =event.eventStart\r\n        obj.eventType = \"\";\r\n        obj.allDay = false\r\n        obj.notes = event.notes;\r\n        obj.scope = event.scope ? \"u\" : \"p\";\r\n\t\treturn obj;\r\n    }\r\n\t\r\n\temptyEvent(){\r\n\t\tvar obj = new Object();\r\n        obj.title = \"\";\r\n        obj.eventType = \"\";\r\n        obj.allDay = false\r\n        obj.notes = \"\";\r\n        obj.scope = \"p\";\r\n\t\treturn obj;\r\n\t}\r\n\r\n\tasync saveEvent() {\r\n       if (!this.selectedEvent._id) {\r\n\t\t\tlet response = await this.data.saveObject(this.selectedEvent, this.EVENTS_SERVICE, \"post\")\r\n\t\t\t\tif (!response.error) {\r\n\t\t\t\t\tif(this.eventArray){\r\n                        this.selectedEvent = response;\r\n\t\t\t\t\t\tthis.eventArray.push(response);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.data.processError(response, \"There was an error creating the event.\");\r\n\t\t\t\t}\r\n\t\t\t\treturn response;\r\n\t\t} else {\r\n\t\t\tlet response = await this.data.saveObject(this.selectedEvent, this.EVENTS_SERVICE, \"put\")\r\n\t\t\t\tif (!response.error) {\r\n\t\t\t\t\tif(this.eventArray){\r\n\t\t\t\t\t\tthis.eventArray[this.editIndex] = this.utils.copyObject(this.selectedEvent, this.eventArray[this.editIndex]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn response;\r\n\t\t}\r\n   }\r\n\r\n    async deleteEvent(){\r\n        if(this.selectedEvent._id){\r\n            let serverResponse = await this.data.deleteObject(this.EVENTS_SERVICE + '/' + this.selectedEvent._id);\r\n            if (!serverResponse.error) {\r\n                this.eventArray.splice(this.editIndex, 1);\r\n                this.editIndex = - 1;\r\n            }\r\n            return serverResponse;\r\n        }\r\n        return null;\r\n    }\r\n}","import { inject } from 'aurelia-framework';\r\nimport { DataServices } from './dataServices';\r\nimport { Utils } from '../utils/utils';\r\nimport { AppConfig } from '../../config/appConfig';\r\nimport moment from 'moment';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class HelpTickets {\r\n    newHelpTicket = false;      //Is the selected product a new product\r\n    editIndex;                  //Index of selected product\r\n\r\n    HELP_TICKET_SERVICES = 'helpTickets';\r\n    HELP_TICKET_CONTENT_SERVICES = \"helpTickets/content/HELPTICKETID/STATUS\";\r\n    HELP_TICKET_LOCK_SERVICES = \"helpTicketLocks\";\r\n    HELP_TICKET_TYPES = \"helpTicketsTypes\";\r\n    HELP_TICKET_EMAIL = \"helpTickets/sendMail\";\r\n    NOTIFICATION_SERVICES = \"notifications\";\r\n\r\n    constructor(data, utils, config) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n        this.config = config;\r\n    }\r\n\r\n    async getHelpTicketArray(options, refresh) {\r\n        if (!this.helpTicketsArray || refresh) {\r\n            var url = this.HELP_TICKET_SERVICES;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.helpTicketsArray = serverResponse;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getMyHelpTickets(id) {\r\n        let serverResponse = await this.data.get(this.HELP_TICKET_SERVICES + '/mine/' + id);\r\n        if (!serverResponse.error) {\r\n            this.helpTicketsArray = serverResponse;\r\n        }\r\n    }\r\n\r\n    async getUserHelpTicketArray(options, refresh) {\r\n        if (!this.helpTicketsArray || refresh) {\r\n            var url = this.HELP_TICKET_SERVICES + '/users';\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.helpTicketsArray = serverResponse;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getArchivedHelpTicketArray(options, refresh) {\r\n        if (!this.helpTicketsArray || refresh) {\r\n            var url = this.HELP_TICKET_SERVICES + '/archived';\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.helpTicketsArray = serverResponse;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getHelpTicketsArrayAnalytics(options, refresh) {\r\n        if (!this.requestsArray || refresh) {\r\n            var url = this.HELP_TICKET_SERVICES + \"/analytics\";\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.helpTicketArrayAnalytics = serverResponse;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getHelpTicket(id) {\r\n        if (id) {\r\n            try {\r\n                let serverResponse = await this.data.get(this.HELP_TICKET_SERVICES + \"/\" + id);\r\n                if (!serverResponse.error) {\r\n                    this.selectedHelpTicket = serverResponse;\r\n                }\r\n                return serverResponse;\r\n            } catch (error) {\r\n                console.log(error);\r\n                return undefined;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    async getHelpTicketByNumber(id) {\r\n      if (id) {\r\n          try {\r\n              let serverResponse = await this.data.get(this.HELP_TICKET_SERVICES + \"?filter=helpTicketNo|eq|\" + id);\r\n              if (!serverResponse.error) {\r\n                  this.selectedHelpTicket = serverResponse[0];\r\n              }\r\n              return serverResponse;\r\n          } catch (error) {\r\n              console.log(error);\r\n              return undefined;\r\n          }\r\n\r\n      }\r\n  }\r\n\r\n    async getArchiveHelpTicket(id) {\r\n      if (id) {\r\n          try {\r\n              let serverResponse = await this.data.get(this.HELP_TICKET_SERVICES + \"/archive\" + \"/\" + id);\r\n              if (!serverResponse.error) {\r\n                  this.selectedHelpTicket = serverResponse;\r\n              }\r\n              return serverResponse;\r\n          } catch (error) {\r\n              console.log(error);\r\n              return undefined;\r\n          }\r\n\r\n      }\r\n  }\r\n\r\n    setHelpTicket(helpTicket) {\r\n        if (!helpTicket) {\r\n            this.emptyHelpTicket();\r\n        } else {\r\n            this.selectedHelpTicket = this.utils.copyObject(helpTicket);\r\n        }\r\n    }\r\n\r\n    async getCurrentCount(options) {\r\n        var url = this.HELP_TICKET_SERVICES + '/current/count';\r\n        url += options ? \"/\" + options : \"\";\r\n        var response = await this.data.get(url);\r\n        if (!response.status) {\r\n            this.newHelpTickets = this.utils.countItems(this.config.NEW_HELPTICKET_STATUS, 'helpTicketStatus', response);\r\n            this.inProcessHelpTickets = this.utils.countItems(this.config.IN_PROCESS_HELPTICKET_STATUS, 'helpTicketStatus', response);\r\n            this.underReviewHelpTickets = this.utils.countItems(this.config.UNDER_REVIEW_HELPTICKET_STATUS, 'helpTicketStatus', response);\r\n            this.customerActionHelpTickets = this.utils.countItems(this.config.CUSTOMER_ACTION_HELPTICKET_STATUS, 'helpTicketStatus', response);\r\n            return response.count;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    selectHelpTicket(index) {\r\n        if (!index && index != 0) {\r\n            this.emptyHelpTicket();\r\n        } else {\r\n            try {\r\n                this.selectedHelpTicket = this.utils.copyObject(this.helpTicketsArray[index]);\r\n                this.editIndex = index;\r\n            } catch (error) {\r\n                this.selectedHelpTicket = this.emptyHelpTicket();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    updateHelpTicket(helpTicket){\r\n        for(let i = 0; i < this.helpTicketsArray.length; i++ ){\r\n            if(this.helpTicketsArray[i]._id === helpTicket._id){\r\n                this.helpTicketsArray[i] = this.utils.copyObject(helpTicket, this.helpTicketsArray[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    selectHelpTicketByID(id) {\r\n        this.helpTicketsArray.forEach((item, index) => {\r\n            if (item._id === id) {\r\n                this.selectedHelpTicket = this.utils.copyObject(item);\r\n                this.editIndex = index;\r\n                return;\r\n            }\r\n        });\r\n        return null;\r\n    }\r\n\r\n    emptyHelpTicket() {\r\n        var newHelpTicketObj = new Object();\r\n\r\n        newHelpTicketObj.sessionId = \"\";\r\n        newHelpTicketObj.type = \"\";\r\n        newHelpTicketObj.courseId = \"\";\r\n        newHelpTicketObj.personId = \"\";\r\n        newHelpTicketObj.helpTicketType = \"\";\r\n        newHelpTicketObj.helpTicketStatus = this.config.NEW_HELPTICKET_STATUS;\r\n        newHelpTicketObj.priority = \"0\";\r\n        newHelpTicketObj.content = new Array();\r\n        newHelpTicketObj.owner = new Array();\r\n        newHelpTicketObj.createdDate = new Date();\r\n        newHelpTicketObj.modifiedDate = new Date();\r\n        newHelpTicketObj.audit = new Array();\r\n        newHelpTicketObj.audit.push({\r\n            event: 'Created',\r\n            eventDate: new Date()\r\n        })\r\n\r\n        this.selectedHelpTicket = newHelpTicketObj;\r\n\r\n        this.emptyHelpTicketContent();\r\n    }\r\n\r\n    selectHelpTicketContent(index) {\r\n        if (!index && index != 0) {\r\n            this.emptyHelpTicketContent();\r\n        } else {\r\n            try {\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.emptyHelpTicketContent();\r\n            }\r\n        }\r\n    }\r\n\r\n    emptyHelpTicketContent() {\r\n        var newHelpTicketContent = new Object();\r\n        newHelpTicketContent.type = 0;\r\n        newHelpTicketContent.createdDate = new Date();\r\n        newHelpTicketContent.helpTicketId = \"\";\r\n        newHelpTicketContent.files = new Array();\r\n        newHelpTicketContent.confidential = false;\r\n        newHelpTicketContent.personId = \"\";\r\n        newHelpTicketContent.content = {};\r\n        newHelpTicketContent.content.comments = \"\";\r\n        this.selectedHelpTicketContent = newHelpTicketContent;\r\n\r\n    }\r\n\r\n    async getOwner(id){\r\n      let serverResponse = await this.data.get(this.HELP_TICKET_SERVICES + '/owner/' + id);\r\n      return serverResponse;\r\n    }\r\n\r\n    async updateOwner(obj) {\r\n        if (!this.selectedHelpTicket) {\r\n            return;\r\n        }\r\n\r\n        var response = await this.data.saveObject(obj, this.HELP_TICKET_SERVICES + \"/owner/\" + this.selectedHelpTicket._id, \"put\");\r\n        if (!response.error) {\r\n            this.selectedHelpTicket = response;\r\n            this.updateHelpTicket(this.selectedHelpTicket);\r\n        } else {\r\n            this.data.processError(response, \"There was an error updating the help ticket.\");\r\n        }\r\n        return response;\r\n    }\r\n\r\n    async updateStatus(email) {\r\n        if (!this.selectedHelpTicket) {\r\n            return;\r\n        }\r\n\r\n        var response = await this.data.saveObject(this.selectedHelpTicket, this.HELP_TICKET_SERVICES + \"/status/\" + this.selectedHelpTicket._id, \"put\");\r\n        if (!response.error) {\r\n            this.helpTicketsArray[this.editIndex].helpTicketStatus = response.helpTicketStatus;\r\n        } else {\r\n            this.data.processError(response, \"There was an error updating the help ticket.\");\r\n        }\r\n        return response;\r\n    }\r\n\r\n    async updateKeywords() {\r\n        if (!this.selectedHelpTicket) {\r\n            return;\r\n        }\r\n\r\n        var response = await this.data.saveObject(this.selectedHelpTicket, this.HELP_TICKET_SERVICES + \"/keywords/\" + this.selectedHelpTicket._id, \"put\");\r\n        if (!response.error) {\r\n            this.helpTicketsArray[this.editIndex].keyWords = response.keyWords;\r\n        } else {\r\n            this.data.processError(response, \"There was an error updating the help ticket.\");\r\n        }\r\n        return response;\r\n    }\r\n\r\n    async reopenHelpTicket() {\r\n        if (!this.selectedHelpTicket) {\r\n            return;\r\n        }\r\n        if(this.selectedHelpTicketContent) this.selectedHelpTicket.content.push(this.selectedHelpTicketContent);\r\n        var url = this.HELP_TICKET_SERVICES + '/reopen';\r\n        var response = await this.data.saveObject(this.selectedHelpTicket, url, \"put\");\r\n        if (!response.error) {\r\n\r\n        } else {\r\n            this.data.processError(response, \"There was an error updating the help ticket.\");\r\n        }\r\n        return response;\r\n    }\r\n\r\n    async closeHelpTicket() {\r\n        if (!this.selectedHelpTicket) {\r\n            return;\r\n        }\r\n        if(this.selectedHelpTicketContent) this.selectedHelpTicket.content.push(this.selectedHelpTicketContent);\r\n        var response = await this.data.saveObject(this.selectedHelpTicket, this.HELP_TICKET_SERVICES + '/close', \"put\");\r\n        if (!response.error) {\r\n            this.helpTicketsArray.splice(this.editIndex, 1);\r\n        } else {\r\n            this.data.processError(response, \"There was an error updating the help ticket.\");\r\n        }\r\n        return response;\r\n    }\r\n\r\n    async saveHelpTicket(email) {\r\n        if (!this.selectedHelpTicket) {\r\n            return;\r\n        }\r\n        var url = this.HELP_TICKET_SERVICES;\r\n        if (!this.selectedHelpTicket._id) {\r\n            var response = await this.data.saveObject(this.selectedHelpTicket, url, \"post\");\r\n            if (!response.error) {\r\n                if (email && email.email) {\r\n                    let HTNo = response.helpTicketNo ? response.helpTicketNo : \" \";\r\n                    email.subject = email.subject.replace('[[No]]', HTNo);\r\n                    email.MESSAGE = email.MESSAGE.replace('[[No]]', HTNo);\r\n                    this.data.saveObject(email, this.HELP_TICKET_EMAIL, \"post\");\r\n                }\r\n                this.selectedHelpTicket = this.utils.copyObject(response);\r\n                if (this.helpTicketsArray) this.helpTicketsArray.push(this.selectedHelpTicket);\r\n            } else {\r\n                this.data.processError(response, \"There was an error creating the help ticket.\");\r\n            }\r\n            return response;\r\n        } else {\r\n            var status = this.selectedHelpTicket.helpTicketStatus;\r\n            var response = await this.data.saveObject(this.selectedHelpTicket, url, \"put\");\r\n            if (!response.error) {\r\n                if (email && email.email) {\r\n                    this.selectedHelpTicket = this.utils.copyObject(response);\r\n                    this.data.saveObject(email, this.HELP_TICKET_EMAIL, \"post\");\r\n                }\r\n                this.selectHelpTicketByID(this.selectedHelpTicket._id);\r\n                if (status !== this.config.CLOSED_HELPTICKET_STATUS) {\r\n                    // this.updateHelpTicket(this.selectedHelpTicket);\r\n                    this.helpTicketsArray[this.editIndex] = this.utils.copyObject(response, this.helpTicketsArray[this.editIndex]);\r\n                } else {\r\n                    this.helpTicketsArray.splice(this.editIndex,1);\r\n                }\r\n            } else {\r\n                this.data.processError(response, \"There was an error updating the help ticket.\");\r\n            }\r\n            return response;\r\n        }\r\n    }\r\n\r\n    async saveHelpTicketResponse(email) {\r\n        if (this.selectedHelpTicket._id) {\r\n            var url = this.HELP_TICKET_CONTENT_SERVICES.replace(\"HELPTICKETID\", this.selectedHelpTicket._id).replace(\"STATUS\", this.selectedHelpTicket.helpTicketStatus);\r\n            var response = await this.data.saveObject(this.selectedHelpTicketContent, url, \"put\");\r\n            if (!response.error) {\r\n                if (!this.selectedHelpTicketContent.confidential && email.email) this.data.saveObject(email, this.HELP_TICKET_EMAIL, \"post\");\r\n                this.selectedHelpTicket = this.utils.copyObject(response);\r\n                this.updateHelpTicket(this.selectedHelpTicket);\r\n                // this.helpTicketsArray[this.editIndex] = this.utils.copyObject(this.selectedHelpTicket, this.helpTicketsArray[this.editIndex]);\r\n            } else {\r\n                this.data.processError(response, \"There was an error updating the help ticket.\");\r\n            }\r\n            return response;\r\n        }\r\n    }\r\n\r\n    async saveHelpTicketResponseAndCLose(email) {\r\n        if (this.selectedHelpTicket._id) {\r\n            var url = this.HELP_TICKET_CONTENT_SERVICES.replace(\"HELPTICKETID\", this.selectedHelpTicket._id).replace(\"STATUS\", this.selectedHelpTicket.helpTicketStatus);\r\n            var response = await this.data.saveObject(this.selectedHelpTicketContent, url, \"put\");\r\n            if (!response.error) {\r\n                if (!this.selectedHelpTicketContent.confidential && email.email) this.data.saveObject(email, this.HELP_TICKET_EMAIL, \"post\");\r\n                this.selectedHelpTicket = this.utils.copyObject(response);\r\n                this.updateHelpTicket(this.selectedHelpTicket);\r\n                this.helpTicketsArray[this.editIndex] = this.utils.copyObject(this.selectedHelpTicket, this.helpTicketsArray[this.editIndex]);\r\n            } else {\r\n                this.data.processError(response, \"There was an error updating the help ticket.\");\r\n            }\r\n            return response;\r\n        }\r\n    }\r\n\r\n    saveNotification(notice){\r\n        this.data.saveObject(notice, this.NOTIFICATION_SERVICES, \"post\");\r\n    }\r\n\r\n    isHelpTicketDirty(obj, skip) {\r\n        if (this.selectedHelpTicket) {\r\n            if (!this.selectedHelpTicket._id) {\r\n            //     var obj = obj ? this.helpTicketsArray[this.editIndex] : obj;\r\n            // } else {\r\n                var obj = this.emptyHelpTicket();\r\n            }\r\n            return this.utils.objectsEqual(this.selectedHelpTicket, obj, skip);\r\n        }\r\n        return new Array();\r\n    }\r\n\r\n    async uploadFile(files, content) {\r\n        let response = await this.data.uploadFiles(files, this.HELP_TICKET_SERVICES + \"/upload/\" + this.selectedHelpTicket._id + '/' + this.selectedHelpTicket.helpTicketNo + '/' + content);\r\n        if (!response.error) {\r\n            if(this.selectedHelpTicket) this.selectedHelpTicket = this.utils.copyObject(response);\r\n            if(this.helpTicketsArray && this.editIndex) this.updateHelpTicket(this.selectHelpTicket);\r\n            // this.helpTicketsArray[this.editIndex] = this.utils.copyObject(this.selectedHelpTicket, this.helpTicketsArray[this.editIndex]);\r\n        }\r\n    }\r\n\r\n    \r\n    async uploadFileArchive(files, content) {\r\n        let response = await this.data.uploadFiles(files, this.HELP_TICKET_SERVICES + \"/uploadArchive/\" + this.selectedHelpTicket._id + '/' + this.selectedHelpTicket.helpTicketNo + '/' + content);\r\n        if (!response.error) {\r\n            if(this.selectedHelpTicket) this.selectedHelpTicket = this.utils.copyObject(response);\r\n            if(this.helpTicketsArray && this.editIndex) this.updateHelpTicket(this.selectHelpTicket);\r\n            // this.helpTicketsArray[this.editIndex] = this.utils.copyObject(this.selectedHelpTicket, this.helpTicketsArray[this.editIndex]);\r\n        }\r\n    }\r\n\r\n    calcHelpTicketAges() {\r\n        this.helpTickeAges = {\r\n            today: [0, 0],\r\n            yesterday: [0, 0],\r\n            oneWeek: [0, 0],\r\n            twoWeeks: [0, 0],\r\n            older: [0, 0]\r\n        };\r\n        let today = moment(new Date());\r\n\r\n        this.helpTicketsArray.forEach(item => {\r\n            // let index = item.owner[0].personId === null ? 1 : 0;\r\n            let ageCreated = today.diff(moment(item.createdDate), 'days');\r\n            let ageModifed = today.diff(moment(item.modifiedDate), 'days');\r\n            if (ageCreated === 0) {\r\n                this.helpTickeAges.today[0] += 1;\r\n            } else if (ageCreated === 1) {\r\n                this.helpTickeAges.yesterday[0] += 1;\r\n            } else if (ageCreated <= 7) {\r\n                this.helpTickeAges.oneWeek[0] += 1;\r\n            } else if (ageCreated <= 14) {\r\n                this.helpTickeAges.twoWeeks[0] += 1;\r\n            } else {\r\n                this.helpTickeAges.older[0] += 1;\r\n            }\r\n            if (ageModifed === 0) {\r\n                this.helpTickeAges.today[1] += 1;\r\n            } else if (ageModifed === 1) {\r\n                this.helpTickeAges.yesterday[1] += 1;\r\n            } else if (ageModifed <= 7) {\r\n                this.helpTickeAges.oneWeek[1] += 1;\r\n            } else if (ageModifed <= 14) {\r\n                this.helpTickeAges.twoWeeks[1] += 1;\r\n            } else {\r\n                this.helpTickeAges.older[1] += 1;\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    async getHelpTicketTypes(options, refresh) {\r\n        if (!this.helpTicketTypesArray || refresh) {\r\n            var url = this.HELP_TICKET_TYPES;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.helpTicketTypesArray = serverResponse.sort((a, b) => {\r\n                        return a.category < b.category ? 0 : -1;\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    selectHelpTicketTypeCategory(index) {\r\n        if (!index && index != 0) {\r\n            this.selectedHelpTicketType = this.emptyHelpTicketType();\r\n        } else {\r\n            try {\r\n                this.selectedHelpTicketType = this.utils.copyObject(this.helpTicketTypesArray[index]);\r\n                this.editTypeIndex = index;\r\n            } catch (error) {\r\n                this.selectedHelpTicket = this.emptyHelpTicketType();\r\n            }\r\n        }\r\n    }\r\n\r\n    emptyHelpTicketType() {\r\n        let obj = new Object();\r\n        return obj;\r\n    }\r\n\r\n    async saveHelpTicketType() {\r\n        if (!this.selectedHelpTicketType) {\r\n            return;\r\n        }\r\n        var url = this.HELP_TICKET_TYPES;\r\n\r\n        if (!this.selectedHelpTicketType._id) {\r\n            var response = await this.data.saveObject(this.selectedHelpTicket, url, \"post\");\r\n            if (!response.error) {\r\n                this.selectedHelpTicketType = this.utils.copyObject(response);\r\n                if (this.helpTicketTypesArray) this.helpTicketTypesArray.push(this.selectedHelpTicketType);\r\n            } else {\r\n                this.data.processError(response, \"There was an error creating the help ticket type.\");\r\n            }\r\n            return response;\r\n        } else {\r\n            var response = await this.data.saveObject(this.selectedHelpTicketType, url, \"put\");\r\n            if (!response.error) {\r\n                this.selectedHelpTicketType = this.utils.copyObject(response);\r\n                this.helpTicketTypesArray[this.editTypeIndex] = this.utils.copyObject(this.selectedHelpTicketType, this.helpTicketTypesArray[this.editTypeIndex]);\r\n\r\n            } else {\r\n                this.data.processError(response, \"There was an error updating the help ticket type.\");\r\n            }\r\n            return response;\r\n        }\r\n    }\r\n\r\n    async countHelpTicketsStatus(status) {\r\n        let response = await this.data.get(this.HELP_TICKET_SERVICES + '/count/' + status);\r\n        return response;\r\n    }\r\n\r\n    groupRequestsByType() {\r\n        if (!this.helpTicketArrayAnalytics) {\r\n            return;\r\n        }\r\n        var sortedArray = this.helpTicketArrayAnalytics\r\n            .sort((a, b) => {\r\n                var result = (a.helpTicketType < b.helpTicketType) ? -1 : (a.helpTicketType > b.helpTicketType) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.helpTicketTypeArrayAnalytics = new Array();\r\n        var type = \"\";\r\n        var templateObj = new Object({ helpTicketType: \"\", count: 0 });\r\n\r\n        sortedArray.forEach(item => {\r\n            if (item.helpTicketType != type) {\r\n                type = item.helpTicketType;\r\n                var obj = this.utils.copyObject(templateObj);\r\n                obj.helpTicketType = item.helpTicketType;\r\n                this.helpTicketTypeArrayAnalytics.push(obj);\r\n            }\r\n            this.helpTicketTypeArrayAnalytics[this.helpTicketTypeArrayAnalytics.length - 1].count += 1;\r\n        })\r\n\r\n    }\r\n\r\n    groupRequestsByCurriculum() {\r\n        if (!this.helpTicketArrayAnalytics) {\r\n            return;\r\n        }\r\n\r\n        let filteredArray = this.helpTicketArrayAnalytics.filter(item => {\r\n            return item.content[0].content.curriculumTitle != undefined;\r\n        })\r\n\r\n        var sortedArray = filteredArray\r\n            .sort((a, b) => {\r\n                var result = (a.content[0].content.curriculumTitle < b.content[0].content.curriculumTitle) ? -1 : (a.content[0].content.curriculumTitle > b.content[0].content.curriculumTitle) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.helpTicketCurriculumArrayAnalytics = new Array();\r\n        var type = \"\";\r\n        var templateObj = new Object({ curriculum: \"\", count: 0 });\r\n\r\n        sortedArray.forEach(item => {\r\n            if (item.content[0].content.curriculumTitle != type) {\r\n                type = item.content[0].content.curriculumTitle;\r\n                var obj = this.utils.copyObject(templateObj);\r\n                obj.curriculumTitle = item.content[0].content.curriculumTitle;\r\n                this.helpTicketCurriculumArrayAnalytics.push(obj);\r\n            }\r\n            if (this.helpTicketCurriculumArrayAnalytics[this.helpTicketCurriculumArrayAnalytics.length - 1]) this.helpTicketCurriculumArrayAnalytics[this.helpTicketCurriculumArrayAnalytics.length - 1].count += 1;\r\n        })\r\n    }\r\n\r\n    groupHelpTicketsByInstitution() {\r\n        if (!this.helpTicketArrayAnalytics) {\r\n            return;\r\n        }\r\n\r\n        var sortedArray = this.helpTicketArrayAnalytics\r\n            .sort((a, b) => {\r\n                var result = (a.institutionId.name < b.institutionId.name) ? -1 : (a.institutionId.name > b.institutionId.name) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.helpTicketInstitutionArrayAnalytics = new Array();\r\n        var type = \"\";\r\n        var templateObj = new Object({ institution: \"\", count: 0 });\r\n\r\n        sortedArray.forEach(item => {\r\n            if (item.institutionId.name != type) {\r\n                type = item.institutionId.name;\r\n                var obj = this.utils.copyObject(templateObj);\r\n                obj.institution = item.institutionId.name;\r\n                this.helpTicketInstitutionArrayAnalytics.push(obj);\r\n            }\r\n            if (this.helpTicketInstitutionArrayAnalytics[this.helpTicketInstitutionArrayAnalytics.length - 1]) this.helpTicketInstitutionArrayAnalytics[this.helpTicketInstitutionArrayAnalytics.length - 1].count += 1;\r\n        })\r\n    }\r\n\r\n    groupHelpTicketsByPeople() {\r\n        if (!this.helpTicketArrayAnalytics) {\r\n            return;\r\n        }\r\n\r\n        var sortedArray = this.helpTicketArrayAnalytics\r\n            .sort((a, b) => {\r\n                if (!a['personId'] || !b['personId']) return -1;\r\n                var result = (a.personId.fullName < b.personId.fullName) ? -1 : (a.personId.fullName > b.personId.fullName) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.helpTicketPeopleArrayAnalytics = new Array();\r\n        var type = \"\";\r\n        var templateObj = new Object({ name: \"\", count: 0 });\r\n\r\n        sortedArray.forEach(item => {\r\n            if (item.personId) {\r\n                if (item.personId.fullName != type) {\r\n                    type = item.personId.fullName;\r\n                    var obj = this.utils.copyObject(templateObj);\r\n                    obj.name = item.personId.fullName;\r\n                    this.helpTicketPeopleArrayAnalytics.push(obj);\r\n                }\r\n                if (this.helpTicketPeopleArrayAnalytics[this.helpTicketPeopleArrayAnalytics.length - 1]) this.helpTicketPeopleArrayAnalytics[this.helpTicketPeopleArrayAnalytics.length - 1].count += 1;\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    groupHelpTicketsByStatus() {\r\n        if (!this.helpTicketArrayAnalytics) {\r\n            return;\r\n        }\r\n\r\n        var sortedArray = this.helpTicketArrayAnalytics\r\n            .sort((a, b) => {\r\n                var result = (a.helpTicketStatus < b.helpTicketStatus) ? -1 : (a.helpTicketStatus > b.helpTicketStatus) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.helpTicketStatusArrayAnalytics = new Array();\r\n        var type = \"\";\r\n        var templateObj = new Object({ helpTicketStatus: \"\", count: 0 });\r\n\r\n        sortedArray.forEach(item => {\r\n            if (item.helpTicketStatus != type) {\r\n                type = item.helpTicketStatus;\r\n                var obj = this.utils.copyObject(templateObj);\r\n                obj.helpTicketStatus = item.helpTicketStatus;\r\n                this.helpTicketStatusArrayAnalytics.push(obj);\r\n            }\r\n            if (this.helpTicketStatusArrayAnalytics[this.helpTicketStatusArrayAnalytics.length - 1]) this.helpTicketStatusArrayAnalytics[this.helpTicketStatusArrayAnalytics.length - 1].count += 1;\r\n        })\r\n    }\r\n\r\n    async archiveSearch(searchObj, collection) {\r\n        if (searchObj) {\r\n            var url = this.HELP_TICKET_SERVICES + \"/archive\" + (collection ? '/' + collection : '');\r\n            var resultArray = new Array();\r\n            let response = await this.data.saveObject(searchObj, url, \"post\");\r\n            if (!response.error) {\r\n                resultArray = response;\r\n                return resultArray;\r\n            } else {\r\n                return new Array();\r\n            }\r\n        }\r\n    }\r\n\r\n    advancedSearch(searchObj) {\r\n\r\n        var resultArray = this.utils.copyArray(this.helpTicketsArray);\r\n\r\n        if (searchObj.helpTicketNo.length > 0) {\r\n            resultArray = resultArray.filter(item => {\r\n                return item.helpTicketNo == searchObj.helpTicketNo;\r\n            });\r\n        } else {\r\n            //Dates\r\n            if (searchObj.dateRange && searchObj.dateRange.dateFrom !== \"\" && searchObj.dateRange.dateFrom !== \"Invalid date\") {\r\n                if (!searchObj.dateRange.dateTo || searchObj.dateRange.dateTo == \"Invalid date\") {\r\n                    resultArray = resultArray.filter(item => {\r\n                        var dt = moment(item.createdDate).format('YYYY-MM-DD');\r\n                        return moment(item.createdDate).isAfter(searchObj.dateRange.dateFrom);\r\n                    });\r\n                } else {\r\n                    resultArray = resultArray.filter(item => {\r\n                        var dt = moment(item.createdDate).format('YYYY-MM-DD');\r\n                        return moment(item.createdDate).isAfter(searchObj.dateRange.dateFrom) && moment(item.createdDate).isBefore(searchObj.dateRange.dateTo);\r\n                    });\r\n                }\r\n            }\r\n            //Status\r\n            if (searchObj.status && searchObj.status.length > 0) {\r\n                for (var i = 0; i < searchObj.status.length; i++) {\r\n                    searchObj.status[i] = parseInt(searchObj.status[i]);\r\n                }\r\n                resultArray = resultArray.filter(item => {\r\n                    return searchObj.status.indexOf(item.helpTicketStatus) > -1;\r\n                });\r\n            }\r\n            //Keywords\r\n            if (searchObj.keyWords && searchObj.keyWords.length > 0) {\r\n                var searchKeyword = searchObj.keyWords.toUpperCase();\r\n                resultArray = resultArray.filter(item => {\r\n                    if (item.keyWords) {\r\n                        var htKeyword = item.keyWords.toUpperCase();\r\n                        return htKeyword.indexOf(searchKeyword) > -1;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n\r\n                });\r\n            }\r\n            //Content\r\n            if (searchObj.content && searchObj.content.length > 0) {\r\n                var searchContent = searchObj.content.toUpperCase();\r\n                resultArray = resultArray.filter(item => {\r\n                    for (var i = 0; i < item.content.length; i++) {\r\n                        if (item.content[i].content.comments.toUpperCase().indexOf(searchContent) > -1) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n            //Type\r\n            if (searchObj.type && searchObj.type != -1) {\r\n                resultArray = resultArray.filter(item => {\r\n                    return searchObj.type == item.helpTicketType;\r\n                });\r\n            }\r\n\r\n            //Products\r\n            if (searchObj.productIds && searchObj.productIds.length > 0) {\r\n                resultArray = resultArray.filter(item => {\r\n                    return searchObj.productIds.indexOf(item.productId) > -1;\r\n                });\r\n            }\r\n\r\n            //People\r\n            if (searchObj.peopleIds && searchObj.peopleIds.length > 0) {\r\n                resultArray = resultArray.filter(item => {\r\n                    return searchObj.peopleIds.indexOf(item.personId._id) > -1;\r\n                });\r\n            }\r\n\r\n            //Instituions\r\n            if (searchObj.institutionIds && searchObj.institutionIds.length > 0) {\r\n                resultArray = resultArray.filter(item => {\r\n                    return searchObj.institutionIds.indexOf(item.institutionId._id) > -1;\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n        return resultArray;\r\n    }\r\n\r\n    lockHelpTicket(obj) {\r\n        if (obj.helpTicketId) {\r\n            var response = this.data.saveObject(obj, this.HELP_TICKET_LOCK_SERVICES, \"post\");\r\n        }\r\n    }\r\n\r\n    async getHelpTicketLock(id) {\r\n        var response = await this.data.get(this.HELP_TICKET_LOCK_SERVICES + \"/\" + id);\r\n        if (!response.error) {\r\n            return response;\r\n        } else {\r\n            this.data.processError(response, \"There was an error retrieving the help ticket lock.\");\r\n        }\r\n    }\r\n\r\n    removeHelpTicketLock(id) {\r\n        var response = this.data.deleteObject(this.HELP_TICKET_LOCK_SERVICES + \"/\" + id);\r\n    }\r\n\r\n    async archiveHelpTickets() {\r\n        let response = await this.data.saveObject({}, this.HELP_TICKET_SERVICES + '/archiveClosed', \"post\");\r\n        return response;\r\n    }\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\nimport {Utils} from '../utils/utils';\r\nimport {AppConfig} from '../../config/appConfig';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class Inventory {\r\n    INVENTORY_SERVICE = 'inventory';           \r\n\r\n    constructor(data, utils, config) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n        this.config = config; \r\n    }\r\n\r\n    //Downloads\r\n    async getInventoryArray(options, refresh) {\r\n        if (!this.inventoryArray || refresh) {\r\n            var url = this.INVENTORY_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.inventoryArray = serverResponse;\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                return undefined;\r\n            }\r\n        }\r\n        return this.inventoryArray;\r\n    }\r\n\r\n    selectInventory(index) {\r\n        if (!index && index != 0) {\r\n            this.selectedInventory = this.emptyInventory();\r\n        } else {\r\n            try {\r\n                this.selectedInventory = this.utils.copyObject(this.inventoryArray[index]);\r\n                this.selectedIndex = index;\r\n            } catch (error) {\r\n                this.selectedInventory = this.emptyInventory();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    emptyInventory() {\r\n        var newObj = new Object();\r\n\t\tnewObj.IPAddress = new Array();\r\n        return newObj;\r\n    }\r\n\r\n    async saveInventory() {\r\n        if (!this.selectedInventory) {\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedInventory._id) {\r\n            let serverResponse = await this.data.saveObject(this.selectedInventory, this.INVENTORY_SERVICE, \"post\");\r\n            if (!serverResponse.error) {\r\n                this.selectedInventory = serverResponse;\r\n                this.inventoryArray.push(this.selectedInventory);\r\n                this.selectedIndex = this.inventoryArray.length - 1;\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedInventory, this.INVENTORY_SERVICE, \"put\");\r\n            if (!serverResponse.error) {\r\n                this.inventoryArray[this.selectedIndex] = this.utils.copyObject(this.selectedInventory, this.inventoryArray[this.selectedIndex]);\r\n            }\r\n            return serverResponse;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    isDirty(obj){\r\n        if(this.selectedInventory){\r\n            if(!obj){\r\n                var obj = this.emptyInventory();\r\n            }\r\n            var skip = ['file'];  \r\n            return this.utils.objectsEqual(this.selectedInventory, obj, skip );\r\n        }\r\n        return new Array();\r\n     }\r\n     \r\n     async deleteInventory(){\r\n        if (this.selectedInventory._id) {\r\n            var response = this.data.deleteObject(this.INVENTORY_SERVICE + \"/\" + this.selectedInventory._id);\r\n        }\r\n     }\r\n   \r\n   \r\n}","import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\n\r\n@inject(DataServices)\r\nexport class is4ua {\r\n\r\n    constructor(data) {\r\n        this.data = data;\r\n    }\r\n\r\n    async loadIs4ua(){\r\n        // if(!this.personStatusArray){\r\n        let responses = await this.data.get(this.data.IS4UA);\r\n\r\n        this.personStatusArray = responses[0].personStatus;\r\n        this.deptArray = responses[0].deptCat;\r\n        this.specialArray = responses[0].personSpecialization;\r\n\r\n        this.sapProductsArray = responses[0].sapProducts;\r\n        this.uaCurriculumArray = responses[0].uaCurriculum;\r\n        this.uaDataSetsArray = responses[0].uaDatasets;\r\n\r\n        this.institutonStatusArray = responses[0].institutionStatus;\r\n        this.institutionTypes = responses[0].institutionTypes;\r\n        this.memberTypes = responses[0].memberTypes;\r\n        this.highestDegrees = responses[0].highestDegree;\r\n        // }\r\n    }\r\n\r\n    async loadProductKeys() {\r\n        let responses = await Promise.all([\r\n            this.data.getAllObjects(this.data.SAP_PRODUCTS),\r\n            this.data.getAllObjects(this.data.UA_CURRICULUM),\r\n            this.data.getAllObjects(this.data.UA_DATA_SETS)\r\n        ]);\r\n        this.sapProductsArray = responses[0];\r\n        this.uaCurriculumArray = responses[1];\r\n        this.uaDataSetsArray = responses[2];\r\n    }\r\n\r\n    async loadPeopleKeys() {\r\n        let responses = await Promise.all([\r\n            this.data.getAllObjects(this.data.UA_PERSON_STATUS),\r\n            this.data.getAllObjects(this.data.UA_PERSON_DEPT),\r\n            this.data.getAllObjects(this.data.UA_PERSON_SPECIAL)\r\n        ]);\r\n        this.personStatusArray = responses[0];\r\n        this.deptArray = responses[1];\r\n        this.specialArray = responses[2];\r\n    }\r\n\r\n    async loadInstitutionKeys() {\r\n        let responses = await Promise.all([\r\n            this.data.getAllObjects(this.data.UA_INST_STATUS),\r\n            this.data.getAllObjects(this.data.UA_INST_TYPES),\r\n            this.data.getAllObjects(this.data.UA_MEMBER_TYPES),\r\n            this.data.getAllObjects(this.data.UA_INST_DEGREES)\r\n        ]);\r\n        this.institutonStatusArray = responses[0];\r\n        this.institutionTypes = responses[1];\r\n        this.memberTypes = responses[2];\r\n        this.highestDegrees = responses[3];\r\n    }\r\n}\r\n"],"names":[],"sourceRoot":""}