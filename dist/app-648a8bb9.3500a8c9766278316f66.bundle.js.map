{"version":3,"file":"app-648a8bb9.3500a8c9766278316f66.bundle.js","mappings":"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;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AArrBA;;AAAA;AAurBA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAMA;;AAjtBA;AAotBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA3tBA;AA8tBA;AACA;;AA/tBA;AAiuBA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA1uBA;AA6uBA;AACA;;AA9uBA;AAgvBA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;;AApwBA;AAuwBA;AACA;;AAxwBA;AA2wBA;AACA;AACA;AACA;;AA9wBA;AAAA;AAgxBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAFA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;;AA7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhxBA;AAAA;AAAA;;AAAA;AAAA;AAk0BA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA10BA;;AAAA;AAAA;AAAA;AAAA;AA40BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAGA;AAHA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA;AANA;AAAA;;AAAA;AAQA;AACA;AACA;;AAVA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;AAcA;;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA50BA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AA81BA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AAv2BA;AA02BA;AACA;AACA;;AA52BA;AA+2BA;AACA;;AAh3BA;AAm3BA;AACA;;AAp3BA;AAu3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA/3BA;AAk4BA;AACA;;AAn4BA;AAAA;;;;;;;;;;;AClBA;AACA;AACA;AACA","sources":["webpack://client/./src/modules/tech/support/viewHelpTickets.js","webpack://client/./src/modules/tech/support/viewHelpTickets.html"],"sourcesContent":["import { inject, TemplatingEngine } from 'aurelia-framework';\r\nimport { Router } from \"aurelia-router\";\r\nimport { DataTable } from '../../../resources/utils/dataTable';\r\nimport { HelpTickets } from '../../../resources/data/helpTickets';\r\nimport { Sessions } from '../../../resources/data/sessions';\r\nimport { Systems } from '../../../resources/data/systems';\r\nimport { Products } from '../../../resources/data/products';\r\nimport { Downloads } from '../../../resources/data/downloads';\r\nimport { AppConfig } from '../../../config/appConfig';\r\nimport { Utils } from '../../../resources/utils/utils';\r\nimport { People } from '../../../resources/data/people';\r\nimport Validation from '../../../resources/utils/validation';\r\nimport { CommonDialogs } from '../../../resources/dialogs/common-dialogs';\r\nimport { ClientRequests } from '../../../resources/data/clientRequests';\r\nimport { DocumentsServices } from '../../../resources/data/documents';\r\n\r\n\r\n@inject(Router, AppConfig, Validation, People, CommonDialogs, DataTable, Utils, HelpTickets, Sessions, Systems, Downloads, Products, TemplatingEngine, ClientRequests, DocumentsServices, ClientRequests)\r\nexport class ViewHelpTickets {\r\n  helpTicketSelected = false;\r\n  enterResponse = false;\r\n  sendMailDisable = false;\r\n  notesHistory = false;\r\n  showRequestPanel = false;\r\n  viewHelpTickets = true;\r\n  showAssignment = false;\r\n  refreshInterval = 10; //minutes\r\n  tableMargin = \"margin-top:0px;\"\r\n\r\n  toolbar;\r\n\r\n  colSpan = 10;\r\n\r\n  spinnerHTML = \"\";\r\n  filterValues = new Array();\r\n  commentShown = \"\";\r\n  responseMessage = \"\";\r\n\r\n  toolbar = [\r\n    ['style', ['style', 'bold', 'italic', 'underline', 'clear']],\r\n    ['color', ['color']],\r\n    ['font', ['strikethrough', 'superscript', 'subscript']],\r\n    ['layout', ['ul', 'ol', 'paragraph']],\r\n    ['insert', ['link', 'table', 'hello']],\r\n    ['misc', ['undo', 'redo', 'fullscreen', 'codeview']]\r\n  ];\r\n\r\n  constructor(router, config, validation, people, dialog, datatable, utils, helpTickets, sessions, systems, apps, products, templatingEngine, requests, documents) {\r\n    this.router = router;\r\n    this.config = config;\r\n    this.validation = validation;\r\n    this.validation.initialize(this);\r\n    this.people = people;\r\n    this.dataTable = datatable;\r\n    this.dataTable.initialize(this);\r\n    this.utils = utils;\r\n    this.helpTickets = helpTickets;\r\n    this.sessions = sessions;\r\n    this.systems = systems;\r\n    this.apps = apps;\r\n    this.products = products;\r\n    this.dialog = dialog;\r\n    this.templatingEngine = templatingEngine;\r\n    this.requests = requests;\r\n    this.documents = documents;\r\n\r\n    this.userObj = JSON.parse(sessionStorage.getItem('user'));\r\n    this.isUCC = this.userObj.userRole >= this.config.UCC_ROLE;\r\n  };\r\n\r\n  /*****************************************************************************************\r\n  * Retrieve the help tickets, sessions, downloads and people\r\n  * Only active help tickets are retrieved\r\n  *****************************************************************************************/\r\n  async activate(params) {\r\n    let responses = await Promise.all([\r\n      this.helpTickets.getHelpTicketTypes('?order=category'),\r\n      this.config.getConfig()\r\n    ]);\r\n\r\n    if (params.HTNumber == -1) {\r\n      await this.showHTList();\r\n    } else {\r\n      this.HTToShow = params.HTNumber;\r\n      this.showHelpTicketImmediately = true;\r\n\r\n    }\r\n  }\r\n\r\n  async showHTList() {\r\n\r\n    this.sessions.getSessionsArray('?order=startDate:DSC');\r\n    this.apps.getDownloadsArray(true, '?filter=helpTicketRelevant|eq|true&order=name');\r\n    this.systems.getSystemsArray();\r\n    this.documents.getDocumentsCategoriesArray();\r\n    this.products.getProductsArray('?fields=_id name');\r\n    this.dataTable.updateArray(this.helpTickets.helpTicketsArray);\r\n    this.sendEmail = this.config.SEND_EMAILS;\r\n    this._setUpValidation();\r\n    this.helpTicketTypes = this.config.HELP_TICKET_STATUSES.filter(item => {\r\n      return item.code !== this.config.CLOSED_HELPTICKET_STATUS;\r\n    })\r\n\r\n    this.helpTicketTypeLookupArray = new Array();\r\n    this.helpTickets.helpTicketTypesArray.forEach(item => {\r\n      item.subtypes.forEach(item2 => {\r\n        this.helpTicketTypeLookupArray.push({ helpTicketType: item2.type, description: item2.description });\r\n      })\r\n    })\r\n\r\n    this.removeHTStatus = [this.config.NEW_HELPTICKET_STATUS, this.config.REPLIED_HELPTICKET_STATUS];\r\n\r\n    if (this.utils.isMobile()) {\r\n      this.mobile = true;\r\n      this.toolbar = [['style', ['style', 'bold', 'clear']]];\r\n    }\r\n    this.initialLoaded = false;\r\n    this.refreshInterval = this.config.HELP_TICKET_REFRESH_INTERVAL;\r\n  }\r\n\r\n  async showHT(HTNumber) {\r\n    this.tableMargin = \"margin-top:0px;\"\r\n    //Make the selected help ticket the selected help ticket\r\n    await this.helpTickets.getHelpTicketByNumber(HTNumber);\r\n    this.oroginalHelpTicket = this.helpTickets.selectedHelpTicket;\r\n    this.openHelpTicket();\r\n    let indices = this.getIndex();\r\n    let subTypeIndex = indices.subTypeIndex;\r\n    let categoryIndex = indices.categoryIndex;\r\n    this.createOutputForm(this.helpTickets.helpTicketTypesArray[categoryIndex].subtypes[subTypeIndex].outputForm);\r\n\r\n    this.viewHelpTicketsHeading = \"Help Ticket \" + this.helpTickets.selectedHelpTicket.helpTicketNo;\r\n    this.helpTicketSelected = true;\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  async attached() {\r\n    this.refresh(false);\r\n    if (!this.mobile) this.toolTips();\r\n    this.initialLoaded = true;\r\n\r\n    setInterval(() => { if (!this.helpTicketSelected) this.refresh(false); }, this.refreshInterval * 60 * 1000);\r\n    $.summernote.dom.emptyPara = \"<div><br/></div>\"\r\n\r\n    if (this.showHelpTicketImmediately) await this.showHT(this.HTToShow);\r\n  }\r\n\r\n  toolTips() {\r\n    $('[data-toggle=\"tooltip\"]').tooltip();\r\n  }\r\n\r\n  sendMailNow() {\r\n    this.helpTickets.sendMail();\r\n  }\r\n\r\n  showComment(helpTicket, el) {\r\n    this.commentShown = helpTicket.content[0].content.comments;\r\n    $(\".hover\").css(\"top\", el.clientY - 100);\r\n    $(\".hover\").css(\"left\", el.clientX + 10);\r\n    $(\".hover\").css(\"display\", \"block\");\r\n  }\r\n\r\n  hideComment() {\r\n    $(\".hover\").css(\"display\", \"none\");\r\n  }\r\n\r\n  showProfile(helpTicket, el) {\r\n    this.profileHelpTicket = helpTicket;\r\n    $(\".hoverProfile\").css(\"top\", el.clientY - 175);\r\n    $(\".hoverProfile\").css(\"left\", el.clientX - 200);\r\n    $(\".hoverProfile\").css(\"display\", \"block\");\r\n  }\r\n\r\n  hideProfile() {\r\n    $(\".hoverProfile\").css(\"display\", \"none\");\r\n  }\r\n\r\n  async viewAssignment(index, request) {\r\n    this.editIndex = index;\r\n    let response = await this.requests.getRequestDetail(request._id);\r\n    if (!response.error) {\r\n      this.selectedRequestDetail = response;\r\n      if (this.selectedRequestDetail.requestId && this.selectedRequestDetail.requestId.courseId === null) this.selectedRequestDetail.requestId.courseId = { _id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME };\r\n      this.products.selectedProductFromId(this.selectedRequestDetail.productId._id);\r\n      if (this.selectedRequestDetail.assignments && this.selectedRequestDetail.assignments.length > 0) this.systems.selectedSystemFromId(this.selectedRequestDetail.assignments[0].systemId);\r\n      this.showAssignment = true;\r\n    }\r\n  }\r\n\r\n  backView() {\r\n    this.showAssignment = false;\r\n  }\r\n\r\n  sendAnEmail(person) {\r\n    if (person) {\r\n      let email = { emailBody: \"\", emailSubject: \"\", person: person };\r\n      return this.dialog.showEmail(\r\n        \"Enter Email\",\r\n        email,\r\n        ['Submit', 'Cancel']\r\n      ).whenClosed(response => {\r\n        if (!response.wasCancelled) {\r\n          this.sendTheEmail(response.output);\r\n        } else {\r\n          console.log(\"Cancelled\");\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  async sendTheEmail(email) {\r\n    if (email) {\r\n      var message = {\r\n        id: email.email.person._id,\r\n        fullName: email.email.person.fullName,\r\n        message: email.email.emailBody,\r\n        email: email.email.person.email,\r\n        subject: email.email.emailSubject,\r\n        audit: {\r\n          property: 'Send Message',\r\n          eventDate: new Date(),\r\n          newValue: email.email.emailBody,\r\n          personId: this.userObj._id\r\n        }\r\n      };\r\n      let serverResponse = await this.people.sendCustomerMessage(message);\r\n      if (!serverResponse.error) {\r\n        this.utils.showNotification(\"The message was sent\");\r\n        this.hideProfile();\r\n      }\r\n    }\r\n  }\r\n\r\n  confidentialChecked() {\r\n    if (document.getElementById('confidentialCheckBox').checked) {\r\n      this.sendMailDisable = true;\r\n      this.sendEmail = false;\r\n    } else {\r\n      this.sendMailDisable = false;\r\n      this.sendEmail = true;\r\n    }\r\n  }\r\n\r\n  /*****************************************************************************************\r\n  * Refresh the helpticket collection\r\n  *****************************************************************************************/\r\n  async refresh(clickRefresh) {\r\n    if (!clickRefresh) $(\"#loading\").show();\r\n    await this.helpTickets.getHelpTicketArray(\"?filter=helpTicketStatus|lt|\" + this.config.CLOSED_HELPTICKET_STATUS + \"&order=createdDate:DSC\", true),\r\n      this.dataTable.updateArray(this.helpTickets.helpTicketsArray);\r\n    this.helpTickets.calcHelpTicketAges();\r\n    $(\"#loading\").hide();\r\n    this._cleanUpFilters()\r\n  }\r\n\r\n\r\n  /*****************************************************************************************\r\n  * User selected a help ticket\r\n  * el - event object\r\n  * index - index of selected help ticket\r\n  *****************************************************************************************/\r\n  async selectHelpTicket(el, index, helpTicket) {\r\n    this.tableMargin = \"margin-top:0px;\"\r\n    //Make the selected help ticket the selected help ticket\r\n    this.editIndex = this.dataTable.getOriginalIndex(index);\r\n    await this.helpTickets.getHelpTicket(helpTicket._id);\r\n    this.proceedWithSelect(el);\r\n  }\r\n\r\n  proceedWithSelect(el) {\r\n    this.oroginalHelpTicket = this.helpTickets.selectedHelpTicket;\r\n    this.openHelpTicket();\r\n    let indices = this.getIndex();\r\n    let subTypeIndex = indices.subTypeIndex;\r\n    let categoryIndex = indices.categoryIndex;\r\n    this.createOutputForm(this.helpTickets.helpTicketTypesArray[categoryIndex].subtypes[subTypeIndex].outputForm);\r\n\r\n    if (this.selectedRow) this.selectedRow.children().removeClass('info');\r\n    this.selectedRow = $(el.target).closest('tr');\r\n    this.selectedRow.children().addClass('info');\r\n\r\n    this.viewHelpTicketsHeading = \"Help Ticket \" + this.helpTickets.selectedHelpTicket.helpTicketNo;\r\n    this.helpTicketSelected = true;\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  getCategoryIndex() {\r\n    for (var i = 0; i < this.helpTickets.helpTicketTypesArray.length; i++) {\r\n      if (this.helpTickets.helpTicketTypesArray[i] == this.helpTickets.selectedHelpTicket.helpTicketCategory) {\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n\r\n  getIndex() {\r\n    for (var j = 0; j < this.helpTickets.helpTicketTypesArray.length; j++) {\r\n      for (var i = 0; i < this.helpTickets.helpTicketTypesArray[j].subtypes.length; i++) {\r\n        if (this.helpTickets.helpTicketTypesArray[j].subtypes[i].type === this.helpTickets.selectedHelpTicket.content[0].type ||\r\n          (this.helpTickets.helpTicketTypesArray[j].subtypes[i].type === 'OTHER_OTHER' && this.helpTickets.selectedHelpTicket.content[0].type === 'OTHER')) {\r\n          return { subTypeIndex: i, categoryIndex: j };\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createOutputForm(html) {\r\n    let el = document.getElementById('container');\r\n    el.innerHTML = html;\r\n\r\n    if (el) {\r\n      if (!el.querySelectorAll('.au-target').length) {\r\n        this.templatingEngine.enhance({ element: el, bindingContext: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  async openHelpTicket() {\r\n    if (this.helpTickets.selectedHelpTicket._id.length) {\r\n      await this.getDetails();\r\n    } else {\r\n      this.utils.showNotification('Help Ticket not found')\r\n    }\r\n\r\n  }\r\n\r\n  async getDetails() {\r\n    this.showRequestDetails = false;\r\n    if (this.helpTickets.selectedHelpTicket.requestId) {\r\n      if (this.helpTickets.selectedHelpTicket.requestId.assignments && this.helpTickets.selectedHelpTicket.requestId.assignments.length > 0) this.showRequestDetails = true;\r\n      this.showCourse = false;\r\n      this.course = \"\";\r\n      this.showCourse = true;\r\n      if (this.helpTickets.selectedHelpTicket.courseId) {\r\n        this.course = this.helpTickets.selectedHelpTicket.courseId.number + \" - \" + this.helpTickets.selectedHelpTicket.courseId.name;\r\n      } else {\r\n        this.course = this.config.SANDBOX_NAME\r\n      }\r\n    }\r\n  }\r\n\r\n  async save(changes) {\r\n    changes = changes ? changes : this.helpTickets.isHelpTicketDirty(this.oroginalHelpTicket, [\"requestId\", \"courseId\", \"personId\", \"institutionId\"]);\r\n    if (changes && changes.length > 0) {\r\n      changes.forEach(item => {\r\n        this.helpTickets.selectedHelpTicket.audit.push({\r\n          property: item.property,\r\n          oldValue: item.oldValue,\r\n          newValue: item.newValue,\r\n          eventDate: new Date(),\r\n          personId: this.userObj._id\r\n        })\r\n      })\r\n    }\r\n    if (this.helpTickets.selectedHelpTicket.helpTicketStatus == this.config.CLOSED_HELPTICKET_STATUS) {\r\n      this.helpTickets.selectHelpTicketContent();\r\n      this.responseMessage = \"Help Ticket closed by \" + this.userObj.fullName\r\n      this._createResponse();\r\n      let serverResponse = await this.helpTickets.closeHelpTicket();\r\n      if (!serverResponse.error) {\r\n        // this.dataTable.updateArray(this.helpTickets.helpTicketsArray);\r\n        this.dataTable.updateArrayMaintainFilters(this.helpTickets.helpTicketsArray);\r\n        this.reSort();\r\n        this.utils.showNotification(\"The help ticket was updated\");\r\n      }\r\n    } else {\r\n      let serverResponse = await this.helpTickets.saveHelpTicket();\r\n      if (!serverResponse.error) {\r\n        this.dataTable.updateArrayMaintainFilters(this.helpTickets.helpTicketsArray);\r\n        this.reSort();\r\n        // this.dataTable.updateArray(this.helpTickets.helpTicketsArray);\r\n        this.utils.showNotification(\"The help ticket was updated\");\r\n      }\r\n    }\r\n\r\n    // var email = new Object();\r\n    // let serverResponse = await this.helpTickets.saveHelpTicket(email);\r\n    // if (!serverResponse.error) {\r\n    //   // if (serverResponse.helpTicketStatus == this.config.CLOSED_HELPTICKET_STATUS) await this.refresh(false);\r\n    //   this.dataTable.updateArray(this.helpTickets.helpTicketsArray);\r\n    //   this.utils.showNotification(\"The help ticket was updated\");\r\n    // }\r\n    this._cleanUp();\r\n  }\r\n\r\n  getStatusDescription(status) {\r\n    for (let i = 0; i < this.config.HELP_TICKET_STATUSES.length; i++) {\r\n      if (status == this.config.HELP_TICKET_STATUSES[i].code) {\r\n        return this.config.HELP_TICKET_STATUSES[i].description;\r\n      }\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  /*****************************************************************************************\r\n  * Open the response form and create an empty help ticket content object\r\n  *****************************************************************************************/\r\n  async respond() {\r\n    if (!this.enterResponse) {\r\n      let owner = await this.helpTickets.getOwner(this.helpTickets.selectedHelpTicket._id);\r\n      if (this.helpTickets.selectedHelpTicket.owner[0].personId == null) {\r\n        await this.noOwnerRespond();\r\n      } else if (owner.owner[0].personId._id != this.userObj._id) {\r\n        await this.dontOwnItRespond(owner);\r\n      } else {\r\n        this.proceedWithResponse();\r\n      }\r\n    }\r\n  }\r\n\r\n  async noOwnerRespond() {\r\n    this.dialog.showMessage(\r\n      \"Please take ownership of this help ticket before responding. Press OK to take ownership or Cancel to return to the list.\",\r\n      \"Continue\",\r\n      ['OK', 'Cancel']\r\n    ).whenClosed(response => {\r\n      if (!response.wasCancelled) {\r\n        this.ownAndRespond()\r\n      } else {\r\n        this.back();\r\n      }\r\n    });\r\n  }\r\n\r\n  async ownAndRespond() {\r\n    var obj = { status: this.config.REVIEW_HELPTICKET_STATUS, personId: this.userObj._id };\r\n    let serverResponse = await this.helpTickets.updateOwner(obj);\r\n    this.proceedWithResponse();\r\n  }\r\n\r\n  async dontOwnItRespond(owner) {\r\n    this.dialog.showMessage(\r\n      \"This help ticket is owned by \" + owner.owner[0].personId.firstName + \" \" + owner.owner[0].personId.lastName + \".  If you continue your response may conflict with their efforts.\",\r\n      \"Continue\",\r\n      ['Proceed', 'Cancel']\r\n    ).whenClosed(response => {\r\n      if (!response.wasCancelled) {\r\n        this.proceedWithResponse();\r\n      }\r\n    });\r\n  }\r\n\r\n  proceedWithResponse() {\r\n    this.sendMailDisable = false;\r\n    // this.responseMessage = \"<p></p>\";\r\n    this.responseMessage = \"\";\r\n    this.helpTickets.selectHelpTicketContent();\r\n    this.enterResponse = true;\r\n    this.enableButton = true;\r\n    window.scrollTo(0, 0);\r\n    setTimeout(() => { $(\".note-editable\").focus().scroll(); }, 500);\r\n  }\r\n\r\n  cancelResponse() {\r\n    this.response = new Object();\r\n    this.isUnchanged = true;\r\n    this.enterResponse = false;\r\n  }\r\n\r\n  /*****************************************************************************************\r\n  * Create the response object\r\n  *****************************************************************************************/\r\n  _createResponse() {\r\n    this.helpTickets.selectedHelpTicketContent.personId = this.userObj._id;\r\n    this.helpTickets.selectedHelpTicketContent.type = this.config.HELP_TICKET_OTHER_TYPE;\r\n    this.helpTickets.selectedHelpTicketContent.emailSent = this.sendEmail;\r\n    this.helpTickets.selectedHelpTicketContent.content.comments = this.responseMessage;\r\n    this.helpTickets.selectedHelpTicketContent.displayForm = this.config.HELP_TICKET_OTHER_TYPE;\r\n  }\r\n\r\n  /*****************************************************************************************\r\n  * Save the response\r\n  *****************************************************************************************/\r\n  async saveResponse(status) {\r\n    if (status === this.config.CLOSED_HELPTICKET_STATUS) {\r\n      this.dialog.showMessage(\r\n        \"Are you sure you want to close this help ticket\",\r\n        \"Save Changes\",\r\n        ['Yes', 'No']\r\n      ).whenClosed(response => {\r\n        if (!response.wasCancelled) {\r\n          this.saveAndCLoseIt(status);\r\n        }\r\n      });\r\n    } else {\r\n      this.saveIt(status);\r\n    }\r\n\r\n  }\r\n\r\n  async saveAndCLoseIt(status) {\r\n    this.helpTickets.selectedHelpTicket.helpTicketStatus = status;\r\n    var helpTicket = this.helpTickets.selectedHelpTicket._id;\r\n    this._createResponse();\r\n    var email = new Object();\r\n    if (this.sendEmail) {\r\n      if (status == this.config.CUSTOMER_ACTION_HELPTICKET_STATUS) {\r\n        email.MESSAGE = this.config.HELP_TICKET_UPDATED_MESSAGE_CA.replace('[[No]]', this.helpTickets.selectedHelpTicket.helpTicketNo);\r\n        email.subject = this.config.HELP_TICKET_UPDATED_SUBJECT_CA.replace('[[No]]', this.helpTickets.selectedHelpTicket.helpTicketNo);\r\n      } else if (status == this.config.CLOSED_HELPTICKET_STATUS) {\r\n        email.MESSAGE = this.config.HELP_TICKET_UPDATE_CLOSED_MESSAGE_C.replace('[[No]]', this.helpTickets.selectedHelpTicket.helpTicketNo);;\r\n        email.subject = this.config.HELP_TICKET_UPDATE_CLOSED_SUBJECT_C.replace('[[No]]', this.helpTickets.selectedHelpTicket.helpTicketNo);\r\n      } else {\r\n        email.MESSAGE = this.config.HELP_TICKET_UPDATE_MESSAGE_R.replace('[[No]]', this.helpTickets.selectedHelpTicket.helpTicketNo);;\r\n        email.subject = this.config.HELP_TICKET_UPDATE_SUBJECT_R.replace('[[No]]', this.helpTickets.selectedHelpTicket.helpTicketNo);\r\n      }\r\n      email.INSTRUCTIONS = this.config.HELP_TICKET_INSTRUCTIONS;\r\n\r\n      email.email = this.helpTickets.selectedHelpTicket.personId.email;\r\n      email.cc = this.config.HELP_TICKET_EMAIL_LIST ? this.config.HELP_TICKET_EMAIL_LIST : \"\";\r\n    }\r\n\r\n    let serverResponse = await this.helpTickets.saveHelpTicketResponseAndCLose(email);\r\n\r\n    if (!serverResponse.error) {\r\n      await this.refresh(false);\r\n      this.utils.showNotification(\"The help ticket was updated\");\r\n      if (this.filesToUpload && this.filesToUpload.length > 0) this.helpTickets.uploadFileArchive(this.filesToUpload, this.helpTickets.selectedHelpTicket._id);\r\n    }\r\n    this._cleanUp();\r\n  }\r\n\r\n  async saveIt(status) {\r\n    this.helpTickets.selectedHelpTicket.helpTicketStatus = status;\r\n    var helpTicket = this.helpTickets.selectedHelpTicket;\r\n    this._createResponse();\r\n    var email = new Object();\r\n    if (this.sendEmail) {\r\n      if (status == this.config.CUSTOMER_ACTION_HELPTICKET_STATUS) {\r\n        email.MESSAGE = this.config.HELP_TICKET_UPDATED_MESSAGE_CA.replace('[[No]]', this.helpTickets.selectedHelpTicket.helpTicketNo);\r\n        email.subject = this.config.HELP_TICKET_UPDATED_SUBJECT_CA.replace('[[No]]', this.helpTickets.selectedHelpTicket.helpTicketNo);\r\n      } else if (status == this.config.CLOSED_HELPTICKET_STATUS) {\r\n        email.MESSAGE = this.config.HELP_TICKET_UPDATE_CLOSED_MESSAGE_C.replace('[[No]]', this.helpTickets.selectedHelpTicket.helpTicketNo);;\r\n        email.subject = this.config.HELP_TICKET_UPDATE_CLOSED_SUBJECT_C.replace('[[No]]', this.helpTickets.selectedHelpTicket.helpTicketNo);\r\n      } else {\r\n        email.MESSAGE = this.config.HELP_TICKET_UPDATE_MESSAGE_R.replace('[[No]]', this.helpTickets.selectedHelpTicket.helpTicketNo);;\r\n        email.subject = this.config.HELP_TICKET_UPDATE_SUBJECT_R.replace('[[No]]', this.helpTickets.selectedHelpTicket.helpTicketNo);\r\n      }\r\n      email.INSTRUCTIONS = this.config.HELP_TICKET_INSTRUCTIONS;\r\n\r\n      email.email = this.helpTickets.selectedHelpTicket.personId.email;\r\n      email.cc = this.config.HELP_TICKET_EMAIL_LIST ? this.config.HELP_TICKET_EMAIL_LIST : \"\";\r\n    }\r\n\r\n    let serverResponse = await this.helpTickets.saveHelpTicketResponse(email);\r\n\r\n    if (!serverResponse.error) {\r\n      if (status == this.config.CLOSED_HELPTICKET_STATUS) {\r\n        await this.refresh(false);\r\n      } else {\r\n        this.dataTable.updateArrayMaintainFilters(this.helpTickets.helpTicketsArray);\r\n        this.reSort();\r\n      }\r\n      this.utils.showNotification(\"The help ticket was updated\");\r\n      if (this.filesToUpload && this.filesToUpload.length > 0) this.helpTickets.uploadFile(this.filesToUpload, this.helpTickets.selectedHelpTicket._id);\r\n    }\r\n    this._cleanUp();\r\n  }\r\n\r\n  async ownHelpTicket(helpTicket) {\r\n    if (helpTicket) {\r\n      this.helpTickets.selectHelpTicketByID(helpTicket._id);\r\n    }\r\n    if(this.helpTickets.selectedHelpTicket.owner[0].personId == this.userObj._id) return;\r\n    if (this.helpTickets.selectedHelpTicket.owner[0].personId !== this.userObj._id && this.helpTickets.selectedHelpTicket.owner[0].personId != null) {\r\n      this.dialog.showMessage(\r\n        \"Are you sure you want to change ownership of this help ticket\",\r\n        \"Save Changes\",\r\n        ['Yes', 'No']\r\n      ).whenClosed(response => {\r\n        if (!response.wasCancelled) {\r\n          this.ownIt();\r\n        }\r\n      });\r\n    } else {\r\n      this.ownIt();\r\n    }\r\n  }\r\n\r\n  async ownIt() {\r\n    if (this.helpTickets.selectedHelpTicket.owner[0].personId === null) {\r\n      var obj = { status: this.config.REVIEW_HELPTICKET_STATUS, personId: this.userObj._id };\r\n    } else {\r\n      if (this.helpTickets.selectedHelpTicket.owner[0].personId._id != this.userObj._id) {\r\n        var obj = { status: this.config.REVIEW_HELPTICKET_STATUS, personId: this.userObj._id };\r\n      } else {\r\n        var obj = { status: this.config.NEW_HELPTICKET_STATUS, personId: \"b1b1b1b1b1b1b1b1b1b1b1b1\" }\r\n      }\r\n    }\r\n    let serverResponse = await this.helpTickets.updateOwner(obj);\r\n    if (!serverResponse.error) {\r\n      this.dataTable.updateArrayMaintainFilters(this.helpTickets.helpTicketsArray);\r\n      this.reSort();\r\n      // this.dataTable.updateArray(this.helpTickets.helpTicketsArray);\r\n      this.utils.showNotification(\"The help ticket was updated\");\r\n    }\r\n    if (this.helpTickets.selectedHelpTicket) {\r\n      this._cleanUp();\r\n    }\r\n  }\r\n\r\n  async changeStatus(helpTicket, status) {\r\n    if (status == this.config.MY_HELPTICKET_STATUS && this.userObj._id != helpTicket.owner[0].personId._id) {\r\n      this.utils.showNotification('You must own this ticket before you can make it yours');\r\n      return;\r\n    }\r\n    this.helpTickets.selectHelpTicketByID(helpTicket._id);\r\n    var obj = {\r\n      property: \"helpTicketStatus\",\r\n      oldValue: this.helpTickets.selectedHelpTicket.helpTicketStatus,\r\n      newValue: status,\r\n      personId: this.userObj._id,\r\n      date: new Date\r\n    }\r\n    this.helpTickets.selectedHelpTicket.audit.push(obj);\r\n    if (status == this.config.MY_HELPTICKET_STATUS) {\r\n      this.helpTickets.selectedHelpTicket.helpTicketStatus = this.helpTickets.selectedHelpTicket.helpTicketStatus.toString() + status;\r\n    } else {\r\n      this.helpTickets.selectedHelpTicket.helpTicketStatus = status;\r\n    }\r\n\r\n    if (status == this.config.CLOSED_HELPTICKET_STATUS) {\r\n      this.helpTickets.selectHelpTicketContent();\r\n      this.responseMessage = \"Help Ticket closed by \" + this.userObj.fullName\r\n      this._createResponse();\r\n      let serverResponse = await this.helpTickets.closeHelpTicket();\r\n      if (!serverResponse.error) {\r\n        this.dataTable.updateArrayMaintainFilters(this.helpTickets.helpTicketsArray);\r\n        this.reSort();\r\n        // this.dataTable.updateArray(this.helpTickets.helpTicketsArray);\r\n        this.utils.showNotification(\"The help ticket was updated\");\r\n      }\r\n    } else {\r\n      let serverResponse = await this.helpTickets.saveHelpTicket();\r\n      if (!serverResponse.error) {\r\n        this.dataTable.updateArrayMaintainFilters(this.helpTickets.helpTicketsArray);\r\n        this.reSort();\r\n        // this.dataTable.updateArray(this.helpTickets.helpTicketsArray);\r\n        this.utils.showNotification(\"The help ticket was updated\");\r\n      }\r\n    }\r\n    this._cleanUp();\r\n  }\r\n\r\n  _cleanUp() {\r\n    if (this.showHelpTicketImmediately) {\r\n      this.showHelpTicketImmediately = false;\r\n      this.router.navigateToRoute('techHt', { HTNumber: -1 });\r\n    } else {\r\n      this.enterResponse = false;\r\n      this.filesToUpload = new Array();\r\n      this.files = new Array();\r\n      this.filesSelected = \"\";\r\n      $('input[type=file]').wrap('<form></form>').parent().trigger('reset').children().unwrap();\r\n      this.helpTicketSelected = false;\r\n      this.showRequestPanel = false;\r\n    }\r\n  }\r\n\r\n  flag() {\r\n    var note = { noteBody: \"\", noteCategories: this.userObj.noteCategories, selectedCategory: 0 };\r\n    return this.dialog.showNote(\r\n      \"Save Changes\",\r\n      note,\r\n      ['Submit', 'Cancel']\r\n    ).whenClosed(response => {\r\n      if (!response.wasCancelled) {\r\n        this.saveNote(response.output);\r\n      } else {\r\n        console.log(\"Cancelled\");\r\n      }\r\n    });\r\n  }\r\n\r\n  async saveNote(note) {\r\n    this.people.selectNote();\r\n    this.people.selectedNote.type = \"h\";\r\n    this.people.selectedNote.personId = this.userObj._id;\r\n    this.people.selectedNote.category = this.userObj.noteCategories[note.selectedCategory];\r\n    this.people.selectedNote.note = note.note.noteBody;\r\n    this.people.selectedNote.reference = this.helpTickets.selectedHelpTicket._id;\r\n    this.people.selectedNote.referenceNo = this.helpTickets.selectedHelpTicket.helpTicketNo;\r\n    let response = await this.people.saveNote();\r\n    if (!response.error) {\r\n      this.utils.showNotification('The note was saved');\r\n    }\r\n  }\r\n\r\n  back() {\r\n    this.helpTicketSelected = false;\r\n    var changes = this.helpTickets.isHelpTicketDirty(this.oroginalHelpTicket, [\"requestId\", \"courseId\", \"personId\", \"institutionId\"]);\r\n    if (changes.length) {\r\n      let that = this;\r\n      this.message = \"The help ticket has been changed. Do you want to save your changes?\"\r\n      return this.dialog.showMessage(\r\n        that.message,\r\n        \"Save Changes\",\r\n        ['Yes', 'No']\r\n      ).whenClosed(response => {\r\n        if (!response.wasCancelled) {\r\n          this.save(changes);\r\n        } else {\r\n          this._cleanUp();\r\n        }\r\n      });\r\n    } else {\r\n      this._cleanUp();\r\n    }\r\n  }\r\n\r\n  /*****************************************************************************************\r\n  * Setup validation rules for each help ticket type\r\n  *****************************************************************************************/\r\n  _setUpValidation() {\r\n    this.validation.addRule(\"00\", \"curriculumTitle\", [{ \"rule\": \"required\", \"message\": \"Curriculum Title is required\" }]);\r\n    this.validation.addRule(\"00\", \"client\", [{\r\n      \"rule\": \"custom\", \"message\": \"You must select a client\",\r\n      \"valFunction\": function (context) {\r\n        return (context.helpTicket.clientId !== undefined);\r\n      }\r\n    }]);\r\n    this.validation.addRule(\"01\", \"resetPasswordUserIDs\", [{ \"rule\": \"required\", \"message\": \"You must enter the passwords to reset\" }]);\r\n    this.validation.addRule(\"01\", \"client\", [{\r\n      \"rule\": \"custom\", \"message\": \"You must enter the passwords to reset\",\r\n      \"valFunction\": function (context) {\r\n        return (context.helpTicket.clientId !== undefined);\r\n      }\r\n    }]);\r\n    this.validation.addRule(\"02\", \"application\", [{\r\n      \"rule\": \"custom\", \"message\": \"You must select the application\",\r\n      \"valFunction\": function (context) {\r\n        return (context.content.application !== undefined);\r\n      }\r\n    }]);\r\n    this.validation.addRule(\"9\", \"owner\", [{\r\n      \"rule\": \"custom\", \"message\": \"You are already the owner\",\r\n      \"valFunction\": function (context) {\r\n        return (context.helpTickets.selectedHelpTicket.owner[0].personId !== context.userObj._id);\r\n      }\r\n    }]);\r\n  }\r\n\r\n  _cleanUpFilters() {\r\n    this.helpTicketNoFilterValue = \"\";\r\n    this.helpTicketTypeFilterValue = \"\";\r\n    this.ownerFilterValue = \"\";\r\n    this.helpTicketStatusFilter = \"\";\r\n    this.personFilterValue = \"\";\r\n    this.institutionFilterValue = \"\";\r\n    this.dataTable.updateArray(this.helpTickets.helpTicketsArray);\r\n  }\r\n\r\n  checkSendMail() {\r\n    this.sendMail = !this.sendMail;\r\n  }\r\n\r\n  changeFiles() {\r\n    this.filesToUpload = this.filesToUpload ? this.filesToUpload : new Array();\r\n    for (var i = 0; i < this.files.length; i++) {\r\n      let addFile = true;\r\n      this.filesToUpload.forEach(item => {\r\n        if (item.name === this.files[i].name) addFile = false;\r\n      })\r\n      if (addFile) this.filesToUpload.push(this.files[i]);\r\n    }\r\n  }\r\n\r\n  removeFile(index) {\r\n    this.filesToUpload.splice(index, 1);\r\n  }\r\n\r\n  insertDocument() {\r\n    var document = { documentURL: \"\", documentCats: this.documents.docCatsArray, documents: new Array(), selectedCategory: 0 };\r\n    return this.dialog.showDocument(\r\n      \"Select Document\",\r\n      document,\r\n      ['Submit', 'Cancel']\r\n    ).whenClosed(response => {\r\n      if (!response.wasCancelled) {\r\n        this.helpTickets.selectedHelpTicketContent.documents = this.helpTickets.selectedHelpTicketContent.documents ? this.helpTickets.selectedHelpTicketContent.documents : new Array();\r\n        response.output.documents.documents.forEach(item => {\r\n          this.helpTickets.selectedHelpTicketContent.documents.push({\r\n            categoryCode: item.categoryCode,\r\n            categoryName: item.categoryName,\r\n            fileName: item.fileName,\r\n          });\r\n        })\r\n      } else {\r\n        console.log(\"Cancelled\");\r\n      }\r\n    });\r\n  }\r\n\r\n  removeDocument(index) {\r\n    this.helpTickets.selectedHelpTicketContent.documents.splice(index, 1);\r\n  }\r\n\r\n  showRequestsPanel() {\r\n    this.showRequestPanel = !this.showRequestPanel;\r\n    this.getRequests();\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  async getRequests() {\r\n    if (this.selectedSession) {\r\n      this.sessions.selectSessionById(this.selectedSession);\r\n      await this.requests.getActiveClientRequestsArray(this.helpTickets.selectedHelpTicket.personId.id, this.selectedSession);\r\n      await this.people.getCoursesArray(true, '?filter=personId|eq|' + this.helpTickets.selectedHelpTicket.personId.id + '&order=number')\r\n      this.originalClientRequestsArray = new Array();\r\n      this.clientRequestsArray = new Array();\r\n      //Cycle through request array\r\n      this.requests.requestsArray.forEach(item => {\r\n        //Cycle through details of request\r\n        item.requestDetails.forEach(item2 => {\r\n          //If there are assignments\r\n          if (item2.assignments && item2.assignments.length > 0) {\r\n            //Cycle through the assignments\r\n            item2.assignments.forEach((assign) => {\r\n              this.originalClientRequestsArray.push({\r\n                productId: item2.productId._id,\r\n                sessionId: item.sessionId,\r\n                requestStatus: item2.requestStatus,\r\n                systemId: assign.systemId,\r\n                courseName: item.courseId ? item.courseId.name : 'Trial Client',\r\n                productName: item2.productId.name,\r\n                client: assign.client,\r\n                clientId: assign.clientId,\r\n                studentIds: assign.studentUserIds,\r\n                studentPassword: assign.studentPassword,\r\n                facultyIds: assign.facultyUserIds,\r\n                facultyPassword: assign.facultyPassword,\r\n                _id: item2._id\r\n              })\r\n            })\r\n          } else {\r\n            this.originalClientRequestsArray.push({\r\n              productId: item2.productId._id,\r\n              productName: item2.productId.name,\r\n              sessionId: item.sessionId,\r\n              requestStatus: item2.requestStatus,\r\n              courseName: item.courseId ? item.courseId.name : 'Trial Client',\r\n              _id: item2._id\r\n            })\r\n          }\r\n        })\r\n      });\r\n      this.originalClientRequestsArray.forEach(item => {\r\n        this.clientRequestsArray.push(item);\r\n      })\r\n    }\r\n  }\r\n\r\n  // showProfile(request, el) {\r\n  //   this.profileRequest = request;\r\n  //   $(\".hoverProfile\").css(\"top\", window.pageYOffset + el.clientY - 175);\r\n  //   $(\".hoverProfile\").css(\"left\", el.clientX + 100);\r\n  //   $(\".hoverProfile\").css(\"display\", \"block\");\r\n  // }\r\n\r\n  // hideProfile() {\r\n  //   $(\".hoverProfile\").css(\"display\", \"none\");\r\n  // }\r\n\r\n  async customHelpTicketStatusFilter() {\r\n    if (this.helpTicketStatusFilter > this.config.CLOSED_HELPTICKET_STATUS) {\r\n      await this.helpTickets.getMyHelpTickets(this.userObj._id);\r\n      this.dataTable.updateArray(this.helpTickets.helpTicketsArray);\r\n    } else {\r\n      if (this.oldHelpTicketStatus == this.config.MY_HELPTICKET_STATUS) {\r\n        $(\"#loading\").show();\r\n        await this.helpTickets.getHelpTicketArray(\"?filter=helpTicketStatus|lt|\" + this.config.CLOSED_HELPTICKET_STATUS + \"&order=createdDate:DSC\", true),\r\n          this.dataTable.updateArray(this.helpTickets.helpTicketsArray);\r\n        this.helpTickets.calcHelpTicketAges();\r\n        $(\"#loading\").hide();\r\n      }\r\n      this.dataTable.filterList({ target: { value: this.helpTicketStatusFilter } }, { type: 'value', filter: 'helpTicketStatusFilter', collectionProperty: 'helpTicketStatus', displayProperty: 'helpTicketStatus', compare: 'match' })\r\n    }\r\n    this.oldHelpTicketStatus = this.helpTicketStatusFilter;\r\n  }\r\n\r\n  customHelpTicketTypeFilter(value, item, context) {\r\n    var foo = value.toUpperCase();\r\n    for (let i = 0; i < context.helpTickets.helpTicketTypesArray.length; i++) {\r\n      for (let j = 0; j < context.helpTickets.helpTicketTypesArray[i].subtypes.length; j++) {\r\n        if (context.helpTickets.helpTicketTypesArray[i].subtypes[j].type == item.helpTicketType) {\r\n          return context.helpTickets.helpTicketTypesArray[i].subtypes[j].description.toUpperCase().indexOf(foo) > -1;\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  customOwnerFilter(value, item, context) {\r\n    if (item.owner[0].personId === null) return false;\r\n    return item.owner[0].personId.fullName.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n  }\r\n\r\n  customNameFilter(value, item, context) {\r\n    return item.personId.fullName.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n  }\r\n\r\n  institutionCustomFilter(value, item, context) {\r\n    return item.institutionId.name.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n  }\r\n\r\n  customOwnerSorter(sortProperty, sortDirection, sortArray, context) {\r\n    context.sortDirection = context.sortDirection === null ? 1 : context.sortDirection === 1 ? -1 : 1;\r\n    return sortArray.sort((a, b) => {\r\n      if (a.owner[0].personId === null && b.owner[0].personId === null) return 0;\r\n      if (a.owner[0].personId === null && b.owner[0].personId !== null) return context.sortDirection * -1;\r\n      if (a.owner[0].personId !== null && b.owner[0].personId === null) return context.sortDirection;\r\n      var result = (a.owner[0].personId.lastName < b.owner[0].personId.lastName) ? -1 : (a.owner[0].personId.lastName > b.owner[0].personId.lastName) ? 1 : 0;\r\n      return result * context.sortDirection;\r\n    })\r\n  }\r\n\r\n  reSort() {\r\n    this.dataTable.sortArray({}, {}, true);\r\n  }\r\n}\r\n","// Module\nvar code = \"<template>\\r\\n    <span id=\\\"loading\\\">\\r\\n        <ul class=\\\"bokeh\\\">\\r\\n            <li></li>\\r\\n            <li></li>\\r\\n            <li></li>\\r\\n        </ul>\\r\\n    </span>\\r\\n    <div>\\r\\n        <compose  view=\\\"./components/viewHTTable.html\\\"></compose>\\r\\n    </div>\\r\\n\\r\\n    <div show.bind=\\\"helpTicketSelected && !showAssignment\\\" class=\\\"col-lg-12\\\">\\r\\n        <compose view=\\\"./components/viewHTForm.html\\\"></compose>\\r\\n    </div>\\r\\n\\r\\n    <div show.bind=\\\"helpTicketSelected && showAssignment\\\" class=\\\"col-lg-12\\\">\\r\\n        <compose view=\\\"./components/viewAssignmentForm.html\\\"></compose>\\r\\n    </div>\\r\\n</template>\";\n// Exports\nexport default code;"],"names":[],"sourceRoot":""}