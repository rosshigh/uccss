{"version":3,"file":"app-f524a2c8.3500a8c9766278316f66.bundle.js","mappings":"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A;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAnNA;AAsNA;AACA;AACA;AACA;AACA;;AACA;AACA;;AA5NA;AA+NA;AACA;AACA;AACA;AACA;;AAnOA;AAsOA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnPA;AAsPA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnQA;AAsQA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnRA;AAsRA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnSA;AAsSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AApTA;AAuTA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA/TA;;AAAA;AAiUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AArVA;AAAA;AAuVA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;;AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvVA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAoWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AAHA;AAAA;AAAA;;AAAA;AAKA;;AACA;AACA;AACA;;AARA;AAAA;;AAAA;AAAA;AAAA;AAUA;AACA;;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApWA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAoXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAFA;AAAA;;AAAA;AAGA;;AACA;AACA;AACA;AACA;;AAPA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApXA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAiYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5YA;AA+YA;AACA;AACA;AACA;AACA;;AAnZA;AAAA;AAqZA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAMA;;AACA;AACA;AACA;AACA;AACA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAcA;;AACA;AACA;AACA;AACA;AACA;AACA;;AApBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArZA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AA8aA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9aA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA0bA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AAHA;AAAA;AAAA;;AAAA;AAKA;;AACA;AACA;AACA;;AARA;AAAA;;AAAA;AAAA;AAAA;AAUA;AACA;;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1bA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AA0cA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAFA;AAAA;;AAAA;AAGA;;AACA;AACA;AACA;AACA;;AAPA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1cA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAudA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAleA;AAoeA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA3eA;AA8eA;AACA;AACA;AACA;;AAjfA;AAAA;AAmfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AADA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnfA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AA4fA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAMA;;AACA;AACA;AACA;AACA;AACA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAcA;;AACA;AACA;AACA;AACA;AACA;AACA;;AApBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5fA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAqhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArhBA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA","sources":["webpack://client/./src/resources/data/people.js","webpack://client/./src/resources/data/products.js","webpack://client/./src/resources/data/sessionData.js","webpack://client/./src/resources/data/sessions.js","webpack://client/./src/resources/data/siteInfo.js","webpack://client/./src/resources/data/systems.js"],"sourcesContent":["import { inject } from 'aurelia-framework';\r\nimport { DataServices } from './dataServices';\r\nimport { Utils } from '../utils/utils';\r\n\r\n@inject(DataServices, Utils)\r\nexport class People {\r\n  newObject = false;\r\n  cleanObject = true;\r\n  peopleArray = undefined;\r\n\r\n  UCC_STAFF_SERVICE = 'uccStaff';\r\n  PEOPLE_SERVICE = \"people\";\r\n  PERSON_REGISTER = \"people/register\"\r\n  CHECK_EMAIL = 'people/checkEmail';\r\n  CHECK_NAME = 'people/checkName';\r\n  SEND_MAIL = 'people/sendMail';\r\n  PASSWORD_RESET = 'passwordReset';\r\n  NOTES_SERVICE = \"notes\";\r\n  TECHNOTES_SERVICE = \"techNotes\";\r\n  TECHNOTESCAT_SERVICE = \"technotecats\";\r\n  INSTITUTION_SERVICES = \"institutions\";\r\n  COURSES_SERVICE = 'courses';\r\n  PEOPLE_UPLOAD_SERVICE = '/people/upload/';\r\n  NOTIFICATION_SERVICE = 'notifications';\r\n  PACKAGES_SERVICES = 'apj/packages';\r\n\r\n  constructor(data, utils) {\r\n    this.data = data;\r\n    this.utils = utils;\r\n  }\r\n\r\n  async getPeopleArray(options, refresh) {\r\n    if (!this.peopleArray || refresh) {\r\n      var url = this.PEOPLE_SERVICE;\r\n      url += options ? options : \"\";\r\n      try {\r\n        let serverResponse = await this.data.get(url);\r\n        if (!serverResponse.error) {\r\n          this.peopleArray = serverResponse;\r\n        } else {\r\n          this.data.processError(serverResponse);\r\n          return undefined;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        return undefined;\r\n      }\r\n    }\r\n    return this.peopleArray;\r\n  }\r\n\r\n  async getUCCStaff(uccRoles) {\r\n    var url = this.UCC_STAFF_SERVICE + '/' + uccRoles;\r\n    try {\r\n      let serverResponse = await this.data.get(url);\r\n      if (!serverResponse.error) {\r\n        this.uccPeople = serverResponse;\r\n      } else {\r\n        this.data.processError(serverResponse);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async getInstitutionPeople(options, refresh) {\r\n    if (!this.peopleArray || refresh) {\r\n      var url = this.PEOPLE_SERVICE;\r\n      url += options ? options : \"\";\r\n      try {\r\n        let serverResponse = await this.data.get(url);\r\n        if (!serverResponse.error) {\r\n          this.instutionPeopleArray = serverResponse;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  async getPeopleBulkEmailArray(options, refresh) {\r\n    if (!this.peopleBulkEmailArray || refresh) {\r\n      var url = this.PEOPLE_SERVICE + '/bulkEmail';\r\n      url += options ? options : \"\";\r\n      try {\r\n        let serverResponse = await this.data.get(url);\r\n        if (!serverResponse.error) {\r\n          this.peopleBulkEmailArray = serverResponse;\r\n        } else {\r\n          this.data.processError(serverResponse);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  async getNotifications(personId) {\r\n    this.notificationsArray = [];\r\n    let response = await this.data.get(this.NOTIFICATION_SERVICE + \"/\" + personId + \"?filter=checked|eq|false&order=dateCreated:DSC\" + false);\r\n    if (!response.error) {\r\n      this.notificationsArray = response;\r\n    }\r\n  }\r\n\r\n  saveNotification(notice) {\r\n    this.data.saveObject(notice, this.NOTIFICATION_SERVICE, \"put\");\r\n  }\r\n\r\n  async getPerson(id) {\r\n    var url = this.PEOPLE_SERVICE + \"/\" + id;\r\n    try {\r\n      let serverResponse = await this.data.get(url);\r\n      if (!serverResponse.error) {\r\n        this.selectedPerson = serverResponse;\r\n      } else {\r\n        this.selectedPerson = undefined;\r\n        this.data.processError(serverResponse);\r\n      }\r\n    } catch (error) {\r\n      this.selectedPerson = undefined;\r\n      console.log(error);\r\n      return this.selectedPerson;\r\n    }\r\n  }\r\n\r\n  selectPerson(index, array) {\r\n    if (index === undefined) {\r\n      this.selectedPerson = this.emptyPerson();\r\n    } else {\r\n      if (array && array === 'i') {\r\n        this.selectedPerson = this.utils.copyObject(this.instutionPeopleArray[index]);\r\n        this.editIndex = index;\r\n      } else {\r\n        this.selectedPerson = this.utils.copyObject(this.peopleArray[index]);\r\n        this.editIndex = index;\r\n      }\r\n    }\r\n  }\r\n\r\n  selectedPersonFromId(id, array) {\r\n    if (array && array === 'i') {\r\n      this.instutionPeopleArray.forEach((item, index) => {\r\n        if (item._id === id) {\r\n          this.editIndex = index;\r\n          this.selectedPerson = this.utils.copyObject(item);\r\n        }\r\n      });\r\n      return;\r\n    } else {\r\n      this.peopleArray.forEach((item, index) => {\r\n        if (item._id === id) {\r\n          this.editIndex = index;\r\n          this.selectedPerson = this.utils.copyObject(item);\r\n        }\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  setSelectedPerson(userObj) {\r\n    if (userObj) {\r\n      this.selectedPerson = this.utils.copyObject(userObj);\r\n    }\r\n  }\r\n\r\n  emptyPerson() {\r\n    var obj = new Object();\r\n    obj.lastName = \"\";\r\n    obj.firstName = \"\";\r\n    obj.middleName = \"\";\r\n    obj.lastName = \"\";\r\n    obj.nickName = \"\";\r\n    obj.status = \"\";\r\n    obj.phone = \"\";\r\n    obj.mobile = \"\"\r\n    obj.email = \"\";\r\n    obj.gender = \"\";\r\n    obj.roles = new Array();\r\n    obj.roles.push(\"USER\");\r\n    obj.password = \"\";\r\n    obj.institution = \"\";\r\n    obj.active = false;\r\n    obj.coursesArray = new Array();\r\n    obj.file = new Object();\r\n    var auditObj = {\r\n      property: \"Created\",\r\n      eventDate: new Date()\r\n    }\r\n    obj.audit = [auditObj];\r\n    return obj;\r\n  }\r\n\r\n  async checkEmail() {\r\n    if (this.selectedPerson.email) {\r\n      let serverResponse = await this.data.get(this.CHECK_EMAIL + '?email=' + this.selectedPerson.email);\r\n      if (serverResponse.code === 409) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  async checkName() {\r\n    if (this.selectedPerson.firstName && this.selectedPerson.lastName && this.selectedPerson.institutionId) {\r\n      let serverResponse = await this.data.get(thisCHECK_NAME + '?filter=[and]firstName|eq|' + this.selectedPerson.firstName + ':lastName|eq|' + this.selectedPerson.lastName + ':institutionId|eq|' + this.selectedPerson.institutionId);\r\n      if (serverResponse.code === 409) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  async savePerson(register) {\r\n    if (!this.selectedPerson._id) {\r\n      if (register) {\r\n        var url = this.PERSON_REGISTER;\r\n      } else {\r\n        var url = this.PEOPLE_SERVICE;\r\n      }\r\n      let response = await this.data.saveObject(this.selectedPerson, url, \"post\")\r\n      if (!response.error) {\r\n        if (this.peopleArray) {\r\n          this.peopleArray.push(response);;\r\n        }\r\n      } else {\r\n        this.data.processError(response, \"There was an error creating the account.\");\r\n      }\r\n      return response;\r\n    } else {\r\n      let response = await this.data.saveObject(this.selectedPerson, this.PEOPLE_SERVICE, \"put\")\r\n      if (!response.error) {\r\n        if (this.peopleArray) {\r\n          this.peopleArray[this.editIndex] = this.utils.copyObject(this.selectedPerson, this.peopleArray[this.editIndex]);\r\n        }\r\n      }\r\n      return response;\r\n    }\r\n  }\r\n\r\n  async deletePerson() {\r\n    if (this.selectedPerson._id) {\r\n      let serverResponse = await this.data.deleteObject(this.PEOPLE_SERVICE + '/' + this.selectedPerson._id);\r\n      if (!serverResponse.error) {\r\n        this.peopleArray.splice(this.editIndex, 1);\r\n        this.editIndex = - 1;\r\n      }\r\n      return serverResponse;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  isPersonDirty(originalObj) {\r\n    if (this.selectedPerson) {\r\n      if (originalObj) {\r\n        var obj = originalObj;\r\n      } else if (this.selectedPerson._id) {\r\n        var obj = this.selectedPersonFromId(this.selectedPerson._id)\r\n      } else {\r\n        var obj = this.emptyPerson();\r\n      }\r\n      return this.utils.objectsEqual(this.selectedPerson, obj);\r\n    }\r\n  }\r\n\r\n  async uploadFile(files) {\r\n    let response = await this.data.uploadFiles(files, this.PEOPLE_UPLOAD_SERVICE + \"/\" + this.selectedPerson._id);\r\n  }\r\n\r\n  async uploadTechFile(files, id) {\r\n    let response = await this.data.uploadFiles(files, this.TECHNOTES_SERVICE + \"/upload/\" + id);\r\n  }\r\n\r\n  async sendCustomerMessage(message) {\r\n    if (message.email) {\r\n      var serverResponse = await this.data.saveObject(message, this.SEND_MAIL, \"put\");\r\n      return serverResponse;\r\n    } else {\r\n      return { error: \"no email\" };\r\n    }\r\n  }\r\n\r\n  sendNewRegisterEmail(email) {\r\n    this.data.saveObject(email, this.PERSON_REGISTER + \"/facDev\", 'post');\r\n  }\r\n\r\n  sendBuikEmail(email) {\r\n    if (email.email) {\r\n      var serverResponse = this.data.saveObject(email, this.PEOPLE_SERVICE + '/sendBulkEmail', \"post\");\r\n      return serverResponse;\r\n    } else {\r\n      return { error: \"no email\" };\r\n    }\r\n  }\r\n\r\n  async getEmailLog(options, refresh) {\r\n    if (!this.selectedPerson._id) {\r\n      return;\r\n    }\r\n\r\n    if (!this.emailArray || refresh) {\r\n      var url = this.PEOPLE_SERVICE + \"/emailLog\";\r\n      url += options ? options : \"\";\r\n      try {\r\n        let serverResponse = await this.data.get(url);\r\n        if (!serverResponse.error) {\r\n          this.emailArray = serverResponse;\r\n        } else {\r\n          this.data.processError(serverResponse);\r\n\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  updatePassword(obj) {\r\n    if (this.selectedPerson._id) {\r\n      return this.data.saveObject(obj, this.PEOPLE_SERVICE + '/password/' + this.selectedPerson._id, \"put\");\r\n    }\r\n  }\r\n\r\n  activateAccountEmail(email) {\r\n    this.data.saveObject(email, this.PEOPLE_SERVICE + \"/facDev/activate\", 'post');\r\n  }\r\n\r\n  async countPeopleStatus(status) {\r\n    let response = await this.data.get(this.PEOPLE_SERVICE + '/count/' + status);\r\n    return response;\r\n  }\r\n\r\n  async archiveInactivePeople() {\r\n    let response = await this.data.saveObject({}, this.PEOPLE_SERVICE + '/archive', \"post\");\r\n    return response;\r\n  }\r\n\r\n  //Institutions\r\n  async getInstitutionsArray(options, refresh) {\r\n    if (!this.institutionsArray || refresh) {\r\n      var url = this.INSTITUTION_SERVICES;\r\n      url += options ? options : \"\";\r\n      let response = await this.data.get(url)\r\n      if (!response.error) {\r\n        this.institutionsArray = response;\r\n      } else {\r\n        this.institutionsArray = undefined;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  async getAPJPackages(options, refresh) {\r\n    if (!this.packageArray || refresh) {\r\n      var url = this.PACKAGES_SERVICES;\r\n      url += options ? options : \"\";\r\n      let response = await this.data.get(url)\r\n      if (!response.error) {\r\n        this.packageArray = response;\r\n      } else {\r\n        this.packageArray = undefined;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  async getInstitution(id) {\r\n    var url = this.INSTITUTION_SERVICES + '/' + id;\r\n    let response = await this.data.get(url)\r\n    if (!response.status) {\r\n      return response;\r\n    } else {\r\n      return { institutionStatus: '99' };\r\n    }\r\n  }\r\n\r\n  selectInstitution(index) {\r\n    if (index === undefined) {\r\n      this.selectedInstitution = this.emptyInstitution();\r\n      this.newInstitution = true;\r\n    } else {\r\n      try {\r\n        this.selectedInstitution = this.utils.copyObject(this.institutionsArray[index]);\r\n        this.newInstitution = false;\r\n        this.editInstitutionIndex = index;\r\n      } catch (error) {\r\n        console.log(error);\r\n        this.selectedInstitution = this.emptyInstitution();\r\n        this.newInstitution = true;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  selectInstitutionByID(id) {\r\n    this.institutionsArray.forEach((item, index) => {\r\n      if (item._id === id) {\r\n        this.selectedInstitution = this.utils.copyObject(item);\r\n        this.editInstitutionIndex = index;\r\n        return;\r\n      }\r\n    });\r\n    return null;\r\n  }\r\n\r\n  emptyInstitution() {\r\n    var newInstitution = new Object();\r\n    newInstitution.joinDate = new Date();\r\n    newInstitution.name = \"\";\r\n    return newInstitution;\r\n  }\r\n\r\n  async saveInstitution() {\r\n    if (!this.selectedInstitution._id) {\r\n      let response = await this.data.saveObject(this.selectedInstitution, this.INSTITUTION_SERVICES, \"post\")\r\n      if (!response.error) {\r\n        if (this.institutionsArray) {\r\n          this.institutionsArray.push(response);\r\n        }\r\n      }\r\n      return response;\r\n    } else {\r\n      let response = await this.data.saveObject(this.selectedInstitution, this.INSTITUTION_SERVICES, \"put\")\r\n      if (!response.status) {\r\n        if (this.institutionsArray) {\r\n          this.institutionsArray[this.editInstitutionIndex] = this.utils.copyObject(this.selectedInstitution, this.institutionsArray[this.editInstitutionIndex]);\r\n        }\r\n      }\r\n      return response;\r\n    }\r\n  }\r\n\r\n  async saveAPJInstitution() {\r\n    if (!this.selectedInstitution._id) {\r\n      let response = await this.data.saveObject(this.selectedInstitution, 'apj/' + this.INSTITUTION_SERVICES, \"post\")\r\n      if (!response.error) {\r\n        if (this.institutionsArray) {\r\n          this.institutionsArray.push(response);\r\n        }\r\n      }\r\n      return response;\r\n    } else {\r\n      let response = await this.data.saveObject(this.selectedInstitution, 'apj/' + this.INSTITUTION_SERVICES, \"put\")\r\n      if (!response.status) {\r\n        if (this.institutionsArray) {\r\n          this.institutionsArray[this.editInstitutionIndex] = this.utils.copyObject(this.selectedInstitution, this.institutionsArray[this.editInstitutionIndex]);\r\n        }\r\n      }\r\n      return response;\r\n    }\r\n  }\r\n\r\n  async deleteInstitution() {\r\n    let serverResponse = await this.data.deleteObject(this.INSTITUTION_SERVICES + '/' + this.selectedInstitution._id);\r\n    if (!serverResponse.error) {\r\n      this.institutionsArray.splice(this.editInstitutionIndex, 1);\r\n      this.editInstitutionIndex = - 1;\r\n    }\r\n    return serverResponse;\r\n  }\r\n\r\n  isInstitutionDirty() {\r\n    if (this.selectedInstitution) {\r\n      if (this.selectedInstitution._id) {\r\n        var obj = this.institutionsArray[this.editInstitutionIndex];\r\n      } else {\r\n        var obj = this.emptyInstitution();\r\n      }\r\n      return this.utils.objectsEqual(this.selectedInstitution, obj);\r\n    }\r\n  }\r\n\r\n  //notes\r\n  async getNotesArray(options, refresh) {\r\n    if (!this.notesArray || refresh) {\r\n      var url = this.NOTES_SERVICE;\r\n      url += options ? options : \"\";\r\n      try {\r\n        let serverResponse = await this.data.get(url);\r\n        if (!serverResponse.error) {\r\n          this.notesArray = serverResponse;\r\n        } else {\r\n          this.data.processError(serverResponse);\r\n          return undefined;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        return undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  async getRemindersArray(options, refresh) {\r\n    if (!this.remindersArray || refresh) {\r\n      var url = this.NOTES_SERVICE;\r\n      url += options ? options : \"\";\r\n      try {\r\n        let serverResponse = await this.data.get(url);\r\n        if (!serverResponse.error) {\r\n          this.remindersArray = serverResponse;\r\n          if (Object.prototype.toString.call(this.remindersArray) === '[object Array]') {\r\n            this.remindersArray = this.remindersArray.filter(item => {\r\n              return item.isReminder;\r\n            });\r\n          }\r\n          return serverResponse;\r\n        } else {\r\n          this.data.processError(serverResponse);\r\n          return undefined;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        return undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  selectNote(index) {\r\n    if (index === undefined) {\r\n      this.selectedNote = this.emptyNote();\r\n    } else {\r\n      try {\r\n        this.selectedNote = this.utils.copyObject(this.notesArray[index]);\r\n        this.editNoteIndex = index;\r\n      } catch (error) {\r\n        console.log(error);\r\n        this.selectedNote = this.emptyNote();\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  selectNoteById(id) {\r\n    if (!id) return;\r\n    for (let i = 0; i < this.notesArray.length; i++) {\r\n      if (this.notesArray[i]._id === id) {\r\n        this.selectedNote = this.utils.copyObject(this.notesArray[i]);\r\n        this.editNoteIndex = i;\r\n        return;\r\n      }\r\n    }\r\n    this.selectedNote = this.emptyNote();\r\n  }\r\n\r\n  emptyNote() {\r\n    var obj = new Object();\r\n    obj.note = \"\";\r\n    obj.dateCreated = new Date();\r\n    obj.category = \"\";\r\n    obj.type = \"g\";\r\n    return obj;\r\n  }\r\n\r\n  async saveNote(index) {\r\n    if (!this.selectedNote) {\r\n      return;\r\n    }\r\n\r\n    if (!this.selectedNote._id) {\r\n      let serverResponse = await this.data.saveObject(this.selectedNote, this.NOTES_SERVICE, \"post\");\r\n      if (!serverResponse.error) {\r\n        if (this.notesArray) {\r\n          this.notesArray.push(this.selectedNote);\r\n          this.editNoteIndex = this.notesArray.length - 1;\r\n        }\r\n      } else {\r\n        this.data.processError(response, \"There was an error creating the note.\");\r\n      }\r\n      return serverResponse;\r\n    } else {\r\n      var serverResponse = await this.data.saveObject(this.selectedNote, this.NOTES_SERVICE, \"put\");\r\n      if (!serverResponse.error) {\r\n        this.notesArray[this.editNoteIndex] = this.utils.copyObject(this.selectedNote, this.notesArray[this.editNoteIndex]);\r\n      } else {\r\n        this.data.processError(response, \"There was an error updating the course.\");\r\n      }\r\n      return serverResponse;\r\n    }\r\n  }\r\n\r\n  async saveReminder(item, index) {\r\n    console.log(item)\r\n    if (item === undefined) {\r\n      return;\r\n    }\r\n\r\n    var serverResponse = await this.data.saveObject(item, this.NOTES_SERVICE, \"put\");\r\n    if (!serverResponse.error) {\r\n      this.remindersArray[index] = this.utils.copyObject(this.noteToSave, this.remindersArray[index]);\r\n    } else {\r\n      this.data.processError(response, \"There was an error updating the course.\");\r\n    }\r\n    return serverResponse;\r\n  }\r\n\r\n  async deleteNote() {\r\n    if (!this.selectedNote) {\r\n      return;\r\n    }\r\n\r\n    let serverResponse = await this.data.deleteObject(this.NOTES_SERVICE + '/' + this.selectedNote._id);\r\n    if (!serverResponse.error) {\r\n      this.notesArray.splice(this.editNoteIndex, 1);\r\n      this.editNoteIndex = - 1;\r\n    }\r\n    return serverResponse;\r\n\r\n  }\r\n\r\n  //tech notes\r\n  async getTechNotesArray(options, refresh) {\r\n    if (!this.notesArray || refresh) {\r\n      var url = this.TECHNOTES_SERVICE;\r\n      url += options ? options : \"\";\r\n      try {\r\n        let serverResponse = await this.data.get(url);\r\n        if (!serverResponse.error) {\r\n          this.techNotesArray = serverResponse;\r\n        } else {\r\n          this.data.processError(serverResponse);\r\n          return undefined;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        return undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  selectTechNote(index) {\r\n    if (index === undefined) {\r\n      this.selectedTechNote = this.emptyTechNote();\r\n    } else {\r\n      try {\r\n        this.selectedTechNote = this.utils.copyObject(this.techNotesArray[index]);\r\n        this.editTechNoteIndex = index;\r\n      } catch (error) {\r\n        console.log(error);\r\n        this.selectedTechNote = this.emptyTechNote();\r\n      }\r\n    }\r\n  }\r\n\r\n  emptyTechNote() {\r\n    var obj = new Object();\r\n    obj.note = \"\";\r\n    obj.dateCreated = new Date();\r\n    obj.file = {};\r\n    obj.category = \"\";\r\n    return obj;\r\n  }\r\n\r\n  async saveTechNote() {\r\n    if (!this.selectedTechNote) {\r\n      return;\r\n    }\r\n\r\n    if (!this.selectedTechNote._id) {\r\n      let serverResponse = await this.data.saveObject(this.selectedTechNote, this.TECHNOTES_SERVICE, \"post\");\r\n      return serverResponse;\r\n    } else {\r\n      var serverResponse = await this.data.saveObject(this.selectedTechNote, this.TECHNOTES_SERVICE, \"put\");\r\n      return serverResponse;\r\n    }\r\n  }\r\n\r\n  async deleteTechNote() {\r\n    if (!this.selectedTechNote) {\r\n      return;\r\n    }\r\n\r\n    let serverResponse = await this.data.deleteObject(this.TECHNOTES_SERVICE + '/' + this.selectedTechNote._id);\r\n    if (!serverResponse.error) {\r\n      this.techNotesArray.splice(this.editTechNoteIndex, 1);\r\n      this.editTechNoteIndex = - 1;\r\n    }\r\n    return serverResponse;\r\n\r\n  }\r\n\r\n  async getTechNotesCatArray(options, refresh) {\r\n    if (!this.notesArray || refresh) {\r\n      var url = this.TECHNOTESCAT_SERVICE;\r\n      url += options ? options : \"\";\r\n      try {\r\n        let serverResponse = await this.data.get(url);\r\n        if (!serverResponse.error) {\r\n          this.techNotesCatArray = serverResponse;\r\n        } else {\r\n          this.data.processError(serverResponse);\r\n          return undefined;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        return undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  selectTechNoteCat(index) {\r\n    if (index === undefined) {\r\n      this.selectedTechNoteCat = this.emptyTechNoteCat();\r\n    } else {\r\n      try {\r\n        this.selectedTechNoteCat = this.utils.copyObject(this.techNotesCatArray[index]);\r\n        this.editTechNoteCatIndex = index;\r\n      } catch (error) {\r\n        console.log(error);\r\n        this.selectedTechNoteCat = this.emptyTechNoteCat();\r\n      }\r\n    }\r\n  }\r\n\r\n  selectTechNoteCatByID(id) {\r\n    this.techNotesCatArray.forEach((item, index) => {\r\n      if (item._id === id) {\r\n        this.selectedTechNoteCat = this.utils.copyObject(item);\r\n        this.editTechNoteCatIndex = index;\r\n        return;\r\n      }\r\n    });\r\n    return null;\r\n  }\r\n\r\n  emptyTechNoteCat() {\r\n    var obj = new Object();\r\n    obj.category = \"\";\r\n    return obj;\r\n  }\r\n\r\n  async saveTechNoteCat() {\r\n    if (!this.selectedTechNoteCat) {\r\n      return;\r\n    }\r\n\r\n    if (!this.selectedTechNoteCat._id) {\r\n      let serverResponse = await this.data.saveObject(this.selectedTechNoteCat, this.TECHNOTESCAT_SERVICE, \"post\");\r\n      if (!serverResponse.error) {\r\n        if (this.notesArray) {\r\n          this.techNotesCatArray.push(this.selectedTechNoteCat);\r\n          this.editTechNoteCatIndex = this.techNotesCatArray.length - 1;\r\n        }\r\n      } else {\r\n        this.data.processError(response, \"There was an error creating the note.\");\r\n      }\r\n      return serverResponse;\r\n    } else {\r\n      var serverResponse = await this.data.saveObject(this.selectedTechNoteCat, this.TECHNOTESCAT_SERVICE, \"put\");\r\n      if (!serverResponse.error) {\r\n        this.techNotesCatArray[this.editTechNoteCatIndex] = this.utils.copyObject(this.selectedTechNoteCat, this.techNotesCatArray[this.editTechNoteCatIndex]);\r\n      } else {\r\n        this.data.processError(response, \"There was an error updating the tech note.\");\r\n      }\r\n      return serverResponse;\r\n    }\r\n  }\r\n\r\n  async deleteTechNoteCat() {\r\n    if (this.selectedTechNoteCat._id) {\r\n      let serverResponse = await this.data.deleteObject(this.TECHNOTESCAT_SERVICE + '/' + this.selectedTechNoteCat._id);\r\n      if (!serverResponse.error) {\r\n        this.techNotesCatArray.splice(this.editTechNoteCatIndex, 1);\r\n        this.editTechNoteCatIndex = - 1;\r\n      }\r\n      return serverResponse;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  //courses\r\n  async getCoursesArray(refresh, options, fields) {\r\n    if (!this.coursesArray || refresh) {\r\n      var url = this.COURSES_SERVICE;\r\n      url += options ? options : \"\";\r\n      try {\r\n        let serverResponse = await this.data.get(url);\r\n        if (!serverResponse.error) {\r\n          this.coursesArray = serverResponse;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      };\r\n    }\r\n  }\r\n\r\n  selectCourse(index) {\r\n    if (index === undefined) {\r\n      this.selectedCourse = this.emptyCourse();\r\n    } else {\r\n      try {\r\n        this.selectedCourse = this.utils.copyObject(this.coursesArray[index]);\r\n        this.editCourseIndex = index;\r\n      } catch (error) {\r\n        console.log(error);\r\n        this.selectedCourse = this.emptyCourse();\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  emptyCourse() {\r\n    var newObj = new Object();;\r\n    newObj.name = \"\";\r\n    newObj.description = \"\";\r\n    newObj.number = \"\";\r\n    newObj.active = true;\r\n    return newObj;\r\n  }\r\n\r\n  async saveCourse() {\r\n    if (!this.selectedCourse) {\r\n      return;\r\n    }\r\n\r\n    if (!this.selectedCourse._id) {\r\n      let serverResponse = await this.data.saveObject(this.selectedCourse, this.COURSES_SERVICE, \"post\");\r\n      if (!serverResponse.error) {\r\n        this.selectedCourse = this.utils.copyObject(serverResponse);\r\n        if (this.coursesArray) this.coursesArray.push(this.selectedCourse);\r\n        this.editIneditCourseIndex = this.coursesArray.length - 1;\r\n      } else {\r\n        this.data.processError(response, \"There was an error creating the product.\");\r\n      }\r\n      return serverResponse;\r\n    } else {\r\n      var serverResponse = await this.data.saveObject(this.selectedCourse, this.COURSES_SERVICE, \"put\");\r\n      if (!serverResponse.error) {\r\n        this.selectedCourse = this.utils.copyObject(serverResponse);\r\n        this.coursesArray[this.editCourseIndex] = this.utils.copyObject(this.selectedCourse, this.coursesArray[this.editCourseIndex]);\r\n      } else {\r\n        this.data.processError(response, \"There was an error updating the course.\");\r\n      }\r\n      return serverResponse;\r\n    }\r\n  }\r\n\r\n  isCourseDirty() {\r\n    if (this.editCourseIndex >= 0 && this.selectedCourse) {\r\n      return this.utils.objectsEqual(this.selectedCourse, this.coursesArray[this.editCourseIndex]);\r\n    }\r\n  }\r\n\r\n  async requestPasswordReset(obj) {\r\n    let serverResponse = await this.data.saveObject(obj, this.PASSWORD_RESET, \"post\");\r\n    return serverResponse;\r\n  }\r\n\r\n  async getPasswordReset(validationCode) {\r\n    let serverResponse = await this.data.get(this.PASSWORD_RESET + '/' + validationCode);\r\n    if (!serverResponse.code) {\r\n      this.selectedPerson = serverResponse;\r\n    }\r\n    return serverResponse;\r\n  }\r\n\r\n}\r\n","import { inject } from 'aurelia-framework';\r\nimport { DataServices } from './dataServices';\r\nimport { Utils } from '../utils/utils';\r\n\r\n@inject(DataServices, Utils)\r\nexport class Products {\r\n\r\n    PRODUCTS_SERVICE = 'products';\r\n\r\n    constructor(data, utils) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n    }\r\n\r\n    async getProductsArray(options, refresh) {\r\n        if (!this.productsArray || refresh) {\r\n            var url = this.PRODUCTS_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.productsArray = serverResponse;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n   \r\n    async getProduct(index){\r\n        if(index){\r\n            let id = this.productsArray[index]._id;\r\n            let serverResponse = await this.data.get(this.PRODUCTS_SERVICE + \"/\" + id);\r\n            if(!serverResponse.error){\r\n                this.selectedProduct = serverResponse;\r\n                this.productsArray[index] = this.utils.copyObject(this.selectedProduct);\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    selectProduct(index) {\r\n        if (index === undefined) {\r\n            this.selectedProduct = this.emptyProduct();\r\n            this.newSystem = true;\r\n        } else {\r\n            try {\r\n                this.selectedProduct = this.utils.copyObject(this.productsArray[index]);\r\n                this.newSystem = false;\r\n                this.editIndex = index;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.selectedProduct = this.emptyProduct();\r\n                this.newSystem = true;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    selectedProductFromId(id) {\r\n        this.selectedProduct = this.emptyProduct();\r\n        this.productsArray.forEach((item) => {\r\n            if (item._id === id) {\r\n                this.selectedProduct = this.utils.copyObject(item);\r\n                return;\r\n            }\r\n        });\r\n        return null;\r\n    }\r\n\r\n    emptyProduct() {\r\n        var newProduct = new Object();;\r\n        newProduct.clientKey = \"\";\r\n        newProduct.name = \"\";\r\n        newProduct.sapName = \"\";\r\n        newProduct.hostWhere = \"\";\r\n        newProduct.uaCurriculum = \"\";\r\n        newProduct.defaultStudentIdPrefix = \"\";\r\n        newProduct.defaultFacultyIdPrefix = \"\";\r\n        newProduct.defaultStudentPassword = \"\";\r\n        newProduct.defaultFacultyPassword = \"\";\r\n        newProduct.comment = \"\";\r\n        newProduct.Client_Info = \"\";\r\n        newProduct.fileName = \"\";\r\n        newProduct.dataset = \"\";\r\n        newProduct.idsAvailable = \"\";\r\n        newProduct.firstAllowableId = 1;\r\n        newProduct.active = true;\r\n        newProduct.systems = new Array();\r\n        return newProduct;\r\n    }\r\n\r\n    getProductInfo(id) {\r\n        if (!id) return null;\r\n        for (var i = 0; i < this.productsArray.length; i++) {\r\n            if (this.productsArray[i]._id === id) {\r\n                if (this.productsArray[i].productDescription) {\r\n                    return {\r\n                        info: this.productsArray[i].productDescription,\r\n                        productId: id,\r\n                        header: this.productsArray[i].name\r\n                    }\r\n                } else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    async saveProduct() {\r\n        if (!this.selectedProduct) {\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedProduct._id) {\r\n            let serverResponse = await this.data.saveObject(this.selectedProduct, this.PRODUCTS_SERVICE, \"post\");\r\n            if (!serverResponse.error) {\r\n                this.productsArray.push(serverResponse);\r\n                this.editIndex = this.productsArray.length - 1;\r\n            } else {\r\n                this.data.processError(serverResponse, \"There was an error creating the product.\");\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedProduct, this.PRODUCTS_SERVICE, \"put\");\r\n            if (!serverResponse.error) {\r\n                this.productsArray[this.editIndex] = this.utils.copyObject(this.selectedProduct, this.productsArray[this.editIndex]);\r\n            } else {\r\n                this.data.processError(serverResponse, \"There was an error updating the product.\");\r\n            }\r\n            return serverResponse;\r\n        }\r\n\r\n    }\r\n\r\n    async deleteProduct() {\r\n        let serverResponse = await this.data.deleteObject(this.PRODUCTS_SERVICE + '/' + this.selectedProduct._id);\r\n        if (!serverResponse.error) {\r\n            this.productsArray.splice(this.editIndex, 1);\r\n            this.editIndex = - 1;\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    isDirty() {\r\n        if (this.selectedProduct) {\r\n            if (this.selectedProduct._id) {\r\n                var obj = this.productsArray[this.editIndex];\r\n            } else {\r\n                var obj = this.emptyProduct();\r\n            }\r\n            return this.utils.objectsEqual(this.selectedProduct, obj);\r\n        }\r\n    }\r\n}\r\n","export class SessionObj{\r\n\ttoken;\r\n\tuser;\r\n}","import { inject } from 'aurelia-framework';\r\nimport { DataServices } from './dataServices';\r\nimport { Utils } from '../utils/utils';\r\nimport { AppConfig } from '../../config/appConfig';\r\nimport moment from 'moment';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class Sessions {\r\n\r\n    SESSIONS_SERVICE = \"sessions\";\r\n\r\n    constructor(data, utils, config) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n        this.config = config;\r\n    }\r\n\r\n    async getSessionsArray(options, refresh) {\r\n        if (!this.sessionsArray || refresh) {\r\n            var url = this.SESSIONS_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.sessionsArray = serverResponse;\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    selectSession(index) {\r\n        if (!index && index != 0) {\r\n            this.selectedSession = this.emptySession();\r\n        } else {\r\n            try {\r\n                this.selectedSession = this.utils.copyObject(this.sessionsArray[index]);\r\n                this.editIndex = index;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.selectedSession = this.emptySesssion();\r\n                this.newSession = true;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    selectSessionById(id) {\r\n        this.selectedSession = null;\r\n        for (var i = 0; i < this.sessionsArray.length; i++) {\r\n            if (this.sessionsArray[i]._id === id) {\r\n                this.selectedSession = this.utils.copyObject(this.sessionsArray[i]);\r\n                this.editIndex = i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    setSession(session){\r\n        this.selectedSession = session;\r\n    }\r\n\r\n    emptySession() {\r\n        var newSessionObj = new Object();\r\n        newSessionObj.session = \"\";\r\n        newSessionObj.year = \"\";\r\n        newSessionObj.startDate = \"\";\r\n        newSessionObj.endDate = \"\";\r\n        newSessionObj.requestsOpenDate = \"\";\r\n        newSessionObj.sessionStatus = \"Next\";\r\n\r\n        let sessions = this.sessionsArray.sort((a,b) => {\r\n            return moment(a.startDate).isBefore( b.startDate);\r\n        });\r\n\r\n        var nextSession = -1;\r\n        //Search for the most recent session and set the next session\r\n        if (!sessions[0]) {\r\n            var today = new Date();\r\n            var month = today.getMonth();\r\n            var year = today.getFullYear();\r\n            nextSession = 1;\r\n          \r\n            for (var i = 0, x = this.config.SESSION_PARAMS.length; i < x; i++) {\r\n                if (month >= parseInt(this.config.SESSION_PARAMS[i].startMonth) && month <= parseInt(this.config.SESSION_PARAMS[i].endMonth)) {\r\n                    nextSession = i + 1;\r\n                    break;\r\n                }\r\n            }\r\n            var thisYear = nextSession != 4 ? year : year--;\r\n        } else {\r\n            for (var i = 0, x = this.config.SESSION_PARAMS.length; i < x; i++) {\r\n                if (sessions[0].session === this.config.SESSION_PARAMS[i].session) {\r\n                    nextSession = i + 1;\r\n                    break;\r\n                }\r\n            }\r\n             var thisYear = parseInt(sessions[0].year);\r\n            \r\n        }\r\n\r\n        //If the next session is the fifth session then set it to the first session\r\n        if (nextSession === 4) nextSession = 0;\r\n        //Set the session name\r\n        newSessionObj.session = this.config.SESSION_PARAMS[nextSession].session;\r\n        //And the year\r\n        // let thisYear = parseInt(sessions[0].year);\r\n        if(nextSession === 0) thisYear++;\r\n        newSessionObj.year = thisYear;\r\n        if (nextSession === 3) {\r\n            newSessionObj.year = thisYear + \"/\" + (parseInt(thisYear) + 1);\r\n        }\r\n\r\n        //Set the dates\r\n        newSessionObj.startDate = thisYear + \"-\" + this.config.SESSION_PARAMS[nextSession].startMonth + \"-\" + this.config.SESSION_PARAMS[nextSession].startDay;\r\n        if (nextSession === 3) {\r\n            thisYear = parseInt(thisYear) + 1;\r\n            newSessionObj.endDate = thisYear + \"-\" + this.config.SESSION_PARAMS[nextSession].endMonth + \"-\" + this.config.SESSION_PARAMS[nextSession].endDay;\r\n        } else {\r\n            newSessionObj.endDate = thisYear + \"-\" + this.config.SESSION_PARAMS[nextSession].endMonth + \"-\" + this.config.SESSION_PARAMS[nextSession].endDay;\r\n        }\r\n        newSessionObj.requestsOpenDate = thisYear + \"-\" + this.config.SESSION_PARAMS[nextSession].openMonth + \"-\" + this.config.SESSION_PARAMS[nextSession].openDay;\r\n\r\n        return newSessionObj;\r\n    }\r\n\r\n    async saveSession() {\r\n        if (!this.selectedSession) {\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedSession._id) {\r\n            let serverResponse = await this.data.saveObject(this.selectedSession, this.SESSIONS_SERVICE, \"post\");\r\n            if (!serverResponse.error) {\r\n                this.sessionsArray.unshift(serverResponse);\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedSession, this.SESSIONS_SERVICE, \"put\");\r\n            if (!serverResponse.error) {\r\n                this.sessionsArray[this.editIndex] = this.utils.copyObject(this.selectedSession);\r\n            }\r\n            return serverResponse;\r\n        }\r\n\r\n    }\r\n\r\n    isDirty() {\r\n\r\n        if (this.selectedSession) {\r\n            if (this.selectedSession._id) {\r\n                var obj = this.sessionsArray[this.editIndex];\r\n            } else {\r\n                var obj = this.emptySession();\r\n            }\r\n            return this.utils.objectsEqual(this.selectedSession, obj);\r\n        }\r\n    }\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\nimport {Utils} from '../utils/utils';\r\nimport {AppConfig} from '../../config/appConfig';\r\nimport moment from 'moment';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class SiteInfo {\r\n\r\n    SITE_SERVICES = 'site';\r\n    MESSAGE_SERVICES = 'messages';\r\n\r\n    constructor(data, utils, config) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n        this.config = config;\r\n    }\r\n\r\n    async getInfoArray(refresh, options){\r\n        if (!this.siteArray || refresh) {\r\n            var url = this.SITE_SERVICES;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.siteArray = serverResponse;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    selectSiteItem(index){\r\n        if (!index || index === -1) {\r\n            this.selectedItem = this.emptyItem();\r\n        } else {\r\n            try {\r\n            this.selectedItem = this.utils.copyObject(this.siteArray[index]);\r\n            this.editIndex = index;\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    setSiteItem(item){\r\n        this.selectedItem = this.utils.copyObject(item);\r\n    }\r\n\r\n    emptyItem(){\r\n        var newItem = new Object();;\r\n        newItem.title = \"\";\r\n        newItem.content = \"\";\r\n        newItem.url = \"\";\r\n        newItem.createdDate = new Date();\r\n        newItem.expiredDate = moment(new Date()).add(1, 'years');\r\n        newItem.image = \"\";\r\n        newItem.priority = \"INFO\";\r\n        newItem.itemType = \"NEWS\";\r\n        newItem.sortOrder = 0;\r\n        newItem.file = new Object();\r\n        return newItem;\r\n    }\r\n\r\n    async saveInfoItem(){\r\n         if(!this.selectedItem){\r\n            return;\r\n        }\r\n\r\n        if(!this.selectedItem._id){\r\n            let serverResponse = await this.data.saveObject(this.selectedItem, this.SITE_SERVICES, \"post\");\r\n            if(!serverResponse.error){\r\n                this.selectedItem = this.utils.copyObject(serverResponse);\r\n                this.siteArray.push(serverResponse);\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedItem, this.SITE_SERVICES, \"put\");\r\n            if(!serverResponse.error){\r\n                this.selectedItem = this.utils.copyObject(serverResponse);\r\n                this.siteArray[this.editIndex] = this.utils.copyObject(this.selectedItem, this.siteArray[this.editIndex]);\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n    \r\n    async uploadFile(files){\r\n       let response = await this.data.uploadFiles(files, this.SITE_SERVICES + '/upload/' + this.selectedItem._id);\r\n       if(!response.error){\r\n            this.siteArray[this.editIndex] = this.utils.copyObject(response, this.siteArray[this.editIndex]);\r\n       }\r\n    }\r\n\r\n    async deleteItem(){\r\n         let serverResponse = await this.data.deleteObject(this.SITE_SERVICES + '/' + this.selectedItem._id);\r\n            if (!serverResponse.error) {\r\n                this.siteArray.splice(this.editIndex, 1);\r\n                this.editIndex = - 1;\r\n            }\r\n            return serverResponse;\r\n    }\r\n\r\n    isDirty(obj){\r\n        if(this.selectedItem){\r\n            if(!obj){\r\n                 var obj = this.emptyItem();\r\n            }\r\n            var skip = ['file'];\r\n            return this.utils.objectsEqual(this.selectedItem, obj, skip);\r\n        } \r\n        return new Array();\r\n    }\r\n\r\n    async getWeather(city){\r\n        let response = this.data.get('getWeather/' + city)\r\n        return response;\r\n    }\r\n\r\n    showCarousel(){\r\n        for(let i = 0; i < this.siteArray.length; i++){\r\n            if(this.siteArray[i].itemType === 'CARO') return true\r\n        }\r\n        return false;\r\n    }\r\n\r\n    async getMessageArray(options, refresh){\r\n        if (!this.messageArray || refresh) {\r\n            var url = this.MESSAGE_SERVICES;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.messageArray = serverResponse;\r\n                } else {\r\n                    this.data.processError(serverResponse);\r\n                    return undefined;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                return undefined;\r\n            }\r\n        }\r\n        return this.messageArray;\r\n    }\r\n    \r\n    selectMessageByKey(key){\r\n        var index = this.utils.arrayContainsValue(this.messageArray, 'key', key);\r\n        if(index > -1){\r\n            return this.messageArray[index];\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    selectMessage(index){\r\n        if (index === -1) {\r\n            this.selectedMessage = this.emptyMessage();\r\n        } else {\r\n            try {\r\n            this.selectedMessage = this.utils.copyObject(this.messageArray[index]);\r\n            this.editMessageIndex = index;\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    emptyMessage(){\r\n        var newMessage = new Object();;\r\n        newMessage.description = \"\";\r\n        newMessage.content = \"\";\r\n        return newMessage;\r\n    }\r\n \r\n    async saveMessageItem(){\r\n         if(!this.selectedMessage){\r\n            return;\r\n        }\r\n\r\n        if(!this.selectedMessage._id){\r\n            let serverResponse = await this.data.saveObject(this.selectedMessage, this.MESSAGE_SERVICES, \"post\");\r\n            if(!serverResponse.error){\r\n                 this.messageArray.push(this.selectedMessage);\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedMessage, this.MESSAGE_SERVICES, \"put\");\r\n            if(!serverResponse.error){\r\n                this.messageArray[this.editMessageIndex] = this.utils.copyObject(this.selectedMessage, this.messageArray[this.editMessageIndex]);\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n    \r\n    isMessageDirty(obj){\r\n        if(this.selectedMessage){\r\n            if(!obj){\r\n                 var obj = this.emptyItem();\r\n            }\r\n            return this.utils.objectsEqual(this.selectedMessage, obj);\r\n        }\r\n        return new Array();\r\n    }\r\n\r\n    async deleteMessage(){\r\n         let serverResponse = await this.data.deleteObject(this.SITE_SERVICES + '/' + this.selectedMessage._id);\r\n            if (!serverResponse.error) {\r\n                this.messageArray.splice(this.editMessageIndex, 1);\r\n                this.editMessageIndex = - 1;\r\n            }\r\n            return serverResponse;\r\n    }\r\n\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\nimport {Products} from './dataServices';\r\nimport {Utils} from '../utils/utils';\r\nimport {AppConfig} from '../../config/appConfig';\r\nimport { observable } from 'aurelia-framework';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class Systems{\r\n\r\n    SYSTEMS_SERVICE = \"systems\";\r\n    CHANGE_SERVICE = \"change\";\r\n    CHANGE_CATEGORY_SERVICE = \"changeCategory\";\r\n\r\n    constructor(data, utils, config){\r\n        this.data = data;\r\n        this.utils = utils;\r\n        this.config = config;\r\n    }\r\n\r\n    async getSystemsArray(options, refresh){\r\n        if(!this.systemsArray || refresh) {\r\n            var url = this.SYSTEMS_SERVICE;\r\n            url += options ? options : \"\";\r\n             try{\r\n                let serverResponse = await this.data.get(url);\r\n                if(!serverResponse.error){\r\n                    this.systemsArray = serverResponse;\r\n                } \r\n            } catch(error){\r\n                console.log(error);\r\n                this.systemsArray = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    async getSystem(index){\r\n        if(index >= 0){\r\n            let id = this.systemsArray[index]._id;\r\n            let serverResponse = await this.data.get(this.SYSTEMS_SERVICE + \"/\" + id);\r\n            if(!serverResponse.error){\r\n                this.selectedSystem = serverResponse;\r\n                this.systemsArray[index] = this.utils.copyObject(this.selectedSystem);\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    async getConfiguredProductSystems(sids){\r\n        if(sids){\r\n            let serverResponse = await this.data.get(this.SYSTEMS_SERVICE + \"/product/\" + sids);\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    async getAPJConfiguredProductSystems(sids){\r\n        if(sids){\r\n            let serverResponse = await this.data.get('apj/' + this.SYSTEMS_SERVICE + \"/product/\" + sids);\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    selectSystem(index){\r\n        if(!index && index != 0) {\r\n            this.selectedSystem = this.emptySystem();\r\n            this.newSystem = true;\r\n        } else {\r\n            try{\r\n                this.selectedSystem = this.utils.copyObject(this.systemsArray[index]);\r\n                this.newSystem = false;\r\n                this.editIndex = index;\r\n            } catch (error){\r\n                console.log(error);\r\n                this.selectedSystem = this.emptySystem();\r\n                this.newSystem = true;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    selectedSystemFromId(id){\r\n      this.selectedSystem = null;\r\n      for(var i = 0, x = this.systemsArray.length; i < x; i++){\r\n        if(this.systemsArray[i]._id === id){\r\n          this.selectedSystem = this.utils.copyObject(this.systemsArray[i]);\r\n          this.editIndex = i;\r\n          break;\r\n        }\r\n      };\r\n    }\r\n\r\n    selectedProductSystemFromId(id, systems){\r\n        this.selectedSystem = null;\r\n        for(var i = 0, x = systems.length; i < x; i++){\r\n          if(systems[i]._id === id){\r\n            this.selectedSystem = this.utils.copyObject(systems[i]);\r\n            this.editIndex = i;\r\n            break;\r\n          }\r\n        };\r\n    }\r\n\r\n    setSelectedSystem(system){\r\n        this.selectedSystem = this.utils.copyObject(system);\r\n    }\r\n\r\n    emptySystem(){\r\n        var newSystemObj = {};\r\n        newSystemObj.sid = \"\";\r\n        newSystemObj.active = true;\r\n        newSystemObj.description = \"\";\r\n        newSystemObj.server = \"\";\r\n        newSystemObj.instance = \"\";\r\n        newSystemObj.its = \"\";\r\n        newSystemObj.terms = \"\";\r\n        newSystemObj.idsAvailable = 0;\r\n        newSystemObj.productId = new Array();\r\n        newSystemObj.clients = [];\r\n        return newSystemObj;\r\n    }\r\n\r\n    async saveSystem(){\r\n        if(!this.selectedSystem){\r\n            return;\r\n        }\r\n\r\n        if(!this.selectedSystem._id){\r\n            let serverResponse = await this.data.saveObject(this.selectedSystem, this.SYSTEMS_SERVICE, \"post\");\r\n            if(!serverResponse.error){\r\n                 this.systemsArray.push(serverResponse);\r\n            } else {\r\n                this.data.processError(serverResponse,\"Error updating the system.<br>\")\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedSystem, this.SYSTEMS_SERVICE, \"put\");\r\n            if(!serverResponse.error){\r\n                this.selectedSystem = serverResponse;\r\n                this.systemsArray[this.editIndex] = this.utils.copyObject(this.selectedSystem);\r\n            } else {\r\n                this.data.processError(serverResponse,\"Error updating the system.<br>\")\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    async saveClient(clientToSave){\r\n      await this.data.saveObject(clientToSave, this.SYSTEMS_SERVICE + \"/client\", \"put\");\r\n    }\r\n\r\n    async deleteSystem(){\r\n        let serverResponse = await this.data.deleteObject(this.SYSTEMS_SERVICE + '/' + this.selectedSystem._id);\r\n        if (!serverResponse.error) {\r\n            this.systemsArray.splice(this.editIndex, 1);\r\n            this.editIndex = - 1;\r\n        } else {\r\n            this.data.processError(serverResponse,\"Error deleting the system.<br>\")\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    async saveProductChanges(obj){\r\n        let response = await this.data.saveObject(obj, this.SYSTEMS_SERVICE + '/product/', \"put\");\r\n        return response;\r\n    }\r\n\r\n    isDirty(obj, skip){\r\n        if(this.selectedSystem){\r\n            if(!obj){\r\n                var obj = this.emptySystem();\r\n            }\r\n            return this.utils.objectsEqual(this.selectedSystem, obj, skip);\r\n        }\r\n        return new Array();\r\n    }\r\n\r\n    async deleteAllClients(){\r\n        if(this.selectedSystem._id){\r\n            this.selectedSystem.clients = new Array();\r\n        }\r\n    }\r\n\r\n    generateClients(start, end, status, product, interval, idsAvailable){\r\n        if(!this.selectedSystem){\r\n            return {error: \"No system selected.\"};\r\n        }\r\n\r\n        this.selectedSystem.clients = this.selectedSystem.clients || new Array();\r\n        var lastClientIndex = this.selectedSystem.clients.length - 1;\r\n        if( start > 0 &&  end > 0 && end >= start){\r\n            for(var i = start; i <= end; i += interval){\r\n                if(this._findClient(i, 0, lastClientIndex) < 0){\r\n                    this.selectedSystem.clients.push(this.emptyClient(i, status, product, idsAvailable));\r\n                }\r\n            }\r\n            return true;\r\n        } else {\r\n            return {error: \"Enter valid start and end client numbers\"}\r\n        }\r\n    }\r\n\r\n    refreshClients(status, products){\r\n         for(var i = 0, x = this.selectedSystem.clients.length; i<x; i++){ \r\n            var aProduct = {firstAllowableID: 1, _id: null};\r\n            this.selectedSystem.clients.forEach(item => {\r\n                if(item.productId !== aProduct._id){\r\n                    for(let j = 0; j < products.length; j++){\r\n                        if(products[j]._id === item.productId){\r\n                            aProduct = products[j];\r\n                            this.selectedSystem.clients[i] = this.emptyClient(this.selectedSystem.clients[i].client, status, aProduct, aProduct.idsAvailable);\r\n                            break;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.selectedSystem.clients[i] = this.emptyClient(this.selectedSystem.clients[i].client, status, aProduct, aProduct.idsAvailable);\r\n                }\r\n            })\r\n            \r\n        }\r\n    }\r\n\r\n    _findClient(client, start, end){\r\n        if(end >= 0){\r\n            for(var i = start; i<=end; i++ ){\r\n                if(parseInt(this.selectedSystem.clients[i].client) === client) return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    selectClient(index){\r\n        if(index != undefined) {\r\n            this.selectedClient = this.utils.copyObject(this.selectedSystem.clients[index]);\r\n            this.clientIndex = index;\r\n        }\r\n    }\r\n\r\n    selectClientFromIDNoSystem(systemId, clientId){\r\n        console.log('The wrong function')\r\n      this.selectedClient = null;\r\n      for(var i = 0, x = this.systemsArray.length; i < x; i++){\r\n        if(this.systemsArray[i]._id === systemId){\r\n            for(var j = 0; j < this.systemsArray[i].clients.length; j++){\r\n                if(this.systemsArray[i].clients[j].client == clientId){\r\n                    this.selectedClient = this.utils.copyObject(this.systemsArray[i].clients[j]);\r\n                    this.clientIndex = j;\r\n                    break;\r\n                }\r\n            }  \r\n        }\r\n      }\r\n    }\r\n\r\n    selectClientFromIDNoSystem(systemId, clientId, systems){\r\n        console.log('Using the right one');\r\n        this.selectedClient = null;\r\n        for(var i = 0, x = systems.length; i < x; i++){\r\n          if(systems[i]._id === systemId){\r\n              for(var j = 0; j < systems[i].clients.length; j++){\r\n                  if(systems[i].clients[j].client == clientId){\r\n                      this.selectedClient = this.utils.copyObject(systems[i].clients[j]);\r\n                      this.clientIndex = j;\r\n                      break;\r\n                  }\r\n              }  \r\n          }\r\n        }\r\n      }\r\n    \r\n    selectClientFromID(systemId, clientId){\r\n      this.selectedClient = null;\r\n      for(var i = 0, x = this.systemsArray.length; i < x; i++){\r\n        if(this.systemsArray[i]._id === systemId){\r\n            this.selectedSystem = this.utils.copyObject(this.systemsArray[i]);\r\n            for(var j = 0; j < this.systemsArray[i].clients.length; j++){\r\n                if(this.systemsArray[i].clients[j].client == clientId){\r\n                    this.selectedClient = this.utils.copyObject(this.systemsArray[i].clients[j]);\r\n                    this.clientIndex = j;\r\n                    break;\r\n                }\r\n            }  \r\n        }\r\n      }\r\n    }\r\n\r\n    selectClientFromNumber(systemId, client){\r\n        this.selectedClient = null;\r\n        for(var i = 0, x = this.systemsArray.length; i < x; i++){\r\n            if(this.systemsArray[i]._id === systemId){\r\n                this.selectedSystem = this.utils.copyObject(this.systemsArray[i]);\r\n                for(var j = 0; j < this.systemsArray[i].clients.length; j++){\r\n                    if(this.systemsArray[i].clients[j].client === client){\r\n                        this.selectedClient = this.utils.copyObject(this.systemsArray[i].clients[j]);\r\n                        this.clientIndex = j;\r\n                        break;\r\n                    }\r\n                }  \r\n            }\r\n        }\r\n    }\r\n\r\n    emptyClient(clientNo, status, product, idsAvailable){\r\n        let obj = new Object();\r\n        obj.client = clientNo;\r\n        obj.clientStatus = status;\r\n        obj.systemId = this.selectedSystem._id;\r\n        obj.idsAvailable = product.idsAvailable;\r\n        obj.assignments = new Array(); \r\n        obj.createdDate = new Date();\r\n        obj.lastIdAssigned = 0;\r\n        obj.lastFacIdAssigned = 0;\r\n        obj.firstFacIdAssigned = 0;\r\n        obj.manual = false;\r\n        obj.productId = product ? product._id : null;\r\n        obj.firstAllowableID = product.firstAllowableId ? parseInt(product.firstAllowableId) : 1;\r\n        return obj;\r\n    }\r\n\r\n    selectClient(index){\r\n        if(index != undefined) {\r\n            this.selectedClient = this.utils.copyObject(this.selectedSystem.clients[index]);\r\n            this.clientIndex = index;\r\n        }\r\n    }\r\n    \r\n    /*****************************************************************************************************\r\n     * Find the client in a systems client list and update it, used by client request assignment\r\n     ****************************************************************************************************/\r\n    updateClient(client, systemId){\r\n        if(!systemId){\r\n            for(var i = 0, x = this.systemsArray.length; i < x; i++){\r\n                if(this.systemsArray[i]._id === client.systemId){\r\n                    for(var j = 0; j < this.systemsArray[i].clients.length; j++){\r\n                        if(this.systemsArray[i].clients[j].client == client.client){\r\n                            this.systemsArray[i].clients[j] = this.utils.copyObject(client);\r\n                            break;\r\n                        }\r\n                    }  \r\n                }\r\n            };\r\n        } else {\r\n            for(var j = 0; j < this.systemsArray[i].clients.length; j++){\r\n                if(this.systemsArray[i].clients[j].client == client.client){\r\n                    this.systemsArray[i].clients[j] = this.utils.copyObject(client);\r\n                    break;\r\n                }\r\n            } \r\n        }\r\n        \r\n    }\r\n\r\n    async getAssignmentDetails(id){\r\n        var url = \"/serverAssignments/\" + id;\r\n        let serverResponse = await this.data.get(url);\r\n        if (!serverResponse.error) {\r\n            this.assignmentDetailsArray = serverResponse.sort((a,b) => {\r\n                return a.lastName < b.lastName ? -1 : 1;\r\n            });\r\n        }  else {\r\n            this.data.processError(serverResponse);\r\n        }\r\n    }\r\n\r\n    //Change\r\n    async getChangeArray(options, refresh){\r\n        if(!this.changeArray || refresh) {\r\n            var url = this.CHANGE_SERVICE;\r\n            url += options ? options : \"\";\r\n             try{\r\n                let serverResponse = await this.data.get(url);\r\n                if(!serverResponse.error){\r\n                    this.changeArray = serverResponse;\r\n                } \r\n            } catch(error){\r\n                console.log(error);\r\n                this.changeArray = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    async getChange(index){\r\n        if(index >= 0){\r\n            let id = this.changeArray[index]._id;\r\n            let serverResponse = await this.data.get(this.CHANGE_SERVICE + \"/\" + id);\r\n            if(!serverResponse.error){\r\n                this.selectedChange = serverResponse;\r\n                this.changeArray[index] = this.utils.copyObject(this.selectedChange);\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    selectChange(index){\r\n        if(!index && index != 0) {\r\n            this.selectedChange = this.emptyChange();\r\n        } else {\r\n            try{\r\n                this.selectedChange = this.utils.copyObject(this.changeArray[index]);\r\n                this.changeIndex = index;\r\n            } catch (error){\r\n                console.log(error);\r\n                this.selectedChange = this.emptyChange();\r\n            }\r\n        }\r\n    }\r\n\r\n    emptyChange(){\r\n        var newObj = {};\r\n        newObj.category = \"\";\r\n        newObj.content = \"\";\r\n        return newObj;\r\n    }\r\n\r\n    async saveChange(){\r\n        if(!this.selectedChange){\r\n            return;\r\n        }\r\n\r\n        if(!this.selectedChange._id){\r\n            let serverResponse = await this.data.saveObject(this.selectedChange, this.CHANGE_SERVICE, \"post\");\r\n            if(!serverResponse.error){\r\n                 this.changeArray.push(serverResponse);\r\n            } else {\r\n                this.data.processError(serverResponse,\"Error updating the change.<br>\")\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedChange, this.CHANGE_SERVICE, \"put\");\r\n            if(!serverResponse.error){\r\n                this.selectedChange = serverResponse;\r\n                this.changeArray[this.changeIndex] = this.utils.copyObject(this.selectedChange);\r\n            } else {\r\n                this.data.processError(serverResponse,\"Error updating the change .<br>\")\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    async deleteChange(){\r\n        let serverResponse = await this.data.deleteObject(this.CHANGE_SERVICE + '/' + this.selectedChange._id);\r\n        if (!serverResponse.error) {\r\n            this.changeArray.splice(this.editIndex, 1);\r\n            this.editIndex = - 1;\r\n        } else {\r\n            this.data.processError(serverResponse,\"Error deleting the change.<br>\")\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    //Change Category\r\n    async getChangeCategoryArray(options, refresh){\r\n        if(!this.changeCategoryArray || refresh) {\r\n            var url = this.CHANGE_CATEGORY_SERVICE;\r\n            url += options ? options : \"\";\r\n             try{\r\n                let serverResponse = await this.data.get(url);\r\n                if(!serverResponse.error){\r\n                    this.changeCategoryArray = serverResponse;\r\n                } \r\n            } catch(error){\r\n                console.log(error);\r\n                this.changeCategoryArray = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    async getChangeCategory(index){\r\n        if(index >= 0){\r\n            let id = this.changeCategoryArray[index]._id;\r\n            let serverResponse = await this.data.get(this.CHANGE_CATEGORY_SERVICE + \"/\" + id);\r\n            if(!serverResponse.error){\r\n                this.selectedChangeCategory = serverResponse;\r\n                this.changeCategoryArray[index] = this.utils.copyObject(this.selectedChangeCategory);\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    selectChangeCategory(index){\r\n        if(!index && index != 0) {\r\n            this.selectedChangeCategory = this.emptyChangeCategory();\r\n        } else {\r\n            try{\r\n                this.selectedChangeCategory = this.utils.copyObject(this.changeCategoryArray[index]);\r\n                this.categoryIndex = index;\r\n            } catch (error){\r\n                console.log(error);\r\n                this.selectedChangeCategory = this.emptyChangeCategory();\r\n            }\r\n        }\r\n    }\r\n\r\n    selectChangeCategoryByCategory(category){\r\n        this.changeCategoryArray.forEach((item, index) => {\r\n            if(item.category == category) {\r\n                this.selectedChangeCategory = this.utils.copyObject(item);\r\n                this.categoryIndex = index;\r\n            }\r\n        });\r\n    }\r\n\r\n    emptyChangeCategory(){\r\n        var newCategoryObj = {};\r\n        newCategoryObj.category = \"\";\r\n        return newCategoryObj;\r\n    }\r\n\r\n    async categortInUse(){\r\n        let response = await this.data.get(this.CHANGE_CATEGORY_SERVICE + \"?filter=category|eq|\" + this.selectedChangeCategory.category);\r\n        if(!response.error) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async saveChangeCategory(){\r\n        if(!this.selectedChangeCategory){\r\n            return;\r\n        }\r\n\r\n        if(!this.selectedChangeCategory._id){\r\n            let serverResponse = await this.data.saveObject(this.selectedChangeCategory, this.CHANGE_CATEGORY_SERVICE, \"post\");\r\n            if(!serverResponse.error){\r\n                 this.changeCategoryArray.push(serverResponse);\r\n            } else {\r\n                this.data.processError(serverResponse,\"Error updating the change category.<br>\")\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedChangeCategory, this.CHANGE_CATEGORY_SERVICE, \"put\");\r\n            if(!serverResponse.error){\r\n                this.selectedChangeCategory = serverResponse;\r\n                this.changeCategoryArray[this.categoryIndex] = this.utils.copyObject(this.selectedChangeCategory);\r\n            } else {\r\n                this.data.processError(serverResponse,\"Error updating the change category.<br>\")\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    async deleteChangeCategory(){\r\n        let serverResponse = await this.data.deleteObject(this.CHANGE_CATEGORY_SERVICE + '/' + this.selectedChangeCategory._id);\r\n        if (!serverResponse.error) {\r\n            this.changeCategoryArray.splice(this.editIndex, 1);\r\n            this.editIndex = - 1;\r\n        } else {\r\n            this.data.processError(serverResponse,\"Error deleting the change category.<br>\")\r\n        }\r\n        return serverResponse;\r\n    }\r\n    \r\n}\r\n"],"names":[],"sourceRoot":""}