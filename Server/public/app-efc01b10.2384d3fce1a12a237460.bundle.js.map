{"version":3,"file":"app-efc01b10.2384d3fce1a12a237460.bundle.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAOA;AAAA;AALA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;AC7OA;AACA;AACA;AACA;AAEA;AAWA;AAAA;AARA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACvOA;AACA;AACA;AACA;AAEA;AAMA;AAAA;AAHA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AAEA;AASA;AAAA;AANA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACppBA;AAEA;AAEA;AAQA;AAAA;AANA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AAEA;AAQA;AAAA;AANA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;ACrOA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AA+MA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AACA;AAEA;AAAA;AACA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AAAA;AAzQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiEA;AAEA;;;;;;;;;;;;;;;;;;;;;AC1RA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAAA;AALA;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AClOA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAAA;AAJA;AACA;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvNA;AACA;AACA;AAEA;AAEA;AAKA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC9IA;AACA;AACA;AACA;AACA;AAEA;AAYA;AAAA;AAVA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACryBA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;AClGA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AAEA;AAsBA;AAAA;AApnKA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAAA;AAHA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;AC5NA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAAA;AAJA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;ACxiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://uccss-old-new/./src/resources/data/admin.js","webpack://uccss-old-new/./src/resources/data/apjClientRequests.js","webpack://uccss-old-new/./src/resources/data/auth.js","webpack://uccss-old-new/./src/resources/data/clientRequests.js","webpack://uccss-old-new/./src/resources/data/config.js","webpack://uccss-old-new/./src/resources/data/curriculum.js","webpack://uccss-old-new/./src/resources/data/dataServices.js","webpack://uccss-old-new/./src/resources/data/documents.js","webpack://uccss-old-new/./src/resources/data/downloads.js","webpack://uccss-old-new/./src/resources/data/events.js","webpack://uccss-old-new/./src/resources/data/helpTickets.js","webpack://uccss-old-new/./src/resources/data/inventory.js","webpack://uccss-old-new/./src/resources/data/is4ua.js","webpack://uccss-old-new/./src/resources/data/people.js","webpack://uccss-old-new/./src/resources/data/products.js","webpack://uccss-old-new/./src/resources/data/sessionData.js","webpack://uccss-old-new/./src/resources/data/sessions.js","webpack://uccss-old-new/./src/resources/data/siteInfo.js","webpack://uccss-old-new/./src/resources/data/systems.js","webpack://uccss-old-new/./src/resources/css/styles.css"],"sourcesContent":["import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\n\r\n@inject(DataServices)\r\nexport class AdminData{\r\n\tAUTH_SERVICE = \"/adminLog/\";\r\n\tLOG_SERVICE = \"/log/\";\r\n\tFILES_SERVICE = '/files/';\r\n\tFOREVER_SERVICE = '/pm2Log/'\r\n\r\n\tconstructor(data){\r\n\t\tthis.data = data;\r\n\t}\r\n\r\n\tasync getLogs(type){\r\n\t\tlet url;\r\n\t\tswitch(type){\r\n\t\t\tcase 'auth':\r\n\t\t\t\turl = this.AUTH_SERVICE;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'log':\r\n\t\t\t\turl = this.LOG_SERVICE;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'forl':\r\n\t\t\t\turl = this.FOREVER_SERVICE + 'fileList/out';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'fore':\r\n\t\t\t\turl = this.FOREVER_SERVICE + 'fileList/err';\r\n\t\t\t\tbreak;\r\n\t\t\t// case 'foro':\r\n\t\t\t// \turl = this.FOREVER_SERVICE + 'fileList/o';\r\n\t\t\t// \tbreak;\r\n\t\t}\r\n\t\tlet response = await this.data.get(url);\r\n\t\tif(!response.error){\r\n\t\t\tthis.logFileArray = response;\r\n\t\t} \r\n\t\treturn response;\r\n\r\n\t}\r\n\r\n\tasync getLogFile(fileName, type){ \r\n\t\tif(fileName && type){\r\n\t\t\t\tlet url; \r\n\t\t\tswitch(type){\r\n\t\t\t\tcase 'auth':\r\n\t\t\t\t\turl = this.AUTH_SERVICE;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'log':\r\n\t\t\t\t\turl = this.LOG_SERVICE;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'forl':\r\n\t\t\t\tcase 'fore':\r\n\t\t\t\tcase 'foreo':\r\n\t\t\t\t\turl = this.FOREVER_SERVICE;\r\n\t\t\t}\r\n\t\t\tlet response = await this.data.get(url + fileName);\r\n\t\t\tif(!response.error){\r\n\t\t\t\tthis.logContents = response;\r\n\t\t\t}\r\n\t\t\treturn response;\r\n\t\t}\r\n\t}\r\n\r\n\t// async getAuthLogs(){\r\n\t// \tlet response = await this.data.get(this.AUTH_SERVICE);\r\n\t// \tif(!response.error){\r\n\t// \t\tthis.authLogFileArray = response;\r\n\t// \t} \r\n\t// \treturn response;\r\n\t// }\r\n\r\n\tasync getAuthLogFile(fileName){\r\n\t\tif(fileName){\r\n\t\t\tlet response = await this.data.get(this.AUTH_SERVICE + fileName);\r\n\t\t\tif(!response.error){\r\n\t\t\t\tthis.authLogContents = response;\r\n\t\t\t}\r\n\t\t\treturn response;\r\n\t\t}\r\n\t}\r\n\r\n\tasync deleteAuthFiles(filesToDelete){\r\n\t\tlet obj = {\r\n\t\t\tfiles: filesToDelete\r\n\t\t};\r\n\t\tlet response = await this.data.saveObject(obj, this.AUTH_SERVICE, \"put\");\t\r\n\t\treturn response;\r\n\t}\r\n\r\n\t// async getLogs(){\r\n\t// \tlet response = await this.data.get(this.LOG_SERVICE);\r\n\t// \tif(!response.error){\r\n\t// \t\tthis.authLogFileArray = response;\r\n\t// \t} \r\n\t// \treturn response;\r\n\t// }\r\n\r\n\t// async getLogFile(fileName){\r\n\t// \tif(fileName){\r\n\t// \t\tlet response = await this.data.get(this.LOG_SERVICE + fileName);\r\n\t// \t\tif(!response.error){\r\n\t// \t\t\tthis.logContents = response;\r\n\t// \t\t}\r\n\t// \t\treturn response;\r\n\t// \t}\r\n\t// }\r\n\r\n\tasync deleteLogFiles(filesToDelete){\r\n\t\tlet obj = {\r\n\t\t\tfiles: filesToDelete\r\n\t\t};\r\n\t\tlet response = await this.data.saveObject(obj, this.LOG_SERVICE, \"put\");\t\r\n\t\treturn response;\r\n\t}\r\n\r\n\tasync getFiles(){\r\n\t\tlet response = await this.data.get(this.FILES_SERVICE);\r\n\t\tif(!response.error){\r\n\t\t\tthis.parseFileList(response);\r\n\t\t} \r\n\t\treturn response;\r\n\t}\r\n\r\n\tparseFileList(response){\r\n\t\tthis.files = response;\r\n\t\tthis.filesList = {\r\n\t\t\tname: \"Uploaded Files\",\r\n\t\t\tvalue: \"root\",\r\n\t\t\tfile: false,\r\n\t\t\tchildren: new Array()\r\n\t\t};\r\n\t\tthis.files.forEach(item => {\r\n\t\t\tlet parts = item.split('\\\\');\r\n\t\t\tlet index = this.categoryIndex(parts[2]);\r\n\t\t\tif(index === -1){\r\n\t\t\t\tthis.filesList.children.push({\r\n\t\t\t\t\tname: parts[2],\r\n\t\t\t\t\tvalue: parts[2],\r\n\t\t\t\t\tfile: false,\r\n\t\t\t\t\tchildren: []\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\t\tfor( let index = 0; index < this.files.length; index++){\r\n\t\t\tlet parts = this.files[index].split('\\\\');\r\n\t\t\tlet fileListindex = this.categoryIndex(parts[2]);\r\n\t\t\tif(parts.length === 4){\r\n\t\t\t\tindex = this.processShallowTree(fileListindex, index);\r\n\t\t\t} else {\r\n\t\t\t\tindex = this.processDeepTree(fileListindex, index);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n  \r\n\tprocessShallowTree(fileListindex, index){\r\n\t\tvar parts = this.files[index].split('\\\\');\r\n\t\tvar thisCategory = parts[2];\r\n\t\tvar fileName = parts[3];\r\n\t\tdo {\r\n\t\t\tthis.filesList.children[fileListindex].children.push({\r\n\t\t\t\tname: fileName,\r\n\t\t\t\tvalue: thisCategory +'-'+ fileName,\r\n\t\t\t\tfile: true,\r\n\t\t\t\tpath: this.files[index]\r\n\t\t\t});\r\n\t\t\tindex++;\r\n\t\t\tparts = this.files[index].split('\\\\');\r\n\t\t\tfileName = parts[3];\r\n\t\t} while(thisCategory === parts[2])\r\n\r\n\t\treturn --index;\r\n\t}\r\n\r\n\tprocessDeepTree(fileListindex, index){\r\n\t\tvar parts = this.files[index].split('\\\\');\r\n\t\tvar thisCategory = parts[2];\r\n\t\tvar thisSubCategory = parts[3];\r\n\t\tvar fileName = parts[4];\r\n\t\tthis.filesList.children[fileListindex].children.push({\r\n\t\t\tname: thisSubCategory,\r\n\t\t\tvalue: thisCategory +'-'+ thisSubCategory,\r\n\t\t\tfile: false,\r\n\t\t\tchildren: [{\r\n\t\t\t\tname: fileName,\r\n\t\t\t\tvalue: thisSubCategory + '-' + fileName,\r\n\t\t\t\tfile: true,\r\n\t\t\t\tpath: this.files[index]\r\n\t\t\t}]\r\n\t\t});\r\n\t\tindex++;\r\n\t\tif(index < this.files.length){\r\n\t\tparts = this.files[index].split('\\\\');\r\n\t\tvar childIndex = this.filesList.children[fileListindex].children.length - 1;\r\n\t\twhile(thisSubCategory === parts[3]) {\r\n\t\t\tfileName = parts[4];\r\n\t\t\tthis.filesList.children[fileListindex].children[childIndex].children.push({\r\n\t\t\t\tname: fileName,\r\n\t\t\t\tvalue: thisSubCategory +'-'+ fileName,\r\n\t\t\t\tfile: true,\r\n\t\t\t\tpath: this.files[index]\r\n\t\t\t});\r\n\t\t\tindex++;\r\n\t\t\tif(index < this.files.length) {\r\n\t\t\t\tparts = this.files[index].split('\\\\');\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn --index;\r\n\t}\r\n\r\n\tcategoryIndex(category){\r\n\t\tfor(let i = 0; i < this.filesList.children.length; i++){\r\n\t\tif(this.filesList.children[i].name === category) return i;\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tasync deleteFile(file){\r\n\t\tif(file){ \r\n\t\t\tfile = file.split('\\\\').join('$@');\r\n\t\t\tlet response = await this.data.deleteObject(this.FILES_SERVICE + \"/\" + file);\r\n\t\t\treturn response\r\n\t\t}\r\n\t}\r\n\r\n\tasync renameALogFile(oldFile, newFile){\r\n\t\tif(oldFile && newFile){ \r\n\t\t\toldFile = oldFile.split('\\\\').join('$@');\r\n\t\t\tnewFile = newFile.split('\\\\').join('$@');\t\t\t\r\n\t\t\tlet response = await this.data.saveObject({}, this.FOREVER_SERVICE + \"/rename/\" + oldFile + \"/\" + newFile, \"put\");\r\n\t\t\treturn response\r\n\t\t}\r\n\t}\r\n\r\n}","import { inject } from 'aurelia-framework';\r\nimport { DataServices } from './dataServices';\r\nimport { Utils } from '../utils/utils';\r\nimport { AppConfig } from '../../config/appConfig';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class APJClientRequests {\r\n\r\n  CLIENT_REQUESTS_SERVICES = 'apj/clientRequests';\r\n  CLIENT_REQUEST_DETAILS = 'apj/clientRequestsDetails';\r\n\r\n  CUSTOMER_ACTION = 'clientRequests/customerAction';\r\n  CLIENT_REQUEST_EMAIL = \"clientRequests/sendMail\";\r\n  INVOICE_DATA = \"apj/invoicedata\";\r\n  INVOICES_SERVICE = 'apj/invoices';\r\n\r\n  constructor(data, utils, config) {\r\n    this.data = data;\r\n    this.utils = utils;\r\n    this.config = config;\r\n  }\r\n\r\n  async getClientRequestsDetailsArray(options, refresh) {\r\n    if (!this.requestsArray || refresh) {\r\n      var url = this.CLIENT_REQUEST_DETAILS;\r\n      url += options ? options : \"\";\r\n      try {\r\n        let serverResponse = await this.data.get(url);\r\n        if (!serverResponse.error) {\r\n          this.requestsDetailsArray = serverResponse;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  async getAPJInstitutionRequests(options, refresh) {\r\n    if (!this.apjInstitutionRequestArray || refresh) {\r\n      var url = this.CLIENT_REQUESTS_SERVICES;\r\n      url += options ? options : \"\";\r\n      let response = await this.data.get(url)\r\n      if (!response.error) {\r\n        this.apjInstitutionRequestArray = response;\r\n      } else {\r\n        this.apjInstitutionRequestArray = undefined;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  async getRequestDetail(id) {\r\n\r\n    let serverResponse = await this.data.get(this.CLIENT_REQUEST_DETAILS + \"/\" + id);\r\n    if (!serverResponse.error) {\r\n      this.selectedRequestDetail = serverResponse;\r\n\r\n    } else {\r\n      this.selectedRequestDetail = null;\r\n    }\r\n    return serverResponse;\r\n  }\r\n\r\n  selectRequest(index) {\r\n    if (index === undefined) {\r\n      this.selectedRequest = this.emptyRequest();\r\n    } else {\r\n      try {\r\n        this.selectedRequest = this.utils.copyObject(this.apjInstitutionRequestArray[index]);\r\n        this.editRequestIndex = index;\r\n      } catch (error) {\r\n        console.log(error);\r\n        this.selectedRequest = this.emptyRequest();\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n  emptyRequest() {\r\n    var newObj = new Object();;\r\n    newObj.requestStatus = this.config.UNASSIGNED_REQUEST_CODE;\r\n    newObj.startDate = \"\";\r\n    newObj.endDate = \"\";\r\n    newObj.comments = \"\";\r\n    newObj.requestDetails = new Array();\r\n    newObj.audit = new Array();\r\n    newObj.audit.push({\r\n      event: 'Created',\r\n      eventDate: new Date(),\r\n      personId: \"\"\r\n    })\r\n    return newObj;\r\n  }\r\n\r\n  setTheSelectedRequestDetail(request) {\r\n    this.selectedRequestDetail = this.utils.copyObject(request);\r\n    if (this.requestsDetailsArray) {\r\n      for (let i = 0; i < this.requestsDetailsArray.length; i++) {\r\n        if (this.requestsDetailsArray[i]._id === request._id) {\r\n          this.requestDetailIndex = i;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  emptyRequestDetail() {\r\n    var newObj = new Object();;\r\n    newObj.createdDate = new Date();\r\n    newObj.modifiedDate = new Date();\r\n    newObj.requestStatus = this.config.UNASSIGNED_REQUEST_CODE;\r\n    return newObj;\r\n  }\r\n\r\n  async saveRequestDetail() {\r\n    if (!this.selectedRequestDetail) {\r\n      return;\r\n    }\r\n    let response = await this.data.saveObject(this.selectedRequestDetail, this.CLIENT_REQUEST_DETAILS, \"put\");\r\n    if (!response.error) {\r\n      this.selectedRequestDetail = response;\r\n      this.requestsDetailsArray[this.requestDetailIndex] = this.utils.copyObject(this.selectedRequestDetail);\r\n      return response;\r\n    }\r\n  }\r\n\r\n  setSelectedRequest(request) {\r\n    this.selectedRequest = this.utils.copyObject(request);\r\n  }\r\n\r\n  async assignRequest(index) {\r\n    if (!this.selectedRequest) {\r\n      return;\r\n    }\r\n    var url = this.CLIENT_REQUESTS_SERVICES + '/assign';\r\n    var serverResponse = await this.data.saveObject(this.selectedRequest, url, \"put\");\r\n    if (!serverResponse.error) {\r\n      this.selectedRequestDetail = serverResponse;\r\n      // if(!this.selectedRequestDetail.requestId.courseId || this.selectedRequestDetail.requestId.courseId === null){\r\n      //   this.selectedRequestDetail.requestId.courseId = {_id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME};\r\n      // }\r\n      this.requestsDetailsArray[index] = this.utils.copyObject(this.selectedRequestDetail);\r\n    }\r\n    return serverResponse;\r\n  }\r\n\r\n  async saveRequest() {\r\n    if (!this.selectedRequest) {\r\n      return;\r\n    }\r\n    var url = this.CLIENT_REQUESTS_SERVICES;\r\n\r\n    if (!this.selectedRequest._id) {\r\n      let serverResponse = await this.data.saveObject(this.selectedRequest, url, \"post\");\r\n      if (!serverResponse.error) {\r\n        if (this.requestsArray) {\r\n          this.requestsArray.push(this.selectedRequest);\r\n        }\r\n      }\r\n      return serverResponse;\r\n    } else {\r\n      var serverResponse = await this.data.saveObject(this.selectedRequest, url, \"put\");\r\n      if (!serverResponse.error) {\r\n        if (this.requestsArray && this.editRequestIndex) {\r\n          this.requestsArray[this.editRequestIndex] = this.utils.copyObject(this.selectedRequest);\r\n        }\r\n      }\r\n      return serverResponse;\r\n    }\r\n  }\r\n\r\n  async saveRequestWithId() {\r\n    if (!this.selectedRequest) {\r\n      return;\r\n    }\r\n\r\n    var serverResponse = await this.data.saveObject(this.selectedRequest, this.CLIENT_REQUESTS_SERVICES + \"/\" + this.selectedRequest._id, \"put\");\r\n    if (!serverResponse.error) {\r\n      if (this.requestsArray && this.editRequestIndex) {\r\n        this.requestsArray[this.editRequestIndex] = this.utils.copyObject(this.selectedRequest);\r\n      }\r\n    }\r\n    return serverResponse;\r\n  }\r\n\r\n  async getInvoiceDataArray(options, refresh) {\r\n    if (!this.invoiceDataArray || refresh) {\r\n      var url = this.INVOICE_DATA;\r\n      url += options ? options : \"\";\r\n      try {\r\n        let serverResponse = await this.data.get(url);\r\n        if (!serverResponse.error) {\r\n          this.invoiceDataArray = serverResponse;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  async getInvoices(options){\r\n    var url = this.INVOICES_SERVICE;\r\n      url += options ? options : \"\";\r\n      try {\r\n        let serverResponse = await this.data.get(url);\r\n        if (!serverResponse.error) {\r\n          this.invoicesArray = serverResponse;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n  }\r\n\r\n  async saveInvoice(invoiceToSave) {\r\n    if (!invoiceToSave) {\r\n      return;\r\n    }\r\n    let response = await this.data.saveObject(invoiceToSave, this.INVOICES_SERVICE, \"post\");\r\n    if (!response.error) {\r\n      return response;\r\n    }\r\n  }\r\n\r\n  async createPDF(object) {\r\n    let url = 'apj/invoices/createPDF';\r\n    // let object = {page: html};\r\n    let serverResponse = await this.data.saveObject(object, url, \"post\");\r\n    return serverResponse;\r\n    // http://localhost/api/apj/invoices/createPDF\r\n  }\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport {EventAggregator} from 'aurelia-event-aggregator';\r\nimport {DataServices} from './dataServices';\r\nimport {AppConfig} from '../../config/appConfig';\r\n \r\n@inject(EventAggregator, DataServices, AppConfig)\r\nexport class Auth {\r\n\r\n\tloginUrl = 'users/login';\r\n\tlogoutUrl = 'users/logout';\r\n\r\n\tconstructor(eventAggregator, data, config){\r\n\t\tthis.eventAggregator = eventAggregator;\r\n\t\tthis.data = data;\r\n\t\tthis.config = config;\r\n\t}\r\n\r\n\tasync login(email, password) {\r\n\t\tlet content = {\r\n\t\t\t'email': email,\r\n\t\t\t'password': password\r\n\t\t};\r\n\r\n\t\tlet response = await this.data.login(content, this.loginUrl);\r\n\t\tif(!response.error){\r\n\t\t\tresponse.user.userRole = this.setRole(response.user.roles);\r\n\t\t\t\r\n\t\t\tsessionStorage.setItem('token', response.token);\r\n\t\t\tsessionStorage.setItem('user', JSON.stringify(response.user));\r\n\t\t\tthis.config.token = response.token;\r\n\t\t\tthis.config.user = response.user;\r\n\t\t\t\r\n\t\t}\r\n\t\tthis.eventAggregator.publish('auth:login', response);\r\n\t\treturn response;\r\n\t}\r\n\r\n\tlogout(email){\r\n\t\tthis.data.saveObject({email: email}, this.logoutUrl,'post');\r\n\t\tsessionStorage.removeItem('token');\r\n\t\tsessionStorage.removeItem('user');\r\n\t\tsessionStorage.removeItem('role');\r\n\t\tsessionStorage.removeItem('alert');\r\n\t}\r\n\r\n\tisAuthenticated() {\r\n\t\tlet token = sessionStorage.getItem('token');\r\n\r\n\t\t// There's no token, so user is not authenticated.\r\n\t\tif (!token) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// There is a token, but in a different format. Return true.\r\n\t\tif (token.split('.').length !== 3) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tlet exp;\r\n\t\ttry {\r\n\t\t\tlet base64Url = token.split('.')[1];\r\n\t\t\tlet base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n\t\t\texp = JSON.parse(window.atob(base64)).exp;\r\n\t\t} catch (error) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (exp) {\r\n\t\t\treturn Math.round(new Date().getTime() / 1000) <= exp;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*****************************************************************************\r\n * Determine users role for authorizations\r\n ****************************************************************************/\r\nsetRole(roles){\r\n\tlet userRole = 1;\r\n\r\n\tfor(let i = 0; i < roles.length; i++){\r\n\t\tthis.config.ROLES.forEach(item => {\r\n\t\t\tif(roles[i] == item.role){\r\n\t\t\t\tuserRole = item.authLevel > userRole ? item.authLevel : userRole;\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\treturn userRole;\r\n}\r\n\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\nimport {Utils} from '../utils/utils';\r\nimport {AppConfig} from '../../config/appConfig';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class ClientRequests {\r\n\r\n  CLIENT_REQUESTS_SERVICES = 'clientRequests';\r\n  CLIENT_REQUEST_DETAILS='clientRequestsDetails';\r\n  CLIENT_REQUEST_LOCK_SERVICES = 'clientRequestLocks';\r\n  CUSTOMER_ACTION = 'clientRequests/customerAction';\r\n  CLIENT_REQUEST_EMAIL = \"clientRequests/sendMail\";\r\n\r\n    constructor(data, utils, config) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n        this.config = config;\r\n    }\r\n\r\n    async getClientRequestsArray(options, refresh){\r\n        if (!this.requestsArray || refresh) {\r\n          var url = this.CLIENT_REQUESTS_SERVICES;\r\n          url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.requestsArray = serverResponse;\r\n                }  else {\r\n                    this.data.processError(serverResponse);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getActiveClientRequestsArray(personId, sessions){\r\n        var url = this.CLIENT_REQUESTS_SERVICES;\r\n        url += \"/\" + personId + \"/\" + sessions\r\n        try {\r\n            let serverResponse = await this.data.get(url);\r\n            if (!serverResponse.error) {\r\n                this.requestsArray = serverResponse;\r\n            } else {\r\n               this.requestsArray = new Array()\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n          \r\n        }\r\n    }\r\n\r\n    async getRequest(id){\r\n         try {\r\n            let serverResponse = await this.data.get(this.CLIENT_REQUESTS_SERVICES + \"/\" + id);\r\n            if (!serverResponse.error) {\r\n                this.selectedRequest = serverResponse;\r\n            } else {\r\n                this.selectedRequest = null;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    selectRequest(index){\r\n        if (index === undefined) {\r\n            this.selectedRequest = this.emptyRequest();\r\n        } else {\r\n            try {\r\n                this.selectedRequest = this.utils.copyObject(this.requestsArray[index]);\r\n                this.editRequestIndex = index;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.selectedRequest = this.emptyRequest();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    selectRequstById(id){\r\n      this.selectedRequest = null;\r\n      for(var i = 0; i < this.requestsArray.length; i++){\r\n        if(this.requestsArray[i]._id === id){\r\n          this.selectedRequest = this.utils.copyObject(this.requestsArray[i]);\r\n           this.editRequestIndex = i;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    setSelectedRequest(request){\r\n      this.selectedRequest = this.utils.copyObject(request);\r\n    }\r\n\r\n    emptyRequest(){\r\n        var newObj = new Object();;\r\n        newObj.requestStatus = this.config.UNASSIGNED_REQUEST_CODE;\r\n        newObj.undergradIds = 0;\r\n        newObj.graduateIds = 0;\r\n        newObj.startDate = \"\";\r\n        newObj.endDate = \"\";\r\n        newObj.addUndergraduates = 0;\r\n        newObj.addGraduates = 0;\r\n        newObj.comments = \"\";\r\n        newObj.requestDetails = new Array();\r\n        newObj.audit = new Array();\r\n        newObj.audit.push({\r\n            event: 'Created',\r\n            eventDate: new Date(),\r\n            personId: \"\"\r\n        })\r\n        return newObj;\r\n    }\r\n\r\n    async getCurrentCount(options){\r\n       var url = this.CLIENT_REQUESTS_SERVICES +'/current/count';\r\n       url += options ? options : \"\";\r\n       var response = await this.data.get(url);\r\n       if (!response.error) {\r\n           this.unassignedRequests = this.utils.countItems(this.config.UNASSIGNED_REQUEST_CODE, 'requestStatus', response);\r\n           this.updatedRequests =  this.utils.countItems(this.config.UPDATED_REQUEST_CODE, 'requestStatus', response);\r\n           this.customerActionRequests =  this.utils.countItems(this.config.CUSTOMER_ACTION_REQUEST_CODE, 'requestStatus', response);\r\n           return response.count;\r\n       } else {\r\n           return null;\r\n       }\r\n    }\r\n\r\n    async getClientRequestsDetailsArray(options, refresh){\r\n        if (!this.requestsArray || refresh) {\r\n          var url = this.CLIENT_REQUEST_DETAILS; \r\n          url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.requestsDetailsArray = serverResponse;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getClientRequestsDetailsArrayAnalytics(options, refresh){\r\n        if (!this.requestsArray || refresh) {\r\n          var url = this.CLIENT_REQUEST_DETAILS + \"/analytics\"; \r\n          url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.requestsDetailsArrayAnalytics = serverResponse;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getClientRequestsDetailFaccoArray(sessionId, institutionId, refresh){\r\n        if(!this.requestsDetailsArray || !this.requestsDetailsArray.length || refresh){\r\n            let serverResponse = await this.data.get(this.CLIENT_REQUEST_DETAILS + '/' + sessionId + '/' + institutionId);\r\n            if (!serverResponse.error) {\r\n                this.requestsDetailsArray = serverResponse;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    async saveRequestWithId(){\r\n        if(!this.selectedRequest){\r\n            return;\r\n        }\r\n\r\n        var serverResponse = await this.data.saveObject(this.selectedRequest, this.CLIENT_REQUESTS_SERVICES + \"/\" + this.selectedRequest._id, \"put\");\r\n            if(!serverResponse.error){\r\n                if(this.requestsArray && this.editRequestIndex){\r\n                    this.requestsArray[this.editRequestIndex]  = this.utils.copyObject(this.selectedRequest);\r\n                }\r\n            }\r\n            return serverResponse;\r\n    }\r\n\r\n    async saveRequest(email){\r\n        if(!this.selectedRequest){\r\n            return;\r\n        }\r\n        var url =  this.CLIENT_REQUESTS_SERVICES; \r\n\r\n        if(!this.selectedRequest._id){\r\n            let serverResponse = await this.data.saveObject(this.selectedRequest, url, \"post\");\r\n            if(!serverResponse.error){\r\n                if(email.email){\r\n                    email.clientRequestNo = serverResponse.clientRequestNo;\r\n                    email.reason = 1;\r\n                    this.data.saveObject(email, this.CLIENT_REQUEST_EMAIL, \"post\");\r\n                }\r\n                if(this.requestsArray){\r\n                    this.requestsArray.push(this.selectedRequest);\r\n                }\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedRequest, url, \"put\");\r\n            if(!serverResponse.error){\r\n                 if(email.email){\r\n                    email.requestNo = this.selectedRequest.requestNo;\r\n                     email.reason = 2;\r\n                    this.data.saveObject(email, this.CLIENT_REQUEST_EMAIL, \"post\");\r\n                }\r\n                if(this.requestsArray && this.editRequestIndex){\r\n                    this.requestsArray[this.editRequestIndex]  = this.utils.copyObject(this.selectedRequest);\r\n                }\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    async deleteAssignment(index){\r\n         if(!this.selectedRequest){\r\n            return;\r\n        }\r\n        var url =  this.CLIENT_REQUESTS_SERVICES + \"/deleteAssignment\";\r\n        var serverResponse = await this.data.saveObject(this.selectedRequest, url, \"put\");\r\n        if(!serverResponse.error){\r\n            this.selectedRequestDetail = serverResponse;\r\n            if(!this.selectedRequestDetail.requestId.courseId || this.selectedRequestDetail.requestId.courseId === null){\r\n                this.selectedRequestDetail.requestId.courseId = {_id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME};\r\n            }\r\n            this.requestsDetailsArray[index]  = this.utils.copyObject(this.selectedRequestDetail);\r\n        }\r\n        return serverResponse;\r\n\r\n    }\r\n\r\n    updateStatuses(updateIds, status){\r\n        for(let i = 0; i < this.requestsDetailsArray.length; i++){\r\n           if(updateIds.indexOf(this.requestsDetailsArray[i]._id) > -1){\r\n               this.requestsDetailsArray[i].requestStatus = status;\r\n               this.requestsDetailsArray[i].requestId.requestStatus = status;\r\n           }\r\n        }\r\n    }\r\n\r\n    async assignRequest(index, email){\r\n        if(!this.selectedRequest){\r\n            return;\r\n        }\r\n        var url = email ? this.CLIENT_REQUESTS_SERVICES + '/assign/?email=1' : this.CLIENT_REQUESTS_SERVICES + '/assign';\r\n         var serverResponse = await this.data.saveObject(this.selectedRequest, url, \"put\");\r\n        if(!serverResponse.error){\r\n            if(email && email.email){\r\n                this.data.saveObject(email, this.CLIENT_REQUEST_EMAIL, \"post\");\r\n            }\r\n            this.selectedRequestDetail = serverResponse;\r\n            if(!this.selectedRequestDetail.requestId.courseId || this.selectedRequestDetail.requestId.courseId === null){\r\n              this.selectedRequestDetail.requestId.courseId = {_id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME};\r\n            }\r\n            this.requestsDetailsArray[index]  = this.utils.copyObject(this.selectedRequestDetail);\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    async deleteRequest(){\r\n        if(!this.selectedRequestDetail._id){\r\n            return;\r\n        }\r\n\r\n        if(this.selectedRequestDetail.requestId){\r\n            let serverResponse = await this.data.deleteObject(this.CLIENT_REQUEST_DETAILS + '/' + this.selectedRequestDetail._id + '/' + this.selectedRequestDetail.requestId._id);\r\n            if (!serverResponse.error) {\r\n                this.requestsDetailsArray.splice(this.requestDetailIndex, 1);\r\n                return serverResponse;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        } else {\r\n            let serverResponse = await this.data.deleteObject(this.CLIENT_REQUEST_DETAILS + '/' + this.selectedRequestDetail._id);\r\n            if (!serverResponse.error) {\r\n                this.requestsDetailsArray.splice(this.requestDetailIndex, 1);\r\n                return serverResponse;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    isRequestDirty(obj, skip){ \r\n      if(this.selectedRequest){\r\n          if(!obj){\r\n              var obj = this.emptyRequest();\r\n          }\r\n            if(!skip) skip = new Array();\r\n            skip.push('audit');\r\n            return this.utils.objectsEqual(this.selectedRequest, obj, skip);\r\n        }\r\n        return new Array();\r\n    }\r\n\r\n    selectRequestDetail(index){\r\n          if(index === undefined || index > this.requestsDetailsArray.length - 1){\r\n              this.emptyRequestDetail();\r\n          } else {\r\n              this.selectedRequestDetail = this.requestsDetailsArray[index];\r\n              this.requestDetailIndex = index;\r\n          }\r\n          return this.selectedRequestDetail;\r\n    }\r\n\r\n    async getRequestDetail(id){\r\n        \r\n        let serverResponse = await this.data.get(this.CLIENT_REQUEST_DETAILS + \"/\" + id);\r\n        if (!serverResponse.error) {\r\n            this.selectedRequestDetail = serverResponse;\r\n            \r\n        } else {\r\n            this.selectedRequestDetail = null;\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    selectRequestDetailFromId(id){\r\n        this.requestsDetailsArray.forEach((item, index) => {\r\n          if(item._id === id){\r\n            this.selectedRequestDetail = this.utils.copyObject(item);\r\n            this.requestDetailIndex = index;\r\n            return;\r\n          }\r\n        });\r\n        return null;\r\n    }\r\n\r\n    setTheSelectedRequestDetail(request){\r\n      this.selectedRequestDetail = this.utils.copyObject(request);\r\n      if(this.requestsDetailsArray) {\r\n          for(let i = 0; i < this.requestsDetailsArray.length; i++){\r\n              if(this.requestsDetailsArray[i]._id === request._id) {\r\n                  this.requestDetailIndex = i;\r\n                   break;\r\n              }\r\n          }\r\n      }\r\n    }\r\n\r\n    emptyRequestDetail(){\r\n        var newObj = new Object();;\r\n        newObj.createdDate = new Date();\r\n        newObj.modifiedDate = new Date();\r\n        newObj.requestStatus = this.config.UNASSIGNED_REQUEST_CODE;\r\n        return newObj;\r\n    }\r\n\r\n    async saveRequestDetail(){\r\n        if(!this.selectedRequestDetail){ \r\n            return;\r\n        }\r\n        let response = await this.data.saveObject(this.selectedRequestDetail, this.CLIENT_REQUEST_DETAILS, \"put\");\r\n        if(!response.error){\r\n            this.selectedRequestDetail = response;\r\n            if(!this.selectedRequestDetail.requestId.courseId || this.selectedRequestDetail.requestId.courseId === null){\r\n              this.selectedRequestDetail.requestId.courseId = {_id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME};\r\n            }\r\n            this.requestsDetailsArray[this.requestDetailIndex] = this.utils.copyObject(this.selectedRequestDetail);\r\n            return response;\r\n        }\r\n    }\r\n\r\n    isRequestDetailDirty(obj, skip){\r\n      if(this.selectedRequestDetail){\r\n          if(!obj){\r\n              var obj = this.emptyRequestDetail();\r\n          }\r\n            var skip = skip ? skip : new Array();\r\n            skip.push('audit');\r\n            return this.utils.objectsEqual(this.selectedRequestDetail, obj, skip);\r\n        }\r\n        return new Array();\r\n    }\r\n\r\n    async getClientRequest(id){\r\n         let serverResponse = await this.data.get(this.CLIENT_REQUEST_DETAILS + '/' + id);\r\n        if (!serverResponse.error) {\r\n            this.selectedRequest = serverResponse;\r\n        } \r\n        return serverResponse;\r\n    }\r\n\r\n    async getSessionCount(sessionArray, numSessions, options, requestStatus){\r\n      var url = this.CLIENT_REQUESTS_SERVICES;\r\n      url += options ? options : \"\";\r\n      var response = await this.data.get(url);\r\n      if(!response.error){\r\n          var sessions = new Array();\r\n          var sessionCount = new Array();\r\n          numSessions = numSessions < sessionArray.length ? numSessions : sessionArray.length - 1;\r\n          for(var i = 0; i <= numSessions; i++){\r\n              sessions.push(sessionArray[i]._id);\r\n              sessionCount.push({count: 0, session: sessionArray[i].session});\r\n          }\r\n          requestStatus = requestStatus ? requestStatus.split(':') : undefined;\r\n          response.forEach((request) => {\r\n              var index = sessions.indexOf(request.sessionId);\r\n              if( index > -1){\r\n                  if(requestStatus){\r\n                      request.requestDetails.forEach((detail) => {\r\n                          if(requestStatus.indexOf(detail.requestStatus) > -1) {\r\n                              sessionCount[index].count += 1;\r\n                          }\r\n                      });\r\n                  } else {\r\n                      sessionCount[index].count += request.requestDetails.length;\r\n                  }\r\n\r\n              }\r\n          });\r\n         return sessionCount;\r\n      }\r\n    }\r\n\r\n    async sendCustomerMessage(message){\r\n        console.log(message)\r\n        var serverResponse = await this.data.saveObject(message, this.CLIENT_REQUEST_EMAIL, \"post\");\r\n        return serverResponse;\r\n    }\r\n\r\n    updateDetailStatuses(selectedRequestNo, status){\r\n        this.requestsDetailsArray.forEach(item => {\r\n            if(item.requestId && item.requestId.clientRequestNo == selectedRequestNo){\r\n                if(item.requestStatus != this.config.ASSIGNED_REQUEST_CODE) item.requestStatus = status;\r\n            }\r\n        })\r\n    }\r\n\r\n    updateDetailStatus(id, status){\r\n         this.requestsDetailsArray.forEach(item => {\r\n            if(item.requestId._id == id){\r\n                if(item.requestStatus != this.config.ASSIGNED_REQUEST_CODE) item.requestStatus = status;\r\n            }\r\n        })\r\n    }\r\n\r\n    async groupRequestsByInstitutionCountry(){\r\n        if(!this.requestsDetailsArrayAnalytics) {\r\n            return;\r\n        }\r\n        var sortedArray = new Array();\r\n        this.requestsDetailsArrayAnalytics.forEach(item => {\r\n            if(item['requestId'] &&  item['requestId'].institutionId && item['productId'] && item['productId'].name ){\r\n                item.sortValue = item['requestId'].institutionId.name + item['productId'].name;\r\n                sortedArray.push(item);\r\n            } \r\n        });\r\n\r\n        var sortedArray = this.requestsDetailsArrayAnalytics \r\n            .sort((a, b) => {\r\n                var result = (a.sortValue < b.sortValue) ? -1 : (a.sortValue > b.sortValue) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.analyticsInstitutionCountryResultArray = new Array(); \r\n        var instID = \"\";\r\n        var templateObj = new Object();\r\n        var that = this;\r\n        sortedArray.forEach(function(item){\r\n            // if(item.requestId){\r\n                if(item.sortValue != instID){\r\n                    instID = item.sortValue;\r\n                    var obj = that.utils.copyObject(templateObj);\r\n                    obj.name = item.requestId.institutionId.name;\r\n                    obj.institutionId = item.requestId.institutionId._id;\r\n                    obj.person = item.requestId.clientRequestsDetails.fullName;\r\n                    obj.productName = item.productId.name;\r\n                    obj.country = item.requestId.institutionId.country;\r\n                    obj.total = 0;\r\n                    obj.students = 0;\r\n                    that.analyticsInstitutionCountryResultArray.push(obj);\r\n                }\r\n                // if(item.requestStatus != skip){\r\n                    that.analyticsInstitutionCountryResultArray[that.analyticsInstitutionCountryResultArray.length-1]['total'] += 1;\r\n                    that.analyticsInstitutionCountryResultArray[that.analyticsInstitutionCountryResultArray.length-1]['students'] += parseInt(item.requestId.undergradIds) + parseInt(item.requestId.graduateIds);\r\n                    // var gradIds = item.requestId.graduateIds != null ? parseInt(item.requestId.graduateIds) : 0;\r\n                    // var underIds = item.requestId.undergradIds != null ? parseInt(item.requestId.undergradIds) : 0;\r\n                    // that.analyticsInstitutionResultArray[that.analyticsInstitutionResultArray.length-1]['studentIds'] += gradIds + underIds;\r\n                    // that.analyticsInstitutionResultArray[that.analyticsInstitutionResultArray.length-1]['studentIds'] += parseInt(item.requestId.graduateIds) + parseInt(item.requestId.undergradIds);\r\n                // }\r\n                // that.analyticsInstitutionResultArray[that.analyticsInstitutionResultArray.length-1][item.requestStatus] += 1;\r\n            // }\r\n          \r\n        })\r\n    }\r\n\r\n    async groupRequestsByInstitution(){\r\n        if(!this.requestsDetailsArrayAnalytics) {\r\n            return;\r\n        }\r\n        var sortedArray = this.requestsDetailsArrayAnalytics \r\n            .sort((a, b) => {\r\n                if(!a['requestId'] || !b['requestId'] || !a['requestId'].institutionId || !b['requestId'].institutionId ) return -1;\r\n                var result = (a['requestId'].institutionId.name < b['requestId'].institutionId.name) ? -1 : (a['requestId'].institutionId.name > b['requestId'].institutionId.name) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.analyticsInstitutionResultArray = new Array();\r\n        var instID = \"\";\r\n        var numStatuses = this.config.REQUEST_STATUS.length;\r\n        var templateObj = new Object();\r\n         templateObj['total'] = 0;\r\n         templateObj['studentIds'] = 0;\r\n        for(var i = 0; i < numStatuses; i++){\r\n            templateObj[this.config.REQUEST_STATUS[i].code] = 0;\r\n            if(this.config.REQUEST_STATUS[i].description === \"Cancelled\") {\r\n                var skip = this.config.REQUEST_STATUS[i].code;\r\n            }\r\n        }\r\n        var that = this;\r\n        sortedArray.forEach(function(item){\r\n            if(item.requestId){\r\n                if(item.requestId.institutionId && item.requestId.institutionId.name != instID){\r\n                    instID = item.requestId.institutionId.name;\r\n                    var obj = that.utils.copyObject(templateObj);\r\n                    obj.name = item.requestId.institutionId.name;\r\n                    obj.institutionId = item.requestId.institutionId._id;\r\n                    that.analyticsInstitutionResultArray.push(obj);\r\n                }\r\n                if(item.requestStatus != skip){\r\n                    that.analyticsInstitutionResultArray[that.analyticsInstitutionResultArray.length-1]['total'] += 1;\r\n                    var gradIds = item.requestId.graduateIds != null ? parseInt(item.requestId.graduateIds) : 0;\r\n                    var underIds = item.requestId.undergradIds != null ? parseInt(item.requestId.undergradIds) : 0;\r\n                    that.analyticsInstitutionResultArray[that.analyticsInstitutionResultArray.length-1]['studentIds'] += gradIds + underIds;\r\n                    // that.analyticsInstitutionResultArray[that.analyticsInstitutionResultArray.length-1]['studentIds'] += parseInt(item.requestId.graduateIds) + parseInt(item.requestId.undergradIds);\r\n                }\r\n                that.analyticsInstitutionResultArray[that.analyticsInstitutionResultArray.length-1][item.requestStatus] += 1;\r\n            }\r\n          \r\n        })\r\n        \r\n    }\r\n\r\n    groupRequestsByProduct(){\r\n         if(!this.requestsDetailsArrayAnalytics) {\r\n            return;\r\n        }\r\n        var sortedArray = this.requestsDetailsArrayAnalytics \r\n            .sort((a, b) => {\r\n                if(!a.productId || !b.productId) return -1;\r\n                var result = (a.productId.name < b.productId.name) ? -1 : (a.productId.name > b.productId.name) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.analyticsProductsResultArray = new Array();\r\n        var prodID = \"\";\r\n        var numStatuses = this.config.REQUEST_STATUS.length;\r\n        var templateObj = new Object();\r\n        templateObj['total'] = 0;\r\n        templateObj['studentIds'] = 0;\r\n        for(var i = 0; i < numStatuses; i++){\r\n            templateObj[this.config.REQUEST_STATUS[i].code] = 0;\r\n            if(this.config.REQUEST_STATUS[i].description === \"Cancelled\") {\r\n                var skip = this.config.REQUEST_STATUS[i].code;\r\n            }            \r\n        }\r\n\r\n        sortedArray.forEach(item => {\r\n            if(item.productId.name != prodID){ \r\n                prodID = item.productId.name;\r\n                var obj = this.utils.copyObject(templateObj);\r\n                obj.productId = item.productId;\r\n                obj.country = item.requestId.institutionId.country;\r\n                this.analyticsProductsResultArray.push(obj);\r\n            }\r\n            if(item.requestStatus != skip){\r\n                this.analyticsProductsResultArray[this.analyticsProductsResultArray.length-1]['total'] += 1;\r\n                var gradIds = item.requestId.graduateIds != null ? parseInt(item.requestId.graduateIds) : 0;\r\n                var underIds = item.requestId.undergradIds != null ? parseInt(item.requestId.undergradIds) : 0;\r\n                this.analyticsProductsResultArray[this.analyticsProductsResultArray.length-1]['studentIds'] += gradIds + underIds;\r\n            }            \r\n            this.analyticsProductsResultArray[this.analyticsProductsResultArray.length-1][item.requestStatus] += 1;\r\n        })\r\n    }\r\n\r\n    fieldSorter(fields) {\r\n        return (a, b) => fields.map(o => {\r\n            let dir = 1;\r\n            if (o[0] === '-') { dir = -1; o=o.substring(1); }\r\n            return a[o] > b[o] ? dir : a[o] < b[o] ? -(dir) : 0;\r\n        }).reduce((p,n) => p ? p : n, 0);\r\n    }\r\n\r\n    groupRequestsByCountry(){\r\n        if(!this.requestsDetailsArrayAnalytics) {\r\n            return;\r\n        }\r\n\r\n        var preSortedArray = this.requestsDetailsArrayAnalytics.forEach(item => {\r\n            if(item.requestId.institutionId && item.requestId.institutionId.country && item.productId.name) {\r\n                item.sortProperty = item.requestId.institutionId.country + item.productId.name;\r\n            } else { \r\n                item.sortProperty = \"ZZZZ\";\r\n            }\r\n            \r\n        });\r\n\r\n        var sortedArray = this.requestsDetailsArrayAnalytics.sort((a, b) =>{\r\n            var result = (a.sortProperty < b.sortProperty) ? -1 : (a.sortProperty > b.sortProperty) ? 1 : 0;\r\n            return result;\r\n        });\r\n\r\n        this.analyticsCountryProductsResultArray = new Array();\r\n        var prodID = \"\";\r\n        var country = \"\";\r\n        var numStatuses = this.config.REQUEST_STATUS.length;\r\n        var templateObj = new Object();\r\n        templateObj['total'] = 0;\r\n        templateObj['studentIds'] = 0;\r\n        for(var i = 0; i < numStatuses; i++){\r\n            templateObj[this.config.REQUEST_STATUS[i].code] = 0;\r\n            if(this.config.REQUEST_STATUS[i].description === \"Cancelled\") {\r\n                var skip = this.config.REQUEST_STATUS[i].code;\r\n            }            \r\n        }\r\n\r\n        sortedArray.forEach(item => {\r\n            if(item.productId.name != prodID || item.requestId.institutionId.country != country){ \r\n                prodID = item.productId.name;\r\n                country = item.requestId.institutionId ? item.requestId.institutionId.country : \"\";\r\n                var obj = this.utils.copyObject(templateObj);\r\n                obj.productId = item.productId;\r\n                obj.country = item.requestId.institutionId ? item.requestId.institutionId.country : \"\";\r\n                this.analyticsCountryProductsResultArray.push(obj);\r\n            }\r\n            if(item.requestStatus != skip){\r\n                this.analyticsCountryProductsResultArray[this.analyticsCountryProductsResultArray.length-1]['total'] += 1;\r\n                var gradIds = item.requestId.graduateIds != null ? parseInt(item.requestId.graduateIds) : 0;\r\n                var underIds = item.requestId.undergradIds != null ? parseInt(item.requestId.undergradIds) : 0;\r\n                this.analyticsCountryProductsResultArray[this.analyticsCountryProductsResultArray.length-1]['studentIds'] += gradIds + underIds;\r\n            }            \r\n            this.analyticsCountryProductsResultArray[this.analyticsCountryProductsResultArray.length-1][item.requestStatus] += 1;\r\n        })\r\n    }\r\n\r\n    lockRequest(obj){\r\n        if(obj.requestId) {\r\n            var response = this.data.saveObject(obj, this.CLIENT_REQUEST_LOCK_SERVICES, \"post\");\r\n        }\r\n    }\r\n\r\n    async getRequestLock(id){\r\n        var response = await this.data.get(this.CLIENT_REQUEST_LOCK_SERVICES + \"/\" + id);\r\n        if (!response.error) {\r\n                return response;\r\n        } else {\r\n                this.data.processError(response, \"There was an error retrieving the help ticket lock.\");\r\n        }\r\n    }\r\n\r\n    async removeRequestLock(id){\r\n        await this.data.deleteObject(this.CLIENT_REQUEST_LOCK_SERVICES + \"/\" + id);\r\n    }\r\n}\r\n","import {inject} from 'aurelia-framework';\r\n\r\nimport {DataServices} from './dataServices';\r\n\r\n@inject(DataServices)\r\nexport class Config {\r\n    CONFIG_SERVICE = 'config';\r\n    SESSIONS_CONFIG_SERVICE = 'semesterConfig';\r\n\r\n    token;\r\n\tuser;\r\n\r\n    constructor(data) {\r\n        this.data = data;   \r\n    }\r\n\r\n    async getConfigArray(refresh, options) {\r\n        if (!this.configArray || refresh) {\r\n            var url = this.data.CONFIG_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.configArray = serverResponse;\r\n                } else {\r\n                    this.data.processError(serverResponse);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async saveAll(saveConfigArray){\r\n        if(saveConfigArray){\r\n            var saveObj = {parameters: saveConfigArray};\r\n            let response = await this.data.saveObject(saveObj, this.CONFIG_SERVICE + '/saveAll', \"put\")\r\n            if (!response.error) {\r\n                return response;\r\n            }  else {\r\n                this.data.processError(response, \"There was an error updating the configuration.\");\r\n            }\r\n            return response;\r\n        }\r\n        return null;\r\n    }\r\n\r\n     async saveSessions(saveSessionArray){\r\n        if(saveSessionArray){\r\n            let response = await this.data.saveObject(saveSessionArray, this.SESSIONS_CONFIG_SERVICE, \"put\")\r\n            if (!response.error) {\r\n                return response;\r\n            }  else {\r\n                this.data.processError(response, \"There was an error updating the configuration.\");\r\n            }\r\n            return response;\r\n        }\r\n        return null;\r\n    }\r\n}","import {inject} from 'aurelia-framework';\r\nimport {Utils} from '../utils/utils';\r\nimport {DataServices} from './dataServices';\r\n\r\n@inject(DataServices, Utils)\r\nexport class Curriculum {\r\n    curriculumArray = undefined;\r\n\tcurriculumCatArray = undefined;\r\n\r\n    CURRICULUM_SERVICE = 'curriculum';\r\n    CURRICULUM_CATEGORY_SERVICE = 'curriculumcategory';\r\n\r\n    constructor(data, utils) {\r\n        this.data = data;\r\n\t\tthis.utils = utils;   \r\n    }\r\n\r\n    async getCurriculumArray(refresh, options) {\r\n        if (!this.configArray || refresh) {\r\n            var url = this.CURRICULUM_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.curriculumArray = serverResponse;\r\n                } else {\r\n                    this.data.processError(serverResponse);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n\tasync getCurriculumCategoryArray(refresh, options) {\r\n        if (!this.configArray || refresh) {\r\n            var url = this.CURRICULUM_CATEGORY_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.curriculumCatArray = serverResponse;\r\n                } else {\r\n                    this.data.processError(serverResponse);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n\tselectCurriculum(index) {\r\n        if (index === undefined) {\r\n            this.selectedCurriculum = this.emptyCurriculum();\r\n        } else {\r\n            try {\r\n                this.selectedCurriculum = this.utils.copyObject(this.curriculumArray[index]);\r\n                this.editIndex = index;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.selectedCurriculum = this.emptyCurriculum();\r\n            }\r\n        }\r\n    }\r\n\r\n    selectCurriculumById(id){\r\n        if(!id){\r\n            this.selectedCurriculum = this.emptyCurriculum();\r\n        } else {\r\n            for(var i = 0; i < this.curriculumArray.length; i++){\r\n                if(this.curriculumArray[i]._id === id){\r\n                    this.selectedCurriculum = this.utils.copyObject(this.curriculumArray[i]);\r\n                    this.editIndex = i;\r\n                    return;\r\n                }\r\n            }   \r\n        }\r\n    }\r\n\r\n\temptyCurriculum() {\r\n        var obj  = new Object();\r\n        obj.category = \"\";\r\n        obj.title = \"\";\r\n        obj.description = \"\";\r\n\t\tobj.notes = \"\";\r\n        obj.rating = 0;\r\n        obj.comments = new Array();\r\n        obj.products = new Array();\r\n        return obj;\r\n    }\r\n\r\n\tasync save() {\r\n        if (!this.selectedCurriculum._id) {\r\n            let response = await this.data.saveObject(this.selectedCurriculum, this.CURRICULUM_SERVICE, \"post\")\r\n                if (!response.error) {\r\n                    if(this.curriculumArray){\r\n                        this.curriculumArray.push(response);;\r\n                    }\r\n                } else {\r\n                     this.data.processError(response, \"There was an error creating the curriculum.\");\r\n                }\r\n                return response;\r\n        } else {\r\n            let response = await this.data.saveObject(this.selectedCurriculum, this.CURRICULUM_SERVICE, \"put\")\r\n                if (!response.error) {\r\n                    if(this.curriculumArray){\r\n                        this.curriculumArray[this.editIndex] = this.utils.copyObject(this.selectedCurriculum, this.curriculumArray[this.editIndex]);\r\n                    }\r\n                }  \r\n                return response;\r\n        }\r\n    }\r\n\r\n\tisDirty(obj){\r\n      if(this.selectedCurriculum){\r\n\t\tif(!obj){\r\n\t\t\tvar obj = this.emptyCurriculum(); \r\n\t\t}\r\n\t\treturn this.utils.objectsEqual(this.selectedCurriculum, obj, ['file']);\r\n        }\r\n        return new Array();\r\n    }\r\n\r\n\tasync delete(){\r\n\t\tif(this.selectedCurriculum._id){\r\n\t\t\tlet serverResponse = await this.data.deleteObject(this.CURRICULUM_SERVICE + '/' + this.selectedCurriculum._id);\r\n\t\t\tif (!serverResponse.error) {\r\n\t\t\t\tthis.curriculumArray.splice(this.editIndex, 1);\r\n\t\t\t\tthis.editIndex = - 1;\r\n\t\t\t}\r\n\t\t\treturn serverResponse;\r\n\t\t}\r\n\t}\r\n\r\n    selectCurriculumCategory(index){\r\n         if (index === undefined) {\r\n            this.selectedCurriculumCategory = this.emptyCurriculumCategory();\r\n        } else {\r\n            try {\r\n                this.selectedCurriculumCategory = this.utils.copyObject(this.curriculumCatArray[index]);\r\n                this.editCategoryIndex = index;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.selectedCurriculumCategory = this.emptyCurriculumCategory();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    selectCurriculumCategoryByName(name){\r\n         if (name === undefined) {\r\n            this.selectedCurriculumCategory = this.emptyCurriculumCategory();\r\n        } else {\r\n            try {\r\n                for(var i = 0; i < this.curriculumCatArray.length; i++ ){\r\n                    if( this.curriculumCatArray[i].name === name){\r\n                        this.selectedCurriculumCategory = this.utils.copyObject(this.curriculumCatArray[i]);\r\n                        this.editCategoryIndex = i;\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n            } catch (error) {\r\n                console.log(error);\r\n                this.selectedCurriculumCategory = this.emptyCurriculumCategory();\r\n            }\r\n        }\r\n    }\r\n\r\n    emptyCurriculumCategory() {\r\n        var obj  = new Object();\r\n        obj.name = \"\";\r\n        obj.description = \"\";\r\n        return obj;\r\n    }\r\n\r\n    async saveCategory(){\r\n         if (!this.selectedCurriculumCategory._id) {\r\n            let response = await this.data.saveObject(this.selectedCurriculumCategory, this.CURRICULUM_CATEGORY_SERVICE, \"post\")\r\n                if (!response.error) {\r\n                    if(this.curriculumCatArray){\r\n                        this.curriculumCatArray.push(response);;\r\n                    }\r\n                } else {\r\n                     this.data.processError(response, \"There was an error creating the curriculum catgory.\");\r\n                }\r\n                return response;\r\n        } else {\r\n            let response = await this.data.saveObject(this.selectedCurriculumCategory, this.CURRICULUM_CATEGORY_SERVICE, \"put\")\r\n                if (!response.error) {\r\n                    if(this.curriculumCatArray){\r\n                        this.curriculumCatArray[this.editCategoryIndex] = this.utils.copyObject(this.selectedCurriculumCategory, this.curriculumCatArray[this.editCategoryIndex]);\r\n                    }\r\n                } else {\r\n                     this.data.processError(response, \"There was an error creating the curriculum catgory.\");\r\n                }\r\n                return response;\r\n        }\r\n    }\r\n\r\n    async deleteCategory(){\r\n        if(this.selectedCurriculumCategory._id){\r\n\t\t\tlet serverResponse = await this.data.deleteObject(this.CURRICULUM_CATEGORY_SERVICE + '/' + this.selectedCurriculumCategory._id);\r\n\t\t\tif (!serverResponse.error) {\r\n\t\t\t\tthis.curriculumCatArray.splice(this.editCategoryIndex, 1);\r\n\t\t\t\tthis.editCategoryIndex = - 1;\r\n\t\t\t}\r\n\t\t\treturn serverResponse;\r\n\t\t}\r\n    }\r\n\r\n    curriculumExist(category){\r\n         let exists = false;\r\n         for(var i = 0; i < this.curriculumArray.length; i++){\r\n             if(this.curriculumArray[i].category === category){\r\n                 exists = true;\r\n                 break;\r\n             }\r\n         }\r\n         return exists;\r\n    }\r\n\r\n    async uploadFile(files){\r\n        let response = await this.data.uploadFiles(files, this.CURRICULUM_SERVICE + \"/upload\"  + \"/\" + this.selectedCurriculum._id + '/' + this.selectedCurriculum.category);\r\n        if(!response.error){\r\n            this.curriculumArray[this.editIndex].file = response.file;\r\n        }\r\n    }\r\n\r\n}","import {inject} from 'aurelia-framework';\r\nimport {HttpClient} from 'aurelia-http-client';\r\nimport {Utils} from '../utils/utils';\r\nimport {AppConfig} from '../../config/appConfig';\r\nimport {EventAggregator} from 'aurelia-event-aggregator';\r\n\r\n@inject(HttpClient, Utils, AppConfig, EventAggregator)\r\nexport class DataServices {\r\n    isRequesting = false;\r\n\r\n    constructor(http, utils, config, eventAggregator) {\r\n        this.http = http;\r\n        this.utils = utils;\r\n        this.config = config;\r\n        this.eventAggregator = eventAggregator;\r\n\r\n\t\tthis.http.configure(x => {\r\n\t\t\tx.withBaseUrl(this.config.BASE_URL);\r\n\t\t});\r\n    }\r\n\r\n\tactivate(){\r\n\t}\r\n\r\n  get(url){\r\n\t\tthis.isRequesting = true;\r\n\t\treturn this.http.createRequest(url)\r\n\t\t.asGet()\r\n\t\t.withHeader('Authorization', 'JWT ' + sessionStorage.getItem('token'))\r\n\t\t.send().then(response => {\r\n\t\t\tthis.isRequesting = false;\r\n  \t\t\tif (!response.isSuccess) {\r\n             return response;\r\n         } else {\r\n             return JSON.parse(response.response);\r\n         }\r\n     }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n         console.log(e);\r\n         return  {error: true, code: e.statusCode, message: e.statusText};\r\n     });\r\n\t}\r\n\r\n    getNoAuth(url){\r\n        this.isRequesting = true;\r\n\t\treturn this.http.createRequest(url)\r\n\t\t.asGet()\r\n\t\t.send().then(response => {\r\n\t\t\tthis.isRequesting = false;\r\n\t\t\tif (!response.isSuccess) {\r\n                     return response;\r\n                 } else {\r\n                     return JSON.parse(response.response);\r\n                 }\r\n             }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 console.log(e);\r\n                 return  {error: true, code: e.statusCode, message: e.statusText};\r\n             });\r\n    }\r\n\r\n\tsaveObject(content, url, method) {\r\n        this.isRequesting = true;\r\n\t\tif(method === 'put'){\r\n \t\t\treturn this.http.createRequest(url)\r\n\t\t\t .asPut()\r\n\t\t\t .withHeader('Authorization', 'JWT ' + sessionStorage.getItem('token'))\r\n\t\t\t .withContent(content)\r\n\t\t\t .send().then(response => {\r\n\t\t\t\t this.isRequesting = false;\r\n\t\t\t\tif (!response.isSuccess) {\r\n                     return response;\r\n                 } else {\r\n                     return JSON.parse(response.response);\r\n                 }\r\n             }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 console.log(e);\r\n                 return  {error: true, code: e.statusCode, message: e.statusText};\r\n             });\r\n\r\n\t\t} else if(method === 'post'){\r\n\t\t\treturn this.http.createRequest(url)\r\n\t\t\t .asPost()\r\n\t\t\t .withHeader('Authorization', 'JWT ' + sessionStorage.getItem('token'))\r\n\t\t\t .withContent(content)\r\n\t\t\t .send().then(response => {\r\n\t\t\t\t this.isRequesting = false;\r\n\t\t\t\tif (!response.isSuccess) {\r\n                     return response;\r\n                 } else {\r\n                     return JSON.parse(response.response);\r\n                 }\r\n             }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 console.log(e);\r\n                 return  {error: true, code: e.statusCode, message: e.statusText};\r\n             });\r\n\t\t}\r\n\r\n    }\r\n\r\n\tdeleteObject(url){\r\n\t\tthis.isRequesting = true;\r\n\t\treturn this.http.createRequest(url)\r\n\t\t.asDelete()\r\n\t\t.withHeader('Authorization', 'JWT ' + sessionStorage.getItem('token'))\r\n\t\t.send().then(response => {\r\n\t\t\t\tthis.isRequesting = false;\r\n\t\t\t\tif (!response.isSuccess) {\r\n                     return response;\r\n                 } else {\r\n                     if(response.statusCode  === 204){\r\n                        return response;\r\n                     } else {\r\n                        return JSON.parse(response.response);\r\n                     }\r\n\r\n                 }\r\n             }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 console.log(e);\r\n                 return  {error: true, code: e.statusCode, message: e.statusText};\r\n             });\r\n\t}\r\n\r\n    sendMail(content) {\r\n        this.isRequesting = true;\r\n\t\t\treturn this.http.createRequest('sendMail')\r\n\t\t\t .asPost()\r\n\t\t\t .withHeader('Authorization', 'JWT ' + sessionStorage.getItem('token'))\r\n\t\t\t .withContent(content)\r\n\t\t\t .send().then(response => {\r\n\t\t\t\t this.isRequesting = false;\r\n\t\t\t\tif (!response.isSuccess) {\r\n                     return response;\r\n                 } else {\r\n                     return JSON.parse(response.response);\r\n                 }\r\n             }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 console.log(e);\r\n                 return  {error: true, code: e.statusCode, message: e.statusText};\r\n             });\r\n\r\n    }\r\n\r\n    login(content, url){\r\n        return this.http.createRequest(url)\r\n\t\t\t .asPost()\r\n\t\t\t .withContent(content)\r\n\t\t\t .send().then(response => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 return JSON.parse(response.response);\r\n             }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 console.log(e);\r\n                 return  {error: true, code: e.statusCode, message: e.statusText};\r\n             });\r\n    }\r\n\r\n    uploadFiles(files, url){\r\n        // this.isRequesting = true;\r\n        this.progress = 0;\r\n\t\tlet formData = new FormData();\r\n\r\n\t\tfiles.forEach((item, index) => {\r\n            formData.append(\"file\" + index, item);\r\n        })\r\n\r\n\t\treturn this.http.createRequest(url)\r\n\t\t\t.asPost()\r\n\t\t\t.withHeader('Authorization', 'JWT ' + sessionStorage.getItem('token'))\r\n\t\t\t.withContent(formData)\r\n\t\t\t.skipContentProcessing()\r\n            .withProgressCallback(progress => {\r\n                console.log(progress.loaded)\r\n                this.eventAggregator.publish('upload-progress', {progress: progress.loaded, total: progress.total});\r\n                this.progress = progress.loaded / progress.total;\r\n            })\r\n\t\t\t.send().then(response => {\r\n\t\t\t\tthis.isRequesting = false;\r\n\t\t\t\tif (!response.isSuccess) {\r\n                     return response;\r\n                 } else {\r\n                     return JSON.parse(response.response);\r\n                 }\r\n             }).catch(e => {\r\n\t\t\t\t this.isRequesting = false;\r\n                 console.log(e);\r\n                 return  {error: true, code: e.statusCode, message: e.statusText};\r\n             });\r\n\r\n    }\r\n\r\n    processError(obj, message) {\r\n        console.log(obj);\r\n        var msg = (message ? message : \"\") + \" \";\r\n        switch (obj.code) {\r\n            case 404:\r\n                msg = undefined;\r\n                break;\r\n            case 422:\r\n                msg = msg += \"The request was bad.  Contact your UCC.\";\r\n                break;\r\n            case 409:\r\n                msg = msg += \"The record already exists.\";\r\n                break;\r\n            case 500:\r\n                msg = msg += \"An unspecified error occured on the server.  Contact your UCC.\";\r\n                break;\r\n            default:\r\n                msg = msg += \"An unspecified error occured.  Contact your UCC.\"\r\n        }\r\n        if(msg && msg.length > 0) this.utils.showNotification(msg);\r\n    }\r\n\r\n    // //File URLs\r\n    FILE_URL = \"http://localhost:5000/api/upload\";\r\n    FILE_DOWNLOAD_URL = \"http://localhost:5000/\";\r\n\r\n    // //Institution Services\r\n    // INSTITUTION_SERVICES = \"institutions\";\r\n\r\n    // //People Services\r\n    // PEOPLE_SERVICE = \"people\";\r\n    // PERSON_REGISTER = \"people/register\"\r\n    // CHECK_EMAIL = 'people/checkEmail';\r\n    // CHECK_NAME = 'people/checkName';\r\n    // SEND_MAIL = 'people/sendMail';\r\n    // PASSWORD_RESET = 'passwordReset';\r\n    // NOTES_SERVICE = \"notes\";\r\n\r\n    // CURRICULUM_SERVICE = 'curriculum';\r\n    // CURRICULUM_CATEGORY_SERVICE = 'curriculumcategory';\r\n\r\n    // //IS4UA Services\r\n    IS4UA = 'is4ua';\r\n\r\n    // //Systems Services\r\n    // SYSTEMS_SERVICE = \"systems\";\r\n\r\n    // //Clients Services\r\n    CLIENTS_SERVICE = 'clients';\r\n    DELETE_ALL_CLIENTS = 'clients/system/SYSTEMID';\r\n\r\n\r\n    // //Products Services\r\n    // PRODUCTS_SERVICE = 'products';\r\n\r\n\r\n\r\n    // //Help Tickets\r\n    // HELP_TICKET_SERVICES = 'helpTickets';\r\n    // HELP_TICKET_CONTENT_SERVICES = \"helpTickets/content/HELPTICKETID/STATUS\";\r\n    // HELP_TICKET_LOCK_SERVICES = \"helpTicketLocks\";\r\n    // HELP_TICKET_TYPES = \"helpTicketsTypes\";\r\n\r\n    // //Downloads\r\n    // DOWNLOADS_SERVICE = \"apps\";\r\n    // APPLICATION_CATEGORY_SERVICE = \"appsCategory\";\r\n    // DOCUMENTS_SERVICE = \"documents\";\r\n    // DOCUMENTS_CATEGORY_SERVICE = \"documentCategory\";\r\n    // DOWNLOADS_UPLOADS = \"downloads/upload\";\r\n\r\n    // //Clientrequests Services\r\n    COURSES_SERVICE = 'courses';\r\n    PERSON_COURSES_SERVICE = 'courses/person/PERSONID';\r\n    // CLIENT_REQUESTS_SERVICES = 'clientRequests';\r\n    // CLIENT_REQUEST_DETAILS='clientRequestsDetails';\r\n    // CLIENT_REQUEST_LOCK_SERVICES = 'clientRequestLocks';\r\n    // CUSTOMER_ACTION = 'clientRequests/customerAction';\r\n\r\n    CONFIG_SERVICE = 'config';\r\n    SESSIONS_CONFIG_SERVICE = 'semesterConfig';\r\n\r\n    //File upload\r\n    DOCUMENTS_FILE_UPLOAD = 'documents/file';\r\n\r\n    // API_KEY='0f85bb931f8faad7e35b6f685aa4e931';\r\n    // OPEN_WEATHER_MAP_SERVICE = 'http://api.openweathermap.org/data/2.5/weather';\r\n\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\nimport {Utils} from '../utils/utils';\r\nimport {AppConfig} from '../../config/appConfig';\r\nimport moment from 'moment';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class DocumentsServices {\r\n\r\n    DOCUMENTS_SERVICE = \"documents\";\r\n    DOCUMENTS_CATEGORY_SERVICE = \"documentCategory\"; \r\n\r\n    \r\n\r\n    constructor(data, utils, config) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n        this.config = config;\r\n    }\r\n\r\n    //Documents\r\n    async getDocumentsArray(refresh, options) {\r\n        if (!this.documentsArray || refresh) {\r\n            var url = this.DOCUMENTS_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.status) {\r\n                    this.documentsArray = serverResponse;\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                return undefined;\r\n            }\r\n        }\r\n        return this.documentsArray;\r\n    }\r\n\r\n    selectDocument(index) {\r\n        if (!index && index != 0) {\r\n            this.selectedDocument = this.emptyDocument();\r\n        } else {\r\n            try {\r\n                this.selectedDocument = this.utils.copyObject(this.documentsArray[index]);\r\n                this.editDocumentIndex = index;\r\n            } catch (error) {\r\n                this.selectedDocument = this.emptyDocument();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    emptyDocument() {\r\n        var newObj = new Object();\r\n        newObj.name = \"\";\r\n        newObj.description = \"\";\r\n        newObj.type = 0;\r\n        newObj.files = new Array();\r\n        newObj.active = true;\r\n        newObj.createdDate = new Date();\r\n\r\n        return newObj;\r\n    }\r\n\r\n    async saveDocument() {\r\n        if (!this.selectedDocument) {\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedDocument._id) {\r\n            let serverResponse = await this.data.saveObject(this.selectedDocument, this.DOCUMENTS_SERVICE, \"post\");\r\n            if (!serverResponse.status) {\r\n                this.selectedDocument = serverResponse;\r\n                this.documentsArray.push(this.selectedDocument);\r\n                this.editDocumentIndex = this.documentsArray.length - 1;\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedDocument, this.DOCUMENTS_SERVICE, \"put\");\r\n            if (!serverResponse.status) {\r\n                this.documentsArray[this.editDocumentIndex] = this.utils.copyObject(this.selectedDocument, this.documentsArray[this.editDocumentIndex]);\r\n            }\r\n            return serverResponse;\r\n        }\r\n\r\n    }\r\n\r\n    uploadFile(files, version){\r\n        let path = this.selectedCat.code + '$@' + this.selectedDocument.name\r\n       this.data.uploadFiles(files, this.data.DOCUMENTS_FILE_UPLOAD + \"/\" + path + '/' + version);\r\n    }\r\n\r\n    async deleteFile(index){\r\n        if (!this.selectedDocument || !this.selectedDocument._id) {\r\n            return;\r\n        }\r\n        let serverResponse = await this.data.deleteObject(this.data.DOCUMENTS_FILE_UPLOAD + '/' + this.selectedDocument._id + '/' + index);\r\n        if (!serverResponse.status) {\r\n            this.selectedDocument.files.splice(index,1);\r\n            this.documentsArray[this.editDocumentIndex] = this.utils.copyObject(this.selectedDocument, this.documentsArray[this.editDocumentIndex]);\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    async deleteDocument(){\r\n         let serverResponse = await this.data.deleteObject(this.DOCUMENTS_SERVICE + '/' + this.selectedDocument._id);\r\n            if (serverResponse.status === 204) {\r\n                this.documentsArray.splice(this.editDocumentIndex, 1);\r\n                this.editDownloadIndex = - 1;\r\n            }\r\n            return serverResponse;\r\n    }\r\n\r\n    isDirty(obj){\r\n        if(this.selectedDocument){\r\n            if(!obj){\r\n                var obj = this.emptyDocument();\r\n            }\r\n            var skip = ['file'];\r\n            return this.utils.objectsEqual(this.selectedDocument, obj, skip );\r\n        }\r\n        return new Array();\r\n     }\r\n\r\n    //Categories\r\n    async getDocumentsCategoriesArray(refresh, options) {\r\n        if (!this.docCatsArray || refresh) {\r\n            var url = this.DOCUMENTS_CATEGORY_SERVICE;\r\n            url += options ? options : \"\";;\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.docCatsArray = serverResponse;\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                return undefined;\r\n            }\r\n        }\r\n        return this.docCatsArray;\r\n    }\r\n\r\n    selectCategory(index){\r\n         if (!index && index != 0) {\r\n            this.selectedCat = this.emptyCat();\r\n        } else {\r\n            try {\r\n                this.selectedCat = this.utils.copyObject(this.docCatsArray[index]);\r\n                this.editCatIndex = index;\r\n            } catch (error) {\r\n                this.selectedCat = this.emptyCat();\r\n            }\r\n        }\r\n    }\r\n\r\n    selectCategoryByCode(index) {\r\n        if (!index && index != 0) {\r\n            this.selectedCat = this.emptyCat();\r\n        } else {\r\n            try {\r\n                for(var i = 0; i<this.docCatsArray.length; i++){\r\n                    if(this.docCatsArray[i].code == index){\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n                this.selectedCat = this.utils.copyObject(this.docCatsArray[index]);\r\n                this.editCatIndex = index;\r\n            } catch (error) {\r\n                this.selectedCat = this.emptyCat();\r\n            }\r\n        }\r\n    }\r\n\r\n    emptyCat() {\r\n        var newObj = new Object();\r\n        var newCode = 0;\r\n        for(var i = 0; i < this.docCatsArray.length; i++){\r\n            if(this.docCatsArray[i].code > newCode) newCode = this.docCatsArray[i].code;\r\n        }\r\n        newObj.code = newCode + 1;\r\n        newObj.description = \"\";\r\n\r\n        return newObj;\r\n    }\r\n\r\n    async saveCategory() {\r\n        if (!this.selectedCat) {\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedCat._id) {\r\n            let serverResponse = await this.data.saveObject(this.selectedCat, this.DOCUMENTS_CATEGORY_SERVICE, \"post\");\r\n            if (!serverResponse.status) {\r\n                this.docCatsArray.push(serverResponse);\r\n                this.editCatIndex = this.docCatsArray.length - 1;\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedCat, this.DOCUMENTS_CATEGORY_SERVICE, \"put\");\r\n            if (!serverResponse.status) {\r\n                this.docCatsArray[this.editCatIndex] = this.utils.copyObject(this.selectedCat, this.docCatsArray[this.editCatIndex]);\r\n            }\r\n            return serverResponse;\r\n        }\r\n\r\n    }\r\n\r\n    async deleteCat(){\r\n        if (this.selectedCat._id) {\r\n            let serverResponse = await this.data.deleteObject(this.DOCUMENTS_CATEGORY_SERVICE + '/' + this.selectedCat._id);\r\n            if (serverResponse.status === 204) {\r\n                this.docCatsArray.splice(this.editCatIndex, 1);\r\n                this.editCatIndex = - 1;\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            return {error: \"no category selected\"}\r\n        }\r\n    }\r\n\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\nimport {Utils} from '../utils/utils';\r\nimport {AppConfig} from '../../config/appConfig';\r\nimport moment from 'moment';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class Downloads {\r\n    DOWNLOADS_SERVICE = \"apps\";\r\n    APPLICATION_CATEGORY_SERVICE = \"appsCategory\";\r\n    DOWNLOADS_UPLOADS = \"downloads/upload\";\r\n\r\n    constructor(data, utils, config) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n        this.config = config; \r\n    }\r\n\r\n    //Downloads\r\n    async getDownloadsArray(refresh, options) {\r\n        if (!this.appDownloadsArray || refresh) {\r\n            var url = this.DOWNLOADS_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.appDownloadsArray = serverResponse;\r\n                } \r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    selectDownload(index) {\r\n        if (!index && index != 0) {\r\n            this.selectedDownload = this.emptyDownload();\r\n        } else {\r\n            try {\r\n                this.selectedDownload = this.utils.copyObject(this.appDownloadsArray[index]);\r\n                this.editDownloadIndex = index;\r\n            } catch (error) {\r\n                this.selectedDownload = this.emptyDownload();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    emptyDownload() {\r\n        var newObj = new Object();\r\n        newObj.name = \"\";\r\n        newObj.description = \"\";\r\n        newObj.type = 0;\r\n        newObj.file = \"\";\r\n        newObj.createdDate = new Date();\r\n        newObj.active = true;\r\n        newObj.helpTicketRelevant = false;\r\n\r\n        return newObj;\r\n    }\r\n\r\n    async saveDownload() {\r\n        if (!this.selectedDownload) {\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedDownload._id) {\r\n            let serverResponse = await this.data.saveObject(this.selectedDownload, this.DOWNLOADS_SERVICE, \"post\");\r\n            if (!serverResponse.error) {\r\n                this.selectedDownload = serverResponse;\r\n                this.appDownloadsArray.push(this.selectedDownload);\r\n                this.editDownloadIndex = this.appDownloadsArray.length - 1;\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedDownload, this.DOWNLOADS_SERVICE, \"put\");\r\n            if (!serverResponse.error) {\r\n                this.appDownloadsArray[this.editDownloadIndex] = this.utils.copyObject(this.selectedDownload, this.appDownloadsArray[this.editDownloadIndex]);\r\n            }\r\n            return serverResponse;\r\n        }\r\n\r\n    }\r\n\r\n    async uploadFile(files){\r\n        let response = await this.data.uploadFiles(files, this.DOWNLOADS_UPLOADS + \"/\" + this.selectedDownload._id + '/' + this.selectedDownload.downCatcode);\r\n        if(!response.error){\r\n            this.appDownloadsArray[this.editDownloadIndex].file = response.file;\r\n        }\r\n    }\r\n\r\n    async deleteDownload(){\r\n         let serverResponse = await this.data.deleteObject(this.DOWNLOADS_SERVICE + '/' + this.selectedDownload._id);\r\n            if (!serverResponse.error) {\r\n                this.appDownloadsArray.splice(this.editDownloadIndex, 1);\r\n                this.editDownloadIndex = - 1;\r\n            }\r\n            return serverResponse;\r\n    }\r\n\r\n    isDirty(obj){\r\n        if(this.selectedDownload){\r\n            if(!obj){\r\n                var obj = this.emptyDownload();\r\n            }\r\n            var skip = ['file'];  \r\n            return this.utils.objectsEqual(this.selectedDownload, obj, skip );\r\n        }\r\n        return new Array();\r\n     }\r\n     \r\n\r\n   \r\n    //Categories\r\n    async getDownloadCategoriesArray(refresh, options) {\r\n        if (!this.appCatsArray || refresh) {\r\n            var url = this.APPLICATION_CATEGORY_SERVICE;\r\n            url += options ? options : \"\";;\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.appCatsArray = serverResponse;\r\n                } \r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    selectCategory(index) {\r\n        if (!index && index != 0) {\r\n            this.selectedCat = this.emptyCat();\r\n        } else {\r\n            try {\r\n                this.selectedCat = this.utils.copyObject(this.appCatsArray[index]);\r\n                this.editCatIndex = index;\r\n            } catch (error) {\r\n                this.selectedCat = this.emptyCat();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    selectCategoryByCode(code) {\r\n        if (!code && code != 0) {\r\n            this.selectedCat = this.emptyCat();\r\n        } else {\r\n            try {\r\n                this.editCatIndex = 0;\r\n                this.appCatsArray.forEach((item, index) => {\r\n                    if(item.downCatcode == code)  this.editCatIndex = index;\r\n                })\r\n                this.selectedCat = this.utils.copyObject(this.appCatsArray[this.editCatIndex]);\r\n            } catch (error) {\r\n                this.selectedCat = this.emptyCat();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    emptyCat() {\r\n        var newObj = new Object();\r\n        newObj.code = 0;\r\n        newObj.description = \"\";\r\n\r\n        return newObj;\r\n    }\r\n\r\n    documentsExist(code){\r\n        if (!code && code != 0) {\r\n           return false;\r\n        } else {\r\n            for(var i = 0; i <  this.appDownloadsArray.length; i++){\r\n                if(this.appDownloadsArray[i].downCatcode == code) return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async saveCategory() {\r\n        if (!this.selectedCat) {\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedCat._id) {\r\n            let serverResponse = await this.data.saveObject(this.selectedCat, this.APPLICATION_CATEGORY_SERVICE, \"post\");\r\n            if (!serverResponse.error) {\r\n                this.appCatsArray.push(serverResponse);\r\n                this.selectedCat = serverReponse;\r\n                this.editCatIndex = this.appCatsArrayInternal.length - 1;\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedCat, this.APPLICATION_CATEGORY_SERVICE, \"put\");\r\n            if (!serverResponse.error) {\r\n                this.appCatsArray[this.editCatIndex] = this.utils.copyObject(this.selectedCat, this.appCatsArray[this.editCatIndex]);\r\n            }\r\n            return serverResponse;\r\n        }\r\n\r\n    }\r\n\r\n    async deleteCat(){\r\n        if (this.selectedCat._id) {\r\n            let serverResponse = await this.data.deleteObject(this.APPLICATION_CATEGORY_SERVICE + '/' + this.selectedCat._id);\r\n            if (!serverResponse.error) {\r\n                this.appCatsArray.splice(this.editCatIndex, 1);\r\n                this.editCatIndex = - 1;\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            return {error: \"no category selected\"}\r\n        }\r\n    }\r\n}","import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\nimport {Utils} from '../utils/utils';\r\n\r\nimport moment from 'moment';\r\n\r\n@inject(DataServices, Utils)\r\nexport class Events {\r\n\r\n    EVENTS_SERVICE = 'events';\r\n\r\n    constructor(data, utils) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n    }\r\n\r\n    async getEventsArray(options, refresh) {\r\n        if (!this.eventArray || refresh) {\r\n            var url = this.EVENTS_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    if(Object.prototype.toString.call(serverResponse) == '[object Array]'){\r\n                        this.eventArray = serverResponse;\r\n                    } else {\r\n                        this.eventArray = new Array();;                        \r\n                    }\r\n                } else {\r\n                    this.data.processError(serverResponse);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n    \r\n    async getEventsPersonArray(personId, refresh) {\r\n        if (!this.eventArray || refresh) {\r\n            var url = this.EVENTS_SERVICE + \"/\" + personId;\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    if(Object.prototype.toString.call(serverResponse) == '[object Array]'){\r\n                        this.eventArray = serverResponse;\r\n                    } else {\r\n                        this.eventArray = new Array();;                        \r\n                    }\r\n                } else {\r\n                    this.data.processError(serverResponse);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\t}\r\n    \r\n\r\n\tselectEvent(index) {\r\n        if (index === undefined) {\r\n            this.selectedEvent = this.emptyEvent();\r\n        } else {\r\n\t\t\tthis.selectedEvent = this.utils.copyObject(this.eventArray[index]);\r\n\t\t\tthis.editIndex = index;\r\n        }\r\n    }\r\n    \r\n    selectEventById(eventId){\r\n        if(eventId == undefined) {\r\n            this.selectedEvent = this.emptyEvent();\r\n        } else {\r\n            for(var i = 0; i < this.eventArray.length; i++){\r\n                if(this.eventArray[i]._id === eventId) {\r\n                    this.editIndex = i;\r\n                    this.selectedEvent = this.utils.copyObject(this.eventArray[i]);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n         this.selectedEvent = this.emptyEvent();\r\n    }\r\n\r\n    setEvent(event){\r\n        this.selectedEvent = this.utils.copyObject(event);\r\n    }\r\n\r\n    createEvent(event){\r\n        var obj = new Object();\r\n        obj.title = event.eventTitle;\r\n        obj.end =event.eventEnd\r\n        obj.start =event.eventStart\r\n        obj.eventType = \"\";\r\n        obj.allDay = false\r\n        obj.notes = event.notes;\r\n        obj.scope = event.scope ? \"u\" : \"p\";\r\n\t\treturn obj;\r\n    }\r\n\t\r\n\temptyEvent(){\r\n\t\tvar obj = new Object();\r\n        obj.title = \"\";\r\n        obj.eventType = \"\";\r\n        obj.allDay = false\r\n        obj.notes = \"\";\r\n        obj.scope = \"p\";\r\n\t\treturn obj;\r\n\t}\r\n\r\n\tasync saveEvent() {\r\n       if (!this.selectedEvent._id) {\r\n\t\t\tlet response = await this.data.saveObject(this.selectedEvent, this.EVENTS_SERVICE, \"post\")\r\n\t\t\t\tif (!response.error) {\r\n\t\t\t\t\tif(this.eventArray){\r\n                        this.selectedEvent = response;\r\n\t\t\t\t\t\tthis.eventArray.push(response);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.data.processError(response, \"There was an error creating the event.\");\r\n\t\t\t\t}\r\n\t\t\t\treturn response;\r\n\t\t} else {\r\n\t\t\tlet response = await this.data.saveObject(this.selectedEvent, this.EVENTS_SERVICE, \"put\")\r\n\t\t\t\tif (!response.error) {\r\n\t\t\t\t\tif(this.eventArray){\r\n\t\t\t\t\t\tthis.eventArray[this.editIndex] = this.utils.copyObject(this.selectedEvent, this.eventArray[this.editIndex]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn response;\r\n\t\t}\r\n   }\r\n\r\n    async deleteEvent(){\r\n        if(this.selectedEvent._id){\r\n            let serverResponse = await this.data.deleteObject(this.EVENTS_SERVICE + '/' + this.selectedEvent._id);\r\n            if (!serverResponse.error) {\r\n                this.eventArray.splice(this.editIndex, 1);\r\n                this.editIndex = - 1;\r\n            }\r\n            return serverResponse;\r\n        }\r\n        return null;\r\n    }\r\n}","import { inject } from 'aurelia-framework';\r\nimport { DataServices } from './dataServices';\r\nimport { Utils } from '../utils/utils';\r\nimport { AppConfig } from '../../config/appConfig';\r\nimport moment from 'moment';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class HelpTickets {\r\n    newHelpTicket = false;      //Is the selected product a new product\r\n    editIndex;                  //Index of selected product\r\n\r\n    HELP_TICKET_SERVICES = 'helpTickets';\r\n    HELP_TICKET_CONTENT_SERVICES = \"helpTickets/content/HELPTICKETID/STATUS\";\r\n    HELP_TICKET_LOCK_SERVICES = \"helpTicketLocks\";\r\n    HELP_TICKET_TYPES = \"helpTicketsTypes\";\r\n    HELP_TICKET_EMAIL = \"helpTickets/sendMail\";\r\n    NOTIFICATION_SERVICES = \"notifications\";\r\n\r\n    constructor(data, utils, config) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n        this.config = config;\r\n    }\r\n\r\n    async getHelpTicketArray(options, refresh) {\r\n        if (!this.helpTicketsArray || refresh) {\r\n            var url = this.HELP_TICKET_SERVICES;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.helpTicketsArray = serverResponse;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getMyHelpTickets(id) {\r\n        let serverResponse = await this.data.get(this.HELP_TICKET_SERVICES + '/mine/' + id);\r\n        if (!serverResponse.error) {\r\n            this.helpTicketsArray = serverResponse;\r\n        }\r\n    }\r\n\r\n    async getUserHelpTicketArray(options, refresh) {\r\n        if (!this.helpTicketsArray || refresh) {\r\n            var url = this.HELP_TICKET_SERVICES + '/users';\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.helpTicketsArray = serverResponse;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getArchivedHelpTicketArray(options, refresh) {\r\n        if (!this.helpTicketsArray || refresh) {\r\n            var url = this.HELP_TICKET_SERVICES + '/archived';\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.helpTicketsArray = serverResponse;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getHelpTicketsArrayAnalytics(options, refresh) {\r\n        if (!this.requestsArray || refresh) {\r\n            var url = this.HELP_TICKET_SERVICES + \"/analytics\";\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.helpTicketArrayAnalytics = serverResponse;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getHelpTicket(id) {\r\n        if (id) {\r\n            try {\r\n                let serverResponse = await this.data.get(this.HELP_TICKET_SERVICES + \"/\" + id);\r\n                if (!serverResponse.error) {\r\n                    this.selectedHelpTicket = serverResponse;\r\n                }\r\n                return serverResponse;\r\n            } catch (error) {\r\n                console.log(error);\r\n                return undefined;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    async getHelpTicketByNumber(id) {\r\n      if (id) {\r\n          try {\r\n              let serverResponse = await this.data.get(this.HELP_TICKET_SERVICES + \"?filter=helpTicketNo|eq|\" + id);\r\n              if (!serverResponse.error) {\r\n                  this.selectedHelpTicket = serverResponse[0];\r\n              }\r\n              return serverResponse;\r\n          } catch (error) {\r\n              console.log(error);\r\n              return undefined;\r\n          }\r\n\r\n      }\r\n  }\r\n\r\n    async getArchiveHelpTicket(id) {\r\n      if (id) {\r\n          try {\r\n              let serverResponse = await this.data.get(this.HELP_TICKET_SERVICES + \"/archive\" + \"/\" + id);\r\n              if (!serverResponse.error) {\r\n                  this.selectedHelpTicket = serverResponse;\r\n              }\r\n              return serverResponse;\r\n          } catch (error) {\r\n              console.log(error);\r\n              return undefined;\r\n          }\r\n\r\n      }\r\n  }\r\n\r\n    setHelpTicket(helpTicket) {\r\n        if (!helpTicket) {\r\n            this.emptyHelpTicket();\r\n        } else {\r\n            this.selectedHelpTicket = this.utils.copyObject(helpTicket);\r\n        }\r\n    }\r\n\r\n    async getCurrentCount(options) {\r\n        var url = this.HELP_TICKET_SERVICES + '/current/count';\r\n        url += options ? \"/\" + options : \"\";\r\n        var response = await this.data.get(url);\r\n        if (!response.status) {\r\n            this.newHelpTickets = this.utils.countItems(this.config.NEW_HELPTICKET_STATUS, 'helpTicketStatus', response);\r\n            this.inProcessHelpTickets = this.utils.countItems(this.config.IN_PROCESS_HELPTICKET_STATUS, 'helpTicketStatus', response);\r\n            this.underReviewHelpTickets = this.utils.countItems(this.config.UNDER_REVIEW_HELPTICKET_STATUS, 'helpTicketStatus', response);\r\n            this.customerActionHelpTickets = this.utils.countItems(this.config.CUSTOMER_ACTION_HELPTICKET_STATUS, 'helpTicketStatus', response);\r\n            return response.count;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    selectHelpTicket(index) {\r\n        if (!index && index != 0) {\r\n            this.emptyHelpTicket();\r\n        } else {\r\n            try {\r\n                this.selectedHelpTicket = this.utils.copyObject(this.helpTicketsArray[index]);\r\n                this.editIndex = index;\r\n            } catch (error) {\r\n                this.selectedHelpTicket = this.emptyHelpTicket();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    updateHelpTicket(helpTicket){\r\n        for(let i = 0; i < this.helpTicketsArray.length; i++ ){\r\n            if(this.helpTicketsArray[i]._id === helpTicket._id){\r\n                this.helpTicketsArray[i] = this.utils.copyObject(helpTicket, this.helpTicketsArray[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    selectHelpTicketByID(id) {\r\n        this.helpTicketsArray.forEach((item, index) => {\r\n            if (item._id === id) {\r\n                this.selectedHelpTicket = this.utils.copyObject(item);\r\n                this.editIndex = index;\r\n                return;\r\n            }\r\n        });\r\n        return null;\r\n    }\r\n\r\n    emptyHelpTicket() {\r\n        var newHelpTicketObj = new Object();\r\n\r\n        newHelpTicketObj.sessionId = \"\";\r\n        newHelpTicketObj.type = \"\";\r\n        newHelpTicketObj.courseId = \"\";\r\n        newHelpTicketObj.personId = \"\";\r\n        newHelpTicketObj.helpTicketType = \"\";\r\n        newHelpTicketObj.helpTicketStatus = this.config.NEW_HELPTICKET_STATUS;\r\n        newHelpTicketObj.priority = \"0\";\r\n        newHelpTicketObj.content = new Array();\r\n        newHelpTicketObj.owner = new Array();\r\n        newHelpTicketObj.createdDate = new Date();\r\n        newHelpTicketObj.modifiedDate = new Date();\r\n        newHelpTicketObj.audit = new Array();\r\n        newHelpTicketObj.audit.push({\r\n            event: 'Created',\r\n            eventDate: new Date()\r\n        })\r\n\r\n        this.selectedHelpTicket = newHelpTicketObj;\r\n\r\n        this.emptyHelpTicketContent();\r\n    }\r\n\r\n    selectHelpTicketContent(index) {\r\n        if (!index && index != 0) {\r\n            this.emptyHelpTicketContent();\r\n        } else {\r\n            try {\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.emptyHelpTicketContent();\r\n            }\r\n        }\r\n    }\r\n\r\n    emptyHelpTicketContent() {\r\n        var newHelpTicketContent = new Object();\r\n        newHelpTicketContent.type = 0;\r\n        newHelpTicketContent.createdDate = new Date();\r\n        newHelpTicketContent.helpTicketId = \"\";\r\n        newHelpTicketContent.files = new Array();\r\n        newHelpTicketContent.confidential = false;\r\n        newHelpTicketContent.personId = \"\";\r\n        newHelpTicketContent.content = {};\r\n        newHelpTicketContent.content.comments = \"\";\r\n        this.selectedHelpTicketContent = newHelpTicketContent;\r\n\r\n    }\r\n\r\n    async getOwner(id){\r\n      let serverResponse = await this.data.get(this.HELP_TICKET_SERVICES + '/owner/' + id);\r\n      return serverResponse;\r\n    }\r\n\r\n    async updateOwner(obj) {\r\n        if (!this.selectedHelpTicket) {\r\n            return;\r\n        }\r\n\r\n        var response = await this.data.saveObject(obj, this.HELP_TICKET_SERVICES + \"/owner/\" + this.selectedHelpTicket._id, \"put\");\r\n        if (!response.error) {\r\n            this.selectedHelpTicket = response;\r\n            this.updateHelpTicket(this.selectedHelpTicket);\r\n        } else {\r\n            this.data.processError(response, \"There was an error updating the help ticket.\");\r\n        }\r\n        return response;\r\n    }\r\n\r\n    async updateStatus(email) {\r\n        if (!this.selectedHelpTicket) {\r\n            return;\r\n        }\r\n\r\n        var response = await this.data.saveObject(this.selectedHelpTicket, this.HELP_TICKET_SERVICES + \"/status/\" + this.selectedHelpTicket._id, \"put\");\r\n        if (!response.error) {\r\n            this.helpTicketsArray[this.editIndex].helpTicketStatus = response.helpTicketStatus;\r\n        } else {\r\n            this.data.processError(response, \"There was an error updating the help ticket.\");\r\n        }\r\n        return response;\r\n    }\r\n\r\n    async updateKeywords() {\r\n        if (!this.selectedHelpTicket) {\r\n            return;\r\n        }\r\n\r\n        var response = await this.data.saveObject(this.selectedHelpTicket, this.HELP_TICKET_SERVICES + \"/keywords/\" + this.selectedHelpTicket._id, \"put\");\r\n        if (!response.error) {\r\n            this.helpTicketsArray[this.editIndex].keyWords = response.keyWords;\r\n        } else {\r\n            this.data.processError(response, \"There was an error updating the help ticket.\");\r\n        }\r\n        return response;\r\n    }\r\n\r\n    async reopenHelpTicket() {\r\n        if (!this.selectedHelpTicket) {\r\n            return;\r\n        }\r\n        if(this.selectedHelpTicketContent) this.selectedHelpTicket.content.push(this.selectedHelpTicketContent);\r\n        var url = this.HELP_TICKET_SERVICES + '/reopen';\r\n        var response = await this.data.saveObject(this.selectedHelpTicket, url, \"put\");\r\n        if (!response.error) {\r\n\r\n        } else {\r\n            this.data.processError(response, \"There was an error updating the help ticket.\");\r\n        }\r\n        return response;\r\n    }\r\n\r\n    async closeHelpTicket() {\r\n        if (!this.selectedHelpTicket) {\r\n            return;\r\n        }\r\n        if(this.selectedHelpTicketContent) this.selectedHelpTicket.content.push(this.selectedHelpTicketContent);\r\n        var response = await this.data.saveObject(this.selectedHelpTicket, this.HELP_TICKET_SERVICES + '/close', \"put\");\r\n        if (!response.error) {\r\n            this.helpTicketsArray.splice(this.editIndex, 1);\r\n        } else {\r\n            this.data.processError(response, \"There was an error updating the help ticket.\");\r\n        }\r\n        return response;\r\n    }\r\n\r\n    async saveHelpTicket(email) {\r\n        if (!this.selectedHelpTicket) {\r\n            return;\r\n        }\r\n        var url = this.HELP_TICKET_SERVICES;\r\n        if (!this.selectedHelpTicket._id) {\r\n            var response = await this.data.saveObject(this.selectedHelpTicket, url, \"post\");\r\n            if (!response.error) {\r\n                if (email && email.email) {\r\n                    let HTNo = response.helpTicketNo ? response.helpTicketNo : \" \";\r\n                    email.subject = email.subject.replace('[[No]]', HTNo);\r\n                    email.MESSAGE = email.MESSAGE.replace('[[No]]', HTNo);\r\n                    this.data.saveObject(email, this.HELP_TICKET_EMAIL, \"post\");\r\n                }\r\n                this.selectedHelpTicket = this.utils.copyObject(response);\r\n                if (this.helpTicketsArray) this.helpTicketsArray.push(this.selectedHelpTicket);\r\n            } else {\r\n                this.data.processError(response, \"There was an error creating the help ticket.\");\r\n            }\r\n            return response;\r\n        } else {\r\n            var status = this.selectedHelpTicket.helpTicketStatus;\r\n            var response = await this.data.saveObject(this.selectedHelpTicket, url, \"put\");\r\n            if (!response.error) {\r\n                if (email && email.email) {\r\n                    this.selectedHelpTicket = this.utils.copyObject(response);\r\n                    this.data.saveObject(email, this.HELP_TICKET_EMAIL, \"post\");\r\n                }\r\n                this.selectHelpTicketByID(this.selectedHelpTicket._id);\r\n                if (status !== this.config.CLOSED_HELPTICKET_STATUS) {\r\n                    // this.updateHelpTicket(this.selectedHelpTicket);\r\n                    this.helpTicketsArray[this.editIndex] = this.utils.copyObject(response, this.helpTicketsArray[this.editIndex]);\r\n                } else {\r\n                    this.helpTicketsArray.splice(this.editIndex,1);\r\n                }\r\n            } else {\r\n                this.data.processError(response, \"There was an error updating the help ticket.\");\r\n            }\r\n            return response;\r\n        }\r\n    }\r\n\r\n    async saveHelpTicketResponse(email) {\r\n        if (this.selectedHelpTicket._id) {\r\n            var url = this.HELP_TICKET_CONTENT_SERVICES.replace(\"HELPTICKETID\", this.selectedHelpTicket._id).replace(\"STATUS\", this.selectedHelpTicket.helpTicketStatus);\r\n            var response = await this.data.saveObject(this.selectedHelpTicketContent, url, \"put\");\r\n            if (!response.error) {\r\n                if (!this.selectedHelpTicketContent.confidential && email.email) this.data.saveObject(email, this.HELP_TICKET_EMAIL, \"post\");\r\n                this.selectedHelpTicket = this.utils.copyObject(response);\r\n                this.updateHelpTicket(this.selectedHelpTicket);\r\n                // this.helpTicketsArray[this.editIndex] = this.utils.copyObject(this.selectedHelpTicket, this.helpTicketsArray[this.editIndex]);\r\n            } else {\r\n                this.data.processError(response, \"There was an error updating the help ticket.\");\r\n            }\r\n            return response;\r\n        }\r\n    }\r\n\r\n    async saveHelpTicketResponseAndCLose(email) {\r\n        if (this.selectedHelpTicket._id) {\r\n            var url = this.HELP_TICKET_CONTENT_SERVICES.replace(\"HELPTICKETID\", this.selectedHelpTicket._id).replace(\"STATUS\", this.selectedHelpTicket.helpTicketStatus);\r\n            var response = await this.data.saveObject(this.selectedHelpTicketContent, url, \"put\");\r\n            if (!response.error) {\r\n                if (!this.selectedHelpTicketContent.confidential && email.email) this.data.saveObject(email, this.HELP_TICKET_EMAIL, \"post\");\r\n                this.selectedHelpTicket = this.utils.copyObject(response);\r\n                this.updateHelpTicket(this.selectedHelpTicket);\r\n                this.helpTicketsArray[this.editIndex] = this.utils.copyObject(this.selectedHelpTicket, this.helpTicketsArray[this.editIndex]);\r\n            } else {\r\n                this.data.processError(response, \"There was an error updating the help ticket.\");\r\n            }\r\n            return response;\r\n        }\r\n    }\r\n\r\n    saveNotification(notice){\r\n        this.data.saveObject(notice, this.NOTIFICATION_SERVICES, \"post\");\r\n    }\r\n\r\n    isHelpTicketDirty(obj, skip) {\r\n        if (this.selectedHelpTicket) {\r\n            if (!this.selectedHelpTicket._id) {\r\n            //     var obj = obj ? this.helpTicketsArray[this.editIndex] : obj;\r\n            // } else {\r\n                var obj = this.emptyHelpTicket();\r\n            }\r\n            return this.utils.objectsEqual(this.selectedHelpTicket, obj, skip);\r\n        }\r\n        return new Array();\r\n    }\r\n\r\n    async uploadFile(files, content) {\r\n        let response = await this.data.uploadFiles(files, this.HELP_TICKET_SERVICES + \"/upload/\" + this.selectedHelpTicket._id + '/' + this.selectedHelpTicket.helpTicketNo + '/' + content);\r\n        if (!response.error) {\r\n            if(this.selectedHelpTicket) this.selectedHelpTicket = this.utils.copyObject(response);\r\n            if(this.helpTicketsArray && this.editIndex) this.updateHelpTicket(this.selectHelpTicket);\r\n            // this.helpTicketsArray[this.editIndex] = this.utils.copyObject(this.selectedHelpTicket, this.helpTicketsArray[this.editIndex]);\r\n        }\r\n    }\r\n\r\n    \r\n    async uploadFileArchive(files, content) {\r\n        let response = await this.data.uploadFiles(files, this.HELP_TICKET_SERVICES + \"/uploadArchive/\" + this.selectedHelpTicket._id + '/' + this.selectedHelpTicket.helpTicketNo + '/' + content);\r\n        if (!response.error) {\r\n            if(this.selectedHelpTicket) this.selectedHelpTicket = this.utils.copyObject(response);\r\n            if(this.helpTicketsArray && this.editIndex) this.updateHelpTicket(this.selectHelpTicket);\r\n            // this.helpTicketsArray[this.editIndex] = this.utils.copyObject(this.selectedHelpTicket, this.helpTicketsArray[this.editIndex]);\r\n        }\r\n    }\r\n\r\n    calcHelpTicketAges() {\r\n        this.helpTickeAges = {\r\n            today: [0, 0],\r\n            yesterday: [0, 0],\r\n            oneWeek: [0, 0],\r\n            twoWeeks: [0, 0],\r\n            older: [0, 0]\r\n        };\r\n        let today = moment(new Date());\r\n\r\n        this.helpTicketsArray.forEach(item => {\r\n            // let index = item.owner[0].personId === null ? 1 : 0;\r\n            let ageCreated = today.diff(moment(item.createdDate), 'days');\r\n            let ageModifed = today.diff(moment(item.modifiedDate), 'days');\r\n            if (ageCreated === 0) {\r\n                this.helpTickeAges.today[0] += 1;\r\n            } else if (ageCreated === 1) {\r\n                this.helpTickeAges.yesterday[0] += 1;\r\n            } else if (ageCreated <= 7) {\r\n                this.helpTickeAges.oneWeek[0] += 1;\r\n            } else if (ageCreated <= 14) {\r\n                this.helpTickeAges.twoWeeks[0] += 1;\r\n            } else {\r\n                this.helpTickeAges.older[0] += 1;\r\n            }\r\n            if (ageModifed === 0) {\r\n                this.helpTickeAges.today[1] += 1;\r\n            } else if (ageModifed === 1) {\r\n                this.helpTickeAges.yesterday[1] += 1;\r\n            } else if (ageModifed <= 7) {\r\n                this.helpTickeAges.oneWeek[1] += 1;\r\n            } else if (ageModifed <= 14) {\r\n                this.helpTickeAges.twoWeeks[1] += 1;\r\n            } else {\r\n                this.helpTickeAges.older[1] += 1;\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    async getHelpTicketTypes(options, refresh) {\r\n        if (!this.helpTicketTypesArray || refresh) {\r\n            var url = this.HELP_TICKET_TYPES;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.helpTicketTypesArray = serverResponse.sort((a, b) => {\r\n                        return a.category < b.category ? 0 : -1;\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    selectHelpTicketTypeCategory(index) {\r\n        if (!index && index != 0) {\r\n            this.selectedHelpTicketType = this.emptyHelpTicketType();\r\n        } else {\r\n            try {\r\n                this.selectedHelpTicketType = this.utils.copyObject(this.helpTicketTypesArray[index]);\r\n                this.editTypeIndex = index;\r\n            } catch (error) {\r\n                this.selectedHelpTicket = this.emptyHelpTicketType();\r\n            }\r\n        }\r\n    }\r\n\r\n    emptyHelpTicketType() {\r\n        let obj = new Object();\r\n        return obj;\r\n    }\r\n\r\n    async saveHelpTicketType() {\r\n        if (!this.selectedHelpTicketType) {\r\n            return;\r\n        }\r\n        var url = this.HELP_TICKET_TYPES;\r\n\r\n        if (!this.selectedHelpTicketType._id) {\r\n            var response = await this.data.saveObject(this.selectedHelpTicket, url, \"post\");\r\n            if (!response.error) {\r\n                this.selectedHelpTicketType = this.utils.copyObject(response);\r\n                if (this.helpTicketTypesArray) this.helpTicketTypesArray.push(this.selectedHelpTicketType);\r\n            } else {\r\n                this.data.processError(response, \"There was an error creating the help ticket type.\");\r\n            }\r\n            return response;\r\n        } else {\r\n            var response = await this.data.saveObject(this.selectedHelpTicketType, url, \"put\");\r\n            if (!response.error) {\r\n                this.selectedHelpTicketType = this.utils.copyObject(response);\r\n                this.helpTicketTypesArray[this.editTypeIndex] = this.utils.copyObject(this.selectedHelpTicketType, this.helpTicketTypesArray[this.editTypeIndex]);\r\n\r\n            } else {\r\n                this.data.processError(response, \"There was an error updating the help ticket type.\");\r\n            }\r\n            return response;\r\n        }\r\n    }\r\n\r\n    async countHelpTicketsStatus(status) {\r\n        let response = await this.data.get(this.HELP_TICKET_SERVICES + '/count/' + status);\r\n        return response;\r\n    }\r\n\r\n    groupRequestsByType() {\r\n        if (!this.helpTicketArrayAnalytics) {\r\n            return;\r\n        }\r\n        var sortedArray = this.helpTicketArrayAnalytics\r\n            .sort((a, b) => {\r\n                var result = (a.helpTicketType < b.helpTicketType) ? -1 : (a.helpTicketType > b.helpTicketType) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.helpTicketTypeArrayAnalytics = new Array();\r\n        var type = \"\";\r\n        var templateObj = new Object({ helpTicketType: \"\", count: 0 });\r\n\r\n        sortedArray.forEach(item => {\r\n            if (item.helpTicketType != type) {\r\n                type = item.helpTicketType;\r\n                var obj = this.utils.copyObject(templateObj);\r\n                obj.helpTicketType = item.helpTicketType;\r\n                this.helpTicketTypeArrayAnalytics.push(obj);\r\n            }\r\n            this.helpTicketTypeArrayAnalytics[this.helpTicketTypeArrayAnalytics.length - 1].count += 1;\r\n        })\r\n\r\n    }\r\n\r\n    groupRequestsByCurriculum() {\r\n        if (!this.helpTicketArrayAnalytics) {\r\n            return;\r\n        }\r\n\r\n        let filteredArray = this.helpTicketArrayAnalytics.filter(item => {\r\n            return item.content[0].content.curriculumTitle != undefined;\r\n        })\r\n\r\n        var sortedArray = filteredArray\r\n            .sort((a, b) => {\r\n                var result = (a.content[0].content.curriculumTitle < b.content[0].content.curriculumTitle) ? -1 : (a.content[0].content.curriculumTitle > b.content[0].content.curriculumTitle) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.helpTicketCurriculumArrayAnalytics = new Array();\r\n        var type = \"\";\r\n        var templateObj = new Object({ curriculum: \"\", count: 0 });\r\n\r\n        sortedArray.forEach(item => {\r\n            if (item.content[0].content.curriculumTitle != type) {\r\n                type = item.content[0].content.curriculumTitle;\r\n                var obj = this.utils.copyObject(templateObj);\r\n                obj.curriculumTitle = item.content[0].content.curriculumTitle;\r\n                this.helpTicketCurriculumArrayAnalytics.push(obj);\r\n            }\r\n            if (this.helpTicketCurriculumArrayAnalytics[this.helpTicketCurriculumArrayAnalytics.length - 1]) this.helpTicketCurriculumArrayAnalytics[this.helpTicketCurriculumArrayAnalytics.length - 1].count += 1;\r\n        })\r\n    }\r\n\r\n    groupHelpTicketsByInstitution() {\r\n        if (!this.helpTicketArrayAnalytics) {\r\n            return;\r\n        }\r\n\r\n        var sortedArray = this.helpTicketArrayAnalytics\r\n            .sort((a, b) => {\r\n                var result = (a.institutionId.name < b.institutionId.name) ? -1 : (a.institutionId.name > b.institutionId.name) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.helpTicketInstitutionArrayAnalytics = new Array();\r\n        var type = \"\";\r\n        var templateObj = new Object({ institution: \"\", count: 0 });\r\n\r\n        sortedArray.forEach(item => {\r\n            if (item.institutionId.name != type) {\r\n                type = item.institutionId.name;\r\n                var obj = this.utils.copyObject(templateObj);\r\n                obj.institution = item.institutionId.name;\r\n                this.helpTicketInstitutionArrayAnalytics.push(obj);\r\n            }\r\n            if (this.helpTicketInstitutionArrayAnalytics[this.helpTicketInstitutionArrayAnalytics.length - 1]) this.helpTicketInstitutionArrayAnalytics[this.helpTicketInstitutionArrayAnalytics.length - 1].count += 1;\r\n        })\r\n    }\r\n\r\n    groupHelpTicketsByPeople() {\r\n        if (!this.helpTicketArrayAnalytics) {\r\n            return;\r\n        }\r\n\r\n        var sortedArray = this.helpTicketArrayAnalytics\r\n            .sort((a, b) => {\r\n                if (!a['personId'] || !b['personId']) return -1;\r\n                var result = (a.personId.fullName < b.personId.fullName) ? -1 : (a.personId.fullName > b.personId.fullName) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.helpTicketPeopleArrayAnalytics = new Array();\r\n        var type = \"\";\r\n        var templateObj = new Object({ name: \"\", count: 0 });\r\n\r\n        sortedArray.forEach(item => {\r\n            if (item.personId) {\r\n                if (item.personId.fullName != type) {\r\n                    type = item.personId.fullName;\r\n                    var obj = this.utils.copyObject(templateObj);\r\n                    obj.name = item.personId.fullName;\r\n                    this.helpTicketPeopleArrayAnalytics.push(obj);\r\n                }\r\n                if (this.helpTicketPeopleArrayAnalytics[this.helpTicketPeopleArrayAnalytics.length - 1]) this.helpTicketPeopleArrayAnalytics[this.helpTicketPeopleArrayAnalytics.length - 1].count += 1;\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    groupHelpTicketsByStatus() {\r\n        if (!this.helpTicketArrayAnalytics) {\r\n            return;\r\n        }\r\n\r\n        var sortedArray = this.helpTicketArrayAnalytics\r\n            .sort((a, b) => {\r\n                var result = (a.helpTicketStatus < b.helpTicketStatus) ? -1 : (a.helpTicketStatus > b.helpTicketStatus) ? 1 : 0;\r\n                return result;\r\n            });\r\n\r\n        this.helpTicketStatusArrayAnalytics = new Array();\r\n        var type = \"\";\r\n        var templateObj = new Object({ helpTicketStatus: \"\", count: 0 });\r\n\r\n        sortedArray.forEach(item => {\r\n            if (item.helpTicketStatus != type) {\r\n                type = item.helpTicketStatus;\r\n                var obj = this.utils.copyObject(templateObj);\r\n                obj.helpTicketStatus = item.helpTicketStatus;\r\n                this.helpTicketStatusArrayAnalytics.push(obj);\r\n            }\r\n            if (this.helpTicketStatusArrayAnalytics[this.helpTicketStatusArrayAnalytics.length - 1]) this.helpTicketStatusArrayAnalytics[this.helpTicketStatusArrayAnalytics.length - 1].count += 1;\r\n        })\r\n    }\r\n\r\n    async archiveSearch(searchObj, collection) {\r\n        if (searchObj) {\r\n            var url = this.HELP_TICKET_SERVICES + \"/archive\" + (collection ? '/' + collection : '');\r\n            var resultArray = new Array();\r\n            let response = await this.data.saveObject(searchObj, url, \"post\");\r\n            if (!response.error) {\r\n                resultArray = response;\r\n                return resultArray;\r\n            } else {\r\n                return new Array();\r\n            }\r\n        }\r\n    }\r\n\r\n    advancedSearch(searchObj) {\r\n\r\n        var resultArray = this.utils.copyArray(this.helpTicketsArray);\r\n\r\n        if (searchObj.helpTicketNo.length > 0) {\r\n            resultArray = resultArray.filter(item => {\r\n                return item.helpTicketNo == searchObj.helpTicketNo;\r\n            });\r\n        } else {\r\n            //Dates\r\n            if (searchObj.dateRange && searchObj.dateRange.dateFrom !== \"\" && searchObj.dateRange.dateFrom !== \"Invalid date\") {\r\n                if (!searchObj.dateRange.dateTo || searchObj.dateRange.dateTo == \"Invalid date\") {\r\n                    resultArray = resultArray.filter(item => {\r\n                        var dt = moment(item.createdDate).format('YYYY-MM-DD');\r\n                        return moment(item.createdDate).isAfter(searchObj.dateRange.dateFrom);\r\n                    });\r\n                } else {\r\n                    resultArray = resultArray.filter(item => {\r\n                        var dt = moment(item.createdDate).format('YYYY-MM-DD');\r\n                        return moment(item.createdDate).isAfter(searchObj.dateRange.dateFrom) && moment(item.createdDate).isBefore(searchObj.dateRange.dateTo);\r\n                    });\r\n                }\r\n            }\r\n            //Status\r\n            if (searchObj.status && searchObj.status.length > 0) {\r\n                for (var i = 0; i < searchObj.status.length; i++) {\r\n                    searchObj.status[i] = parseInt(searchObj.status[i]);\r\n                }\r\n                resultArray = resultArray.filter(item => {\r\n                    return searchObj.status.indexOf(item.helpTicketStatus) > -1;\r\n                });\r\n            }\r\n            //Keywords\r\n            if (searchObj.keyWords && searchObj.keyWords.length > 0) {\r\n                var searchKeyword = searchObj.keyWords.toUpperCase();\r\n                resultArray = resultArray.filter(item => {\r\n                    if (item.keyWords) {\r\n                        var htKeyword = item.keyWords.toUpperCase();\r\n                        return htKeyword.indexOf(searchKeyword) > -1;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n\r\n                });\r\n            }\r\n            //Content\r\n            if (searchObj.content && searchObj.content.length > 0) {\r\n                var searchContent = searchObj.content.toUpperCase();\r\n                resultArray = resultArray.filter(item => {\r\n                    for (var i = 0; i < item.content.length; i++) {\r\n                        if (item.content[i].content.comments.toUpperCase().indexOf(searchContent) > -1) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n            //Type\r\n            if (searchObj.type && searchObj.type != -1) {\r\n                resultArray = resultArray.filter(item => {\r\n                    return searchObj.type == item.helpTicketType;\r\n                });\r\n            }\r\n\r\n            //Products\r\n            if (searchObj.productIds && searchObj.productIds.length > 0) {\r\n                resultArray = resultArray.filter(item => {\r\n                    return searchObj.productIds.indexOf(item.productId) > -1;\r\n                });\r\n            }\r\n\r\n            //People\r\n            if (searchObj.peopleIds && searchObj.peopleIds.length > 0) {\r\n                resultArray = resultArray.filter(item => {\r\n                    return searchObj.peopleIds.indexOf(item.personId._id) > -1;\r\n                });\r\n            }\r\n\r\n            //Instituions\r\n            if (searchObj.institutionIds && searchObj.institutionIds.length > 0) {\r\n                resultArray = resultArray.filter(item => {\r\n                    return searchObj.institutionIds.indexOf(item.institutionId._id) > -1;\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n        return resultArray;\r\n    }\r\n\r\n    lockHelpTicket(obj) {\r\n        if (obj.helpTicketId) {\r\n            var response = this.data.saveObject(obj, this.HELP_TICKET_LOCK_SERVICES, \"post\");\r\n        }\r\n    }\r\n\r\n    async getHelpTicketLock(id) {\r\n        var response = await this.data.get(this.HELP_TICKET_LOCK_SERVICES + \"/\" + id);\r\n        if (!response.error) {\r\n            return response;\r\n        } else {\r\n            this.data.processError(response, \"There was an error retrieving the help ticket lock.\");\r\n        }\r\n    }\r\n\r\n    removeHelpTicketLock(id) {\r\n        var response = this.data.deleteObject(this.HELP_TICKET_LOCK_SERVICES + \"/\" + id);\r\n    }\r\n\r\n    async archiveHelpTickets() {\r\n        let response = await this.data.saveObject({}, this.HELP_TICKET_SERVICES + '/archiveClosed', \"post\");\r\n        return response;\r\n    }\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\nimport {Utils} from '../utils/utils';\r\nimport {AppConfig} from '../../config/appConfig';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class Inventory {\r\n    INVENTORY_SERVICE = 'inventory';           \r\n\r\n    constructor(data, utils, config) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n        this.config = config; \r\n    }\r\n\r\n    //Downloads\r\n    async getInventoryArray(options, refresh) {\r\n        if (!this.inventoryArray || refresh) {\r\n            var url = this.INVENTORY_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.inventoryArray = serverResponse;\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                return undefined;\r\n            }\r\n        }\r\n        return this.inventoryArray;\r\n    }\r\n\r\n    selectInventory(index) {\r\n        if (!index && index != 0) {\r\n            this.selectedInventory = this.emptyInventory();\r\n        } else {\r\n            try {\r\n                this.selectedInventory = this.utils.copyObject(this.inventoryArray[index]);\r\n                this.selectedIndex = index;\r\n            } catch (error) {\r\n                this.selectedInventory = this.emptyInventory();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    emptyInventory() {\r\n        var newObj = new Object();\r\n\t\tnewObj.IPAddress = new Array();\r\n        return newObj;\r\n    }\r\n\r\n    async saveInventory() {\r\n        if (!this.selectedInventory) {\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedInventory._id) {\r\n            let serverResponse = await this.data.saveObject(this.selectedInventory, this.INVENTORY_SERVICE, \"post\");\r\n            if (!serverResponse.error) {\r\n                this.selectedInventory = serverResponse;\r\n                this.inventoryArray.push(this.selectedInventory);\r\n                this.selectedIndex = this.inventoryArray.length - 1;\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedInventory, this.INVENTORY_SERVICE, \"put\");\r\n            if (!serverResponse.error) {\r\n                this.inventoryArray[this.selectedIndex] = this.utils.copyObject(this.selectedInventory, this.inventoryArray[this.selectedIndex]);\r\n            }\r\n            return serverResponse;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    isDirty(obj){\r\n        if(this.selectedInventory){\r\n            if(!obj){\r\n                var obj = this.emptyInventory();\r\n            }\r\n            var skip = ['file'];  \r\n            return this.utils.objectsEqual(this.selectedInventory, obj, skip );\r\n        }\r\n        return new Array();\r\n     }\r\n     \r\n     async deleteInventory(){\r\n        if (this.selectedInventory._id) {\r\n            var response = this.data.deleteObject(this.INVENTORY_SERVICE + \"/\" + this.selectedInventory._id);\r\n        }\r\n     }\r\n   \r\n   \r\n}","import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\n\r\n@inject(DataServices)\r\nexport class is4ua {\r\n\r\n    constructor(data) {\r\n        this.data = data;\r\n    }\r\n\r\n    async loadIs4ua(){\r\n        // if(!this.personStatusArray){\r\n        let responses = await this.data.get(this.data.IS4UA);\r\n\r\n        this.personStatusArray = responses[0].personStatus;\r\n        this.deptArray = responses[0].deptCat;\r\n        this.specialArray = responses[0].personSpecialization;\r\n\r\n        this.sapProductsArray = responses[0].sapProducts;\r\n        this.uaCurriculumArray = responses[0].uaCurriculum;\r\n        this.uaDataSetsArray = responses[0].uaDatasets;\r\n\r\n        this.institutonStatusArray = responses[0].institutionStatus;\r\n        this.institutionTypes = responses[0].institutionTypes;\r\n        this.memberTypes = responses[0].memberTypes;\r\n        this.highestDegrees = responses[0].highestDegree;\r\n        // }\r\n    }\r\n\r\n    async loadProductKeys() {\r\n        let responses = await Promise.all([\r\n            this.data.getAllObjects(this.data.SAP_PRODUCTS),\r\n            this.data.getAllObjects(this.data.UA_CURRICULUM),\r\n            this.data.getAllObjects(this.data.UA_DATA_SETS)\r\n        ]);\r\n        this.sapProductsArray = responses[0];\r\n        this.uaCurriculumArray = responses[1];\r\n        this.uaDataSetsArray = responses[2];\r\n    }\r\n\r\n    async loadPeopleKeys() {\r\n        let responses = await Promise.all([\r\n            this.data.getAllObjects(this.data.UA_PERSON_STATUS),\r\n            this.data.getAllObjects(this.data.UA_PERSON_DEPT),\r\n            this.data.getAllObjects(this.data.UA_PERSON_SPECIAL)\r\n        ]);\r\n        this.personStatusArray = responses[0];\r\n        this.deptArray = responses[1];\r\n        this.specialArray = responses[2];\r\n    }\r\n\r\n    async loadInstitutionKeys() {\r\n        let responses = await Promise.all([\r\n            this.data.getAllObjects(this.data.UA_INST_STATUS),\r\n            this.data.getAllObjects(this.data.UA_INST_TYPES),\r\n            this.data.getAllObjects(this.data.UA_MEMBER_TYPES),\r\n            this.data.getAllObjects(this.data.UA_INST_DEGREES)\r\n        ]);\r\n        this.institutonStatusArray = responses[0];\r\n        this.institutionTypes = responses[1];\r\n        this.memberTypes = responses[2];\r\n        this.highestDegrees = responses[3];\r\n    }\r\n}\r\n","import { inject } from 'aurelia-framework';\nimport { DataServices } from './dataServices';\nimport { Utils } from '../utils/utils';\n\n@inject(DataServices, Utils)\nexport class People {\n  newObject = false;\n  cleanObject = true;\n  peopleArray = undefined;\n\n  UCC_STAFF_SERVICE = 'uccStaff';\n  PEOPLE_SERVICE = \"people\";\n  PERSON_REGISTER = \"people/register\"\n  CHECK_EMAIL = 'people/checkEmail';\n  CHECK_NAME = 'people/checkName';\n  SEND_MAIL = 'people/sendMail';\n  PASSWORD_RESET = 'passwordReset';\n  NOTES_SERVICE = \"notes\";\n  TECHNOTES_SERVICE = \"techNotes\";\n  TECHNOTESCAT_SERVICE = \"technotecats\";\n  INSTITUTION_SERVICES = \"institutions\";\n  COURSES_SERVICE = 'courses';\n  PEOPLE_UPLOAD_SERVICE = '/people/upload/';\n  NOTIFICATION_SERVICE = 'notifications';\n  PACKAGES_SERVICES = 'apj/packages';\n\n  constructor(data, utils) {\n    this.data = data;\n    this.utils = utils;\n  }\n\n  async getPeopleArray(options, refresh) {\n    if (!this.peopleArray || refresh) {\n      var url = this.PEOPLE_SERVICE;\n      url += options ? options : \"\";\n      try {\n        let serverResponse = await this.data.get(url);\n        if (!serverResponse.error) {\n          this.peopleArray = serverResponse;\n        } else {\n          this.data.processError(serverResponse);\n          return undefined;\n        }\n      } catch (error) {\n        console.log(error);\n        return undefined;\n      }\n    }\n    return this.peopleArray;\n  }\n\n  async getUCCStaff(uccRoles) {\n    var url = this.UCC_STAFF_SERVICE + '/' + uccRoles;\n    try {\n      let serverResponse = await this.data.get(url);\n      if (!serverResponse.error) {\n        this.uccPeople = serverResponse;\n      } else {\n        this.data.processError(serverResponse);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getInstitutionPeople(options, refresh) {\n    if (!this.peopleArray || refresh) {\n      var url = this.PEOPLE_SERVICE;\n      url += options ? options : \"\";\n      try {\n        let serverResponse = await this.data.get(url);\n        if (!serverResponse.error) {\n          this.instutionPeopleArray = serverResponse;\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  async getPeopleBulkEmailArray(options, refresh) {\n    if (!this.peopleBulkEmailArray || refresh) {\n      var url = this.PEOPLE_SERVICE + '/bulkEmail';\n      url += options ? options : \"\";\n      try {\n        let serverResponse = await this.data.get(url);\n        if (!serverResponse.error) {\n          this.peopleBulkEmailArray = serverResponse;\n        } else {\n          this.data.processError(serverResponse);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  async getNotifications(personId) {\n    this.notificationsArray = [];\n    let response = await this.data.get(this.NOTIFICATION_SERVICE + \"/\" + personId + \"?filter=checked|eq|false&order=dateCreated:DSC\" + false);\n    if (!response.error) {\n      this.notificationsArray = response;\n    }\n  }\n\n  saveNotification(notice) {\n    this.data.saveObject(notice, this.NOTIFICATION_SERVICE, \"put\");\n  }\n\n  async getPerson(id) {\n    var url = this.PEOPLE_SERVICE + \"/\" + id;\n    try {\n      let serverResponse = await this.data.get(url);\n      if (!serverResponse.error) {\n        this.selectedPerson = serverResponse;\n      } else {\n        this.selectedPerson = undefined;\n        this.data.processError(serverResponse);\n      }\n    } catch (error) {\n      this.selectedPerson = undefined;\n      console.log(error);\n      return this.selectedPerson;\n    }\n  }\n\n  selectPerson(index, array) {\n    if (index === undefined) {\n      this.selectedPerson = this.emptyPerson();\n    } else {\n      if (array && array === 'i') {\n        this.selectedPerson = this.utils.copyObject(this.instutionPeopleArray[index]);\n        this.editIndex = index;\n      } else {\n        this.selectedPerson = this.utils.copyObject(this.peopleArray[index]);\n        this.editIndex = index;\n      }\n    }\n  }\n\n  selectedPersonFromId(id, array) {\n    if (array && array === 'i') {\n      this.instutionPeopleArray.forEach((item, index) => {\n        if (item._id === id) {\n          this.editIndex = index;\n          this.selectedPerson = this.utils.copyObject(item);\n        }\n      });\n      return;\n    } else {\n      this.peopleArray.forEach((item, index) => {\n        if (item._id === id) {\n          this.editIndex = index;\n          this.selectedPerson = this.utils.copyObject(item);\n        }\n      });\n      return;\n    }\n  }\n\n  setSelectedPerson(userObj) {\n    if (userObj) {\n      this.selectedPerson = this.utils.copyObject(userObj);\n    }\n  }\n\n  emptyPerson() {\n    var obj = new Object();\n    obj.lastName = \"\";\n    obj.firstName = \"\";\n    obj.middleName = \"\";\n    obj.lastName = \"\";\n    obj.nickName = \"\";\n    obj.status = \"\";\n    obj.phone = \"\";\n    obj.mobile = \"\"\n    obj.email = \"\";\n    obj.gender = \"\";\n    obj.roles = new Array();\n    obj.roles.push(\"USER\");\n    obj.password = \"\";\n    obj.institution = \"\";\n    obj.active = false;\n    obj.coursesArray = new Array();\n    obj.file = new Object();\n    var auditObj = {\n      property: \"Created\",\n      eventDate: new Date()\n    }\n    obj.audit = [auditObj];\n    return obj;\n  }\n\n  async checkEmail() {\n    if (this.selectedPerson.email) {\n      let serverResponse = await this.data.get(this.CHECK_EMAIL + '?email=' + this.selectedPerson.email);\n      if (serverResponse.code === 409) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  async checkName() {\n    if (this.selectedPerson.firstName && this.selectedPerson.lastName && this.selectedPerson.institutionId) {\n      let serverResponse = await this.data.get(thisCHECK_NAME + '?filter=[and]firstName|eq|' + this.selectedPerson.firstName + ':lastName|eq|' + this.selectedPerson.lastName + ':institutionId|eq|' + this.selectedPerson.institutionId);\n      if (serverResponse.code === 409) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  async savePerson(register) {\n    if (!this.selectedPerson._id) {\n      if (register) {\n        var url = this.PERSON_REGISTER;\n      } else {\n        var url = this.PEOPLE_SERVICE;\n      }\n      let response = await this.data.saveObject(this.selectedPerson, url, \"post\")\n      if (!response.error) {\n        if (this.peopleArray) {\n          this.peopleArray.push(response);;\n        }\n      } else {\n        this.data.processError(response, \"There was an error creating the account.\");\n      }\n      return response;\n    } else {\n      let response = await this.data.saveObject(this.selectedPerson, this.PEOPLE_SERVICE, \"put\")\n      if (!response.error) {\n        if (this.peopleArray) {\n          this.peopleArray[this.editIndex] = this.utils.copyObject(this.selectedPerson, this.peopleArray[this.editIndex]);\n        }\n      }\n      return response;\n    }\n  }\n\n  async deletePerson() {\n    if (this.selectedPerson._id) {\n      let serverResponse = await this.data.deleteObject(this.PEOPLE_SERVICE + '/' + this.selectedPerson._id);\n      if (!serverResponse.error) {\n        this.peopleArray.splice(this.editIndex, 1);\n        this.editIndex = - 1;\n      }\n      return serverResponse;\n    }\n    return null;\n  }\n\n  isPersonDirty(originalObj) {\n    if (this.selectedPerson) {\n      if (originalObj) {\n        var obj = originalObj;\n      } else if (this.selectedPerson._id) {\n        var obj = this.selectedPersonFromId(this.selectedPerson._id)\n      } else {\n        var obj = this.emptyPerson();\n      }\n      return this.utils.objectsEqual(this.selectedPerson, obj);\n    }\n  }\n\n  async uploadFile(files) {\n    let response = await this.data.uploadFiles(files, this.PEOPLE_UPLOAD_SERVICE + \"/\" + this.selectedPerson._id);\n  }\n\n  async uploadTechFile(files, id) {\n    let response = await this.data.uploadFiles(files, this.TECHNOTES_SERVICE + \"/upload/\" + id);\n  }\n\n  async sendCustomerMessage(message) {\n    if (message.email) {\n      var serverResponse = await this.data.saveObject(message, this.SEND_MAIL, \"put\");\n      return serverResponse;\n    } else {\n      return { error: \"no email\" };\n    }\n  }\n\n  sendNewRegisterEmail(email) {\n    this.data.saveObject(email, this.PERSON_REGISTER + \"/facDev\", 'post');\n  }\n\n  sendBuikEmail(email) {\n    if (email.email) {\n      var serverResponse = this.data.saveObject(email, this.PEOPLE_SERVICE + '/sendBulkEmail', \"post\");\n      return serverResponse;\n    } else {\n      return { error: \"no email\" };\n    }\n  }\n\n  async getEmailLog(options, refresh) {\n    if (!this.selectedPerson._id) {\n      return;\n    }\n\n    if (!this.emailArray || refresh) {\n      var url = this.PEOPLE_SERVICE + \"/emailLog\";\n      url += options ? options : \"\";\n      try {\n        let serverResponse = await this.data.get(url);\n        if (!serverResponse.error) {\n          this.emailArray = serverResponse;\n        } else {\n          this.data.processError(serverResponse);\n\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n  }\n\n  updatePassword(obj) {\n    if (this.selectedPerson._id) {\n      return this.data.saveObject(obj, this.PEOPLE_SERVICE + '/password/' + this.selectedPerson._id, \"put\");\n    }\n  }\n\n  activateAccountEmail(email) {\n    this.data.saveObject(email, this.PEOPLE_SERVICE + \"/facDev/activate\", 'post');\n  }\n\n  async countPeopleStatus(status) {\n    let response = await this.data.get(this.PEOPLE_SERVICE + '/count/' + status);\n    return response;\n  }\n\n  async archiveInactivePeople() {\n    let response = await this.data.saveObject({}, this.PEOPLE_SERVICE + '/archive', \"post\");\n    return response;\n  }\n\n  //Institutions\n  async getInstitutionsArray(options, refresh) {\n    if (!this.institutionsArray || refresh) {\n      var url = this.INSTITUTION_SERVICES;\n      url += options ? options : \"\";\n      let response = await this.data.get(url)\n      if (!response.error) {\n        this.institutionsArray = response;\n      } else {\n        this.institutionsArray = undefined;\n      }\n\n    }\n  }\n\n  async getAPJPackages(options, refresh) {\n    if (!this.packageArray || refresh) {\n      var url = this.PACKAGES_SERVICES;\n      url += options ? options : \"\";\n      let response = await this.data.get(url)\n      if (!response.error) {\n        this.packageArray = response;\n      } else {\n        this.packageArray = undefined;\n      }\n\n    }\n  }\n\n  async getInstitution(id) {\n    var url = this.INSTITUTION_SERVICES + '/' + id;\n    let response = await this.data.get(url)\n    if (!response.status) {\n      return response;\n    } else {\n      return { institutionStatus: '99' };\n    }\n  }\n\n  selectInstitution(index) {\n    if (index === undefined) {\n      this.selectedInstitution = this.emptyInstitution();\n      this.newInstitution = true;\n    } else {\n      try {\n        this.selectedInstitution = this.utils.copyObject(this.institutionsArray[index]);\n        this.newInstitution = false;\n        this.editInstitutionIndex = index;\n      } catch (error) {\n        console.log(error);\n        this.selectedInstitution = this.emptyInstitution();\n        this.newInstitution = true;\n      }\n\n    }\n  }\n\n  selectInstitutionByID(id) {\n    this.institutionsArray.forEach((item, index) => {\n      if (item._id === id) {\n        this.selectedInstitution = this.utils.copyObject(item);\n        this.editInstitutionIndex = index;\n        return;\n      }\n    });\n    return null;\n  }\n\n  emptyInstitution() {\n    var newInstitution = new Object();\n    newInstitution.joinDate = new Date();\n    newInstitution.name = \"\";\n    newInstitution.mac = \"\";\n    return newInstitution;\n  }\n\n  async saveInstitution() {\n    if (!this.selectedInstitution._id) {\n      let response = await this.data.saveObject(this.selectedInstitution, this.INSTITUTION_SERVICES, \"post\")\n      if (!response.error) {\n        if (this.institutionsArray) {\n          this.institutionsArray.push(response);\n        }\n      }\n      return response;\n    } else {\n      let response = await this.data.saveObject(this.selectedInstitution, this.INSTITUTION_SERVICES, \"put\")\n      if (!response.status) {\n        if (this.institutionsArray) {\n          this.institutionsArray[this.editInstitutionIndex] = this.utils.copyObject(this.selectedInstitution, this.institutionsArray[this.editInstitutionIndex]);\n        }\n      }\n      return response;\n    }\n  }\n\n  async saveAPJInstitution() {\n    if (!this.selectedInstitution._id) {\n      let response = await this.data.saveObject(this.selectedInstitution, 'apj/' + this.INSTITUTION_SERVICES, \"post\")\n      if (!response.error) {\n        if (this.institutionsArray) {\n          this.institutionsArray.push(response);\n        }\n      }\n      return response;\n    } else {\n      let response = await this.data.saveObject(this.selectedInstitution, 'apj/' + this.INSTITUTION_SERVICES, \"put\")\n      if (!response.status) {\n        if (this.institutionsArray) {\n          this.institutionsArray[this.editInstitutionIndex] = this.utils.copyObject(this.selectedInstitution, this.institutionsArray[this.editInstitutionIndex]);\n        }\n      }\n      return response;\n    }\n  }\n\n  async deleteInstitution() {\n    let serverResponse = await this.data.deleteObject(this.INSTITUTION_SERVICES + '/' + this.selectedInstitution._id);\n    if (!serverResponse.error) {\n      this.institutionsArray.splice(this.editInstitutionIndex, 1);\n      this.editInstitutionIndex = - 1;\n    }\n    return serverResponse;\n  }\n\n  isInstitutionDirty() {\n    if (this.selectedInstitution) {\n      if (this.selectedInstitution._id) {\n        var obj = this.institutionsArray[this.editInstitutionIndex];\n      } else {\n        var obj = this.emptyInstitution();\n      }\n      return this.utils.objectsEqual(this.selectedInstitution, obj);\n    }\n  }\n\n  //notes\n  async getNotesArray(options, refresh) {\n    if (!this.notesArray || refresh) {\n      var url = this.NOTES_SERVICE;\n      url += options ? options : \"\";\n      try {\n        let serverResponse = await this.data.get(url);\n        if (!serverResponse.error) {\n          this.notesArray = serverResponse;\n        } else {\n          this.data.processError(serverResponse);\n          return undefined;\n        }\n      } catch (error) {\n        console.log(error);\n        return undefined;\n      }\n    }\n  }\n\n  async getRemindersArray(options, refresh) {\n    if (!this.remindersArray || refresh) {\n      var url = this.NOTES_SERVICE;\n      url += options ? options : \"\";\n      try {\n        let serverResponse = await this.data.get(url);\n        if (!serverResponse.error) {\n          this.remindersArray = serverResponse;\n          if (Object.prototype.toString.call(this.remindersArray) === '[object Array]') {\n            this.remindersArray = this.remindersArray.filter(item => {\n              return item.isReminder;\n            });\n          }\n          return serverResponse;\n        } else {\n          this.data.processError(serverResponse);\n          return undefined;\n        }\n      } catch (error) {\n        console.log(error);\n        return undefined;\n      }\n    }\n  }\n\n  selectNote(index) {\n    if (index === undefined) {\n      this.selectedNote = this.emptyNote();\n    } else {\n      try {\n        this.selectedNote = this.utils.copyObject(this.notesArray[index]);\n        this.editNoteIndex = index;\n      } catch (error) {\n        console.log(error);\n        this.selectedNote = this.emptyNote();\n      }\n\n    }\n  }\n\n  selectNoteById(id) {\n    if (!id) return;\n    for (let i = 0; i < this.notesArray.length; i++) {\n      if (this.notesArray[i]._id === id) {\n        this.selectedNote = this.utils.copyObject(this.notesArray[i]);\n        this.editNoteIndex = i;\n        return;\n      }\n    }\n    this.selectedNote = this.emptyNote();\n  }\n\n  emptyNote() {\n    var obj = new Object();\n    obj.note = \"\";\n    obj.dateCreated = new Date();\n    obj.category = \"\";\n    obj.type = \"g\";\n    return obj;\n  }\n\n  async saveNote(index) {\n    if (!this.selectedNote) {\n      return;\n    }\n\n    if (!this.selectedNote._id) {\n      let serverResponse = await this.data.saveObject(this.selectedNote, this.NOTES_SERVICE, \"post\");\n      if (!serverResponse.error) {\n        if (this.notesArray) {\n          this.notesArray.push(this.selectedNote);\n          this.editNoteIndex = this.notesArray.length - 1;\n        }\n      } else {\n        this.data.processError(response, \"There was an error creating the note.\");\n      }\n      return serverResponse;\n    } else {\n      var serverResponse = await this.data.saveObject(this.selectedNote, this.NOTES_SERVICE, \"put\");\n      if (!serverResponse.error) {\n        this.notesArray[this.editNoteIndex] = this.utils.copyObject(this.selectedNote, this.notesArray[this.editNoteIndex]);\n      } else {\n        this.data.processError(response, \"There was an error updating the course.\");\n      }\n      return serverResponse;\n    }\n  }\n\n  async saveReminder(item, index) {\n    console.log(item)\n    if (item === undefined) {\n      return;\n    }\n\n    var serverResponse = await this.data.saveObject(item, this.NOTES_SERVICE, \"put\");\n    if (!serverResponse.error) {\n      this.remindersArray[index] = this.utils.copyObject(this.noteToSave, this.remindersArray[index]);\n    } else {\n      this.data.processError(response, \"There was an error updating the course.\");\n    }\n    return serverResponse;\n  }\n\n  async deleteNote() {\n    if (!this.selectedNote) {\n      return;\n    }\n\n    let serverResponse = await this.data.deleteObject(this.NOTES_SERVICE + '/' + this.selectedNote._id);\n    if (!serverResponse.error) {\n      this.notesArray.splice(this.editNoteIndex, 1);\n      this.editNoteIndex = - 1;\n    }\n    return serverResponse;\n\n  }\n\n  //tech notes\n  async getTechNotesArray(options, refresh) {\n    if (!this.notesArray || refresh) {\n      var url = this.TECHNOTES_SERVICE;\n      url += options ? options : \"\";\n      try {\n        let serverResponse = await this.data.get(url);\n        if (!serverResponse.error) {\n          this.techNotesArray = serverResponse;\n        } else {\n          this.data.processError(serverResponse);\n          return undefined;\n        }\n      } catch (error) {\n        console.log(error);\n        return undefined;\n      }\n    }\n  }\n\n  selectTechNote(index) {\n    if (index === undefined) {\n      this.selectedTechNote = this.emptyTechNote();\n    } else {\n      try {\n        this.selectedTechNote = this.utils.copyObject(this.techNotesArray[index]);\n        this.editTechNoteIndex = index;\n      } catch (error) {\n        console.log(error);\n        this.selectedTechNote = this.emptyTechNote();\n      }\n    }\n  }\n\n  emptyTechNote() {\n    var obj = new Object();\n    obj.note = \"\";\n    obj.dateCreated = new Date();\n    obj.file = {};\n    obj.category = \"\";\n    return obj;\n  }\n\n  async saveTechNote() {\n    if (!this.selectedTechNote) {\n      return;\n    }\n\n    if (!this.selectedTechNote._id) {\n      let serverResponse = await this.data.saveObject(this.selectedTechNote, this.TECHNOTES_SERVICE, \"post\");\n      return serverResponse;\n    } else {\n      var serverResponse = await this.data.saveObject(this.selectedTechNote, this.TECHNOTES_SERVICE, \"put\");\n      return serverResponse;\n    }\n  }\n\n  async deleteTechNote() {\n    if (!this.selectedTechNote) {\n      return;\n    }\n\n    let serverResponse = await this.data.deleteObject(this.TECHNOTES_SERVICE + '/' + this.selectedTechNote._id);\n    if (!serverResponse.error) {\n      this.techNotesArray.splice(this.editTechNoteIndex, 1);\n      this.editTechNoteIndex = - 1;\n    }\n    return serverResponse;\n\n  }\n\n  async getTechNotesCatArray(options, refresh) {\n    if (!this.notesArray || refresh) {\n      var url = this.TECHNOTESCAT_SERVICE;\n      url += options ? options : \"\";\n      try {\n        let serverResponse = await this.data.get(url);\n        if (!serverResponse.error) {\n          this.techNotesCatArray = serverResponse;\n        } else {\n          this.data.processError(serverResponse);\n          return undefined;\n        }\n      } catch (error) {\n        console.log(error);\n        return undefined;\n      }\n    }\n  }\n\n  selectTechNoteCat(index) {\n    if (index === undefined) {\n      this.selectedTechNoteCat = this.emptyTechNoteCat();\n    } else {\n      try {\n        this.selectedTechNoteCat = this.utils.copyObject(this.techNotesCatArray[index]);\n        this.editTechNoteCatIndex = index;\n      } catch (error) {\n        console.log(error);\n        this.selectedTechNoteCat = this.emptyTechNoteCat();\n      }\n    }\n  }\n\n  selectTechNoteCatByID(id) {\n    this.techNotesCatArray.forEach((item, index) => {\n      if (item._id === id) {\n        this.selectedTechNoteCat = this.utils.copyObject(item);\n        this.editTechNoteCatIndex = index;\n        return;\n      }\n    });\n    return null;\n  }\n\n  emptyTechNoteCat() {\n    var obj = new Object();\n    obj.category = \"\";\n    return obj;\n  }\n\n  async saveTechNoteCat() {\n    if (!this.selectedTechNoteCat) {\n      return;\n    }\n\n    if (!this.selectedTechNoteCat._id) {\n      let serverResponse = await this.data.saveObject(this.selectedTechNoteCat, this.TECHNOTESCAT_SERVICE, \"post\");\n      if (!serverResponse.error) {\n        if (this.notesArray) {\n          this.techNotesCatArray.push(this.selectedTechNoteCat);\n          this.editTechNoteCatIndex = this.techNotesCatArray.length - 1;\n        }\n      } else {\n        this.data.processError(response, \"There was an error creating the note.\");\n      }\n      return serverResponse;\n    } else {\n      var serverResponse = await this.data.saveObject(this.selectedTechNoteCat, this.TECHNOTESCAT_SERVICE, \"put\");\n      if (!serverResponse.error) {\n        this.techNotesCatArray[this.editTechNoteCatIndex] = this.utils.copyObject(this.selectedTechNoteCat, this.techNotesCatArray[this.editTechNoteCatIndex]);\n      } else {\n        this.data.processError(response, \"There was an error updating the tech note.\");\n      }\n      return serverResponse;\n    }\n  }\n\n  async deleteTechNoteCat() {\n    if (this.selectedTechNoteCat._id) {\n      let serverResponse = await this.data.deleteObject(this.TECHNOTESCAT_SERVICE + '/' + this.selectedTechNoteCat._id);\n      if (!serverResponse.error) {\n        this.techNotesCatArray.splice(this.editTechNoteCatIndex, 1);\n        this.editTechNoteCatIndex = - 1;\n      }\n      return serverResponse;\n    }\n    return null;\n  }\n\n  //courses\n  async getCoursesArray(refresh, options, fields) {\n    if (!this.coursesArray || refresh) {\n      var url = this.COURSES_SERVICE;\n      url += options ? options : \"\";\n      try {\n        let serverResponse = await this.data.get(url);\n        if (!serverResponse.error) {\n          this.coursesArray = serverResponse;\n        }\n      } catch (error) {\n        console.log(error);\n      };\n    }\n  }\n\n  selectCourse(index) {\n    if (index === undefined) {\n      this.selectedCourse = this.emptyCourse();\n    } else {\n      try {\n        this.selectedCourse = this.utils.copyObject(this.coursesArray[index]);\n        this.editCourseIndex = index;\n      } catch (error) {\n        console.log(error);\n        this.selectedCourse = this.emptyCourse();\n      }\n\n    }\n  }\n\n  emptyCourse() {\n    var newObj = new Object();;\n    newObj.name = \"\";\n    newObj.description = \"\";\n    newObj.number = \"\";\n    newObj.active = true;\n    return newObj;\n  }\n\n  async saveCourse() {\n    if (!this.selectedCourse) {\n      return;\n    }\n\n    if (!this.selectedCourse._id) {\n      let serverResponse = await this.data.saveObject(this.selectedCourse, this.COURSES_SERVICE, \"post\");\n      if (!serverResponse.error) {\n        this.selectedCourse = this.utils.copyObject(serverResponse);\n        if (this.coursesArray) this.coursesArray.push(this.selectedCourse);\n        this.editIneditCourseIndex = this.coursesArray.length - 1;\n      } else {\n        this.data.processError(response, \"There was an error creating the product.\");\n      }\n      return serverResponse;\n    } else {\n      var serverResponse = await this.data.saveObject(this.selectedCourse, this.COURSES_SERVICE, \"put\");\n      if (!serverResponse.error) {\n        this.selectedCourse = this.utils.copyObject(serverResponse);\n        this.coursesArray[this.editCourseIndex] = this.utils.copyObject(this.selectedCourse, this.coursesArray[this.editCourseIndex]);\n      } else {\n        this.data.processError(response, \"There was an error updating the course.\");\n      }\n      return serverResponse;\n    }\n  }\n\n  isCourseDirty() {\n    if (this.editCourseIndex >= 0 && this.selectedCourse) {\n      return this.utils.objectsEqual(this.selectedCourse, this.coursesArray[this.editCourseIndex]);\n    }\n  }\n\n  async requestPasswordReset(obj) {\n    let serverResponse = await this.data.saveObject(obj, this.PASSWORD_RESET, \"post\");\n    return serverResponse;\n  }\n\n  async getPasswordReset(validationCode) {\n    let serverResponse = await this.data.get(this.PASSWORD_RESET + '/' + validationCode);\n    if (!serverResponse.code) {\n      this.selectedPerson = serverResponse;\n    }\n    return serverResponse;\n  }\n\n}\n","import { inject } from 'aurelia-framework';\r\nimport { DataServices } from './dataServices';\r\nimport { Utils } from '../utils/utils';\r\n\r\n@inject(DataServices, Utils)\r\nexport class Products {\r\n\r\n    PRODUCTS_SERVICE = 'products';\r\n\r\n    constructor(data, utils) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n    }\r\n\r\n    async getProductsArray(options, refresh) {\r\n        if (!this.productsArray || refresh) {\r\n            var url = this.PRODUCTS_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.productsArray = serverResponse;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n   \r\n    async getProduct(index){\r\n        if(index){\r\n            let id = this.productsArray[index]._id;\r\n            let serverResponse = await this.data.get(this.PRODUCTS_SERVICE + \"/\" + id);\r\n            if(!serverResponse.error){\r\n                this.selectedProduct = serverResponse;\r\n                this.productsArray[index] = this.utils.copyObject(this.selectedProduct);\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    selectProduct(index) {\r\n        if (index === undefined) {\r\n            this.selectedProduct = this.emptyProduct();\r\n            this.newSystem = true;\r\n        } else {\r\n            try {\r\n                this.selectedProduct = this.utils.copyObject(this.productsArray[index]);\r\n                this.newSystem = false;\r\n                this.editIndex = index;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.selectedProduct = this.emptyProduct();\r\n                this.newSystem = true;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    selectedProductFromId(id) {\r\n        this.selectedProduct = this.emptyProduct();\r\n        this.productsArray.forEach((item) => {\r\n            if (item._id === id) {\r\n                this.selectedProduct = this.utils.copyObject(item);\r\n                return;\r\n            }\r\n        });\r\n        return null;\r\n    }\r\n\r\n    emptyProduct() {\r\n        var newProduct = new Object();;\r\n        newProduct.clientKey = \"\";\r\n        newProduct.name = \"\";\r\n        newProduct.sapName = \"\";\r\n        newProduct.hostWhere = \"\";\r\n        newProduct.uaCurriculum = \"\";\r\n        newProduct.defaultStudentIdPrefix = \"\";\r\n        newProduct.defaultFacultyIdPrefix = \"\";\r\n        newProduct.defaultStudentPassword = \"\";\r\n        newProduct.defaultFacultyPassword = \"\";\r\n        newProduct.comment = \"\";\r\n        newProduct.Client_Info = \"\";\r\n        newProduct.fileName = \"\";\r\n        newProduct.dataset = \"\";\r\n        newProduct.idsAvailable = \"\";\r\n        newProduct.firstAllowableId = 1;\r\n        newProduct.active = true;\r\n        newProduct.systems = new Array();\r\n        return newProduct;\r\n    }\r\n\r\n    getProductInfo(id) {\r\n        if (!id) return null;\r\n        for (var i = 0; i < this.productsArray.length; i++) {\r\n            if (this.productsArray[i]._id === id) {\r\n                if (this.productsArray[i].productDescription) {\r\n                    return {\r\n                        info: this.productsArray[i].productDescription,\r\n                        productId: id,\r\n                        header: this.productsArray[i].name\r\n                    }\r\n                } else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    async saveProduct() {\r\n        if (!this.selectedProduct) {\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedProduct._id) {\r\n            let serverResponse = await this.data.saveObject(this.selectedProduct, this.PRODUCTS_SERVICE, \"post\");\r\n            if (!serverResponse.error) {\r\n                this.productsArray.push(serverResponse);\r\n                this.editIndex = this.productsArray.length - 1;\r\n            } else {\r\n                this.data.processError(serverResponse, \"There was an error creating the product.\");\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedProduct, this.PRODUCTS_SERVICE, \"put\");\r\n            if (!serverResponse.error) {\r\n                this.productsArray[this.editIndex] = this.utils.copyObject(this.selectedProduct, this.productsArray[this.editIndex]);\r\n            } else {\r\n                this.data.processError(serverResponse, \"There was an error updating the product.\");\r\n            }\r\n            return serverResponse;\r\n        }\r\n\r\n    }\r\n\r\n    async deleteProduct() {\r\n        let serverResponse = await this.data.deleteObject(this.PRODUCTS_SERVICE + '/' + this.selectedProduct._id);\r\n        if (!serverResponse.error) {\r\n            this.productsArray.splice(this.editIndex, 1);\r\n            this.editIndex = - 1;\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    isDirty() {\r\n        if (this.selectedProduct) {\r\n            if (this.selectedProduct._id) {\r\n                var obj = this.productsArray[this.editIndex];\r\n            } else {\r\n                var obj = this.emptyProduct();\r\n            }\r\n            return this.utils.objectsEqual(this.selectedProduct, obj);\r\n        }\r\n    }\r\n}\r\n","export class SessionObj{\r\n\ttoken;\r\n\tuser;\r\n}","import { inject } from 'aurelia-framework';\r\nimport { DataServices } from './dataServices';\r\nimport { Utils } from '../utils/utils';\r\nimport { AppConfig } from '../../config/appConfig';\r\nimport moment from 'moment';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class Sessions {\r\n\r\n    SESSIONS_SERVICE = \"sessions\";\r\n\r\n    constructor(data, utils, config) {\r\n        this.data = data;\r\n        this.utils = utils;\r\n        this.config = config;\r\n    }\r\n\r\n    async getSessionsArray(options, refresh) {\r\n        if (!this.sessionsArray || refresh) {\r\n            var url = this.SESSIONS_SERVICE;\r\n            url += options ? options : \"\";\r\n            try {\r\n                let serverResponse = await this.data.get(url);\r\n                if (!serverResponse.error) {\r\n                    this.sessionsArray = serverResponse;\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    selectSession(index) {\r\n        if (!index && index != 0) {\r\n            this.selectedSession = this.emptySession();\r\n        } else {\r\n            try {\r\n                this.selectedSession = this.utils.copyObject(this.sessionsArray[index]);\r\n                this.editIndex = index;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.selectedSession = this.emptySesssion();\r\n                this.newSession = true;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    selectSessionById(id) {\r\n        this.selectedSession = null;\r\n        for (var i = 0; i < this.sessionsArray.length; i++) {\r\n            if (this.sessionsArray[i]._id === id) {\r\n                this.selectedSession = this.utils.copyObject(this.sessionsArray[i]);\r\n                this.editIndex = i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    setSession(session){\r\n        this.selectedSession = session;\r\n    }\r\n\r\n    emptySession() {\r\n        var newSessionObj = new Object();\r\n        newSessionObj.session = \"\";\r\n        newSessionObj.year = \"\";\r\n        newSessionObj.startDate = \"\";\r\n        newSessionObj.endDate = \"\";\r\n        newSessionObj.requestsOpenDate = \"\";\r\n        newSessionObj.sessionStatus = \"Next\";\r\n\r\n        let sessions = this.sessionsArray.sort((a,b) => {\r\n            return moment(a.startDate).isBefore( b.startDate);\r\n        });\r\n\r\n        var nextSession = -1;\r\n        //Search for the most recent session and set the next session\r\n        if (!sessions[0]) {\r\n            var today = new Date();\r\n            var month = today.getMonth();\r\n            var year = today.getFullYear();\r\n            nextSession = 1;\r\n          \r\n            for (var i = 0, x = this.config.SESSION_PARAMS.length; i < x; i++) {\r\n                if (month >= parseInt(this.config.SESSION_PARAMS[i].startMonth) && month <= parseInt(this.config.SESSION_PARAMS[i].endMonth)) {\r\n                    nextSession = i + 1;\r\n                    break;\r\n                }\r\n            }\r\n            var thisYear = nextSession != 4 ? year : year--;\r\n        } else {\r\n            for (var i = 0, x = this.config.SESSION_PARAMS.length; i < x; i++) {\r\n                if (sessions[0].session === this.config.SESSION_PARAMS[i].session) {\r\n                    nextSession = i + 1;\r\n                    break;\r\n                }\r\n            }\r\n             var thisYear = parseInt(sessions[0].year);\r\n            \r\n        }\r\n\r\n        //If the next session is the fifth session then set it to the first session\r\n        if (nextSession === 4) nextSession = 0;\r\n        //Set the session name\r\n        newSessionObj.session = this.config.SESSION_PARAMS[nextSession].session;\r\n        //And the year\r\n        // let thisYear = parseInt(sessions[0].year);\r\n        if(nextSession === 0) thisYear++;\r\n        newSessionObj.year = thisYear;\r\n        if (nextSession === 3) {\r\n            newSessionObj.year = thisYear + \"/\" + (parseInt(thisYear) + 1);\r\n        }\r\n\r\n        //Set the dates\r\n        newSessionObj.startDate = thisYear + \"-\" + this.config.SESSION_PARAMS[nextSession].startMonth + \"-\" + this.config.SESSION_PARAMS[nextSession].startDay;\r\n        if (nextSession === 3) {\r\n            thisYear = parseInt(thisYear) + 1;\r\n            newSessionObj.endDate = thisYear + \"-\" + this.config.SESSION_PARAMS[nextSession].endMonth + \"-\" + this.config.SESSION_PARAMS[nextSession].endDay;\r\n        } else {\r\n            newSessionObj.endDate = thisYear + \"-\" + this.config.SESSION_PARAMS[nextSession].endMonth + \"-\" + this.config.SESSION_PARAMS[nextSession].endDay;\r\n        }\r\n        newSessionObj.requestsOpenDate = thisYear + \"-\" + this.config.SESSION_PARAMS[nextSession].openMonth + \"-\" + this.config.SESSION_PARAMS[nextSession].openDay;\r\n\r\n        return newSessionObj;\r\n    }\r\n\r\n    async saveSession() {\r\n        if (!this.selectedSession) {\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedSession._id) {\r\n            let serverResponse = await this.data.saveObject(this.selectedSession, this.SESSIONS_SERVICE, \"post\");\r\n            if (!serverResponse.error) {\r\n                this.sessionsArray.unshift(serverResponse);\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedSession, this.SESSIONS_SERVICE, \"put\");\r\n            if (!serverResponse.error) {\r\n                this.sessionsArray[this.editIndex] = this.utils.copyObject(this.selectedSession);\r\n            }\r\n            return serverResponse;\r\n        }\r\n\r\n    }\r\n\r\n    isDirty() {\r\n\r\n        if (this.selectedSession) {\r\n            if (this.selectedSession._id) {\r\n                var obj = this.sessionsArray[this.editIndex];\r\n            } else {\r\n                var obj = this.emptySession();\r\n            }\r\n            return this.utils.objectsEqual(this.selectedSession, obj);\r\n        }\r\n    }\r\n}\r\n","import { inject } from 'aurelia-framework';\nimport { DataServices } from './dataServices';\nimport { Utils } from '../utils/utils';\nimport { AppConfig } from '../../config/appConfig';\nimport moment from 'moment';\n\n@inject(DataServices, Utils, AppConfig)\nexport class SiteInfo {\n\n  SITE_SERVICES = 'site';\n  MESSAGE_SERVICES = 'messages';\n\n  constructor(data, utils, config) {\n    this.data = data;\n    this.utils = utils;\n    this.config = config;\n  }\n\n  async getInfoArray(refresh, options) {\n    if (!this.siteArray || refresh) {\n      var url = this.SITE_SERVICES;\n      url += options ? options : \"\";\n      try {\n        let serverResponse = await this.data.get(url);\n        if (!serverResponse.error) {\n          this.siteArray = serverResponse;\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  async getObject(id) {\n    if (id) {\n      let serverResponse = await this.data.get(this.SITE_SERVICES + \"/\" + id);\n      if (!serverResponse.error) {\n        this.selectedObject = serverResponse;\n      }\n      return serverResponse;\n    }\n  }\n\n\n  selectObject(index) {\n    if (!index || index === -1) {\n      this.selectedItem = this.emptyItem();\n    } else {\n      try {\n        this.selectedItem = this.utils.copyObject(this.siteArray[index]);\n        this.editIndex = index;\n      } catch (error) {\n        console.log(error);\n      }\n\n    }\n  }\n\n  setObject(item) {\n    this.selectedItem = this.utils.copyObject(item);\n  }\n\n  emptyItem() {\n    var newItem = new Object();;\n    newItem.title = \"\";\n    newItem.content = \"\";\n    newItem.url = \"\";\n    newItem.createdDate = new Date();\n    newItem.expiredDate = moment(new Date()).add(1, 'years');\n    newItem.image = \"\";\n    newItem.priority = \"INFO\";\n    newItem.itemType = \"NEWS\";\n    newItem.sortOrder = 0;\n    newItem.file = new Object();\n    return newItem;\n  }\n\n  async saveObject() {\n    if (!this.selectedObject) {\n      return;\n    }\n\n    if (!this.selectedObject._id) {\n      let serverResponse = await this.data.saveObject(this.selectedObject, this.SITE_SERVICES, \"post\");\n\n      return serverResponse;\n    } else {\n      var serverResponse = await this.data.saveObject(this.selectedObject, this.SITE_SERVICES, \"put\");\n\n      return serverResponse;\n    }\n  }\n\n  async uploadFile(files) {\n    let response = await this.data.uploadFiles(files, this.SITE_SERVICES + '/upload/' + this.selectedItem._id);\n    if (!response.error) {\n      this.siteArray[this.editIndex] = this.utils.copyObject(response, this.siteArray[this.editIndex]);\n    }\n  }\n\n  async deleteObject() {\n    let serverResponse = await this.data.deleteObject(this.SITE_SERVICES + '/' + this.selectedItem._id);\n    if (!serverResponse.error) {\n      this.siteArray.splice(this.editIndex, 1);\n      this.editIndex = - 1;\n    }\n    return serverResponse;\n  }\n\n  isDirty(obj) {\n    if (this.selectedItem) {\n      if (!obj) {\n        var obj = this.emptyItem();\n      }\n      var skip = ['file'];\n      return this.utils.objectsEqual(this.selectedItem, obj, skip);\n    }\n    return new Array();\n  }\n\n  async getWeather(city) {\n    let response = this.data.get('getWeather/' + city)\n    return response;\n  }\n\n  showCarousel() {\n    for (let i = 0; i < this.siteArray.length; i++) {\n      if (this.siteArray[i].itemType === 'CARO') return true\n    }\n    return false;\n  }\n\n  async getMessageArray(options, refresh) {\n    if (!this.messageArray || refresh) {\n      var url = this.MESSAGE_SERVICES;\n      url += options ? options : \"\";\n      try {\n        let serverResponse = await this.data.get(url);\n        if (!serverResponse.error) {\n          this.messageArray = serverResponse;\n        } else {\n          this.data.processError(serverResponse);\n          return undefined;\n        }\n      } catch (error) {\n        console.log(error);\n        return undefined;\n      }\n    }\n    return this.messageArray;\n  }\n\n  selectMessageByKey(key) {\n    var index = this.utils.arrayContainsValue(this.messageArray, 'key', key);\n    if (index > -1) {\n      return this.messageArray[index];\n    }\n    return null;\n  }\n\n  selectMessage(index) {\n    if (index === -1) {\n      this.selectedMessage = this.emptyMessage();\n    } else {\n      try {\n        this.selectedMessage = this.utils.copyObject(this.messageArray[index]);\n        this.editMessageIndex = index;\n      } catch (error) {\n        console.log(error);\n      }\n\n    }\n  }\n\n  emptyMessage() {\n    var newMessage = new Object();;\n    newMessage.description = \"\";\n    newMessage.content = \"\";\n    return newMessage;\n  }\n\n  async saveMessageItem() {\n    if (!this.selectedMessage) {\n      return;\n    }\n\n    if (!this.selectedMessage._id) {\n      let serverResponse = await this.data.saveObject(this.selectedMessage, this.MESSAGE_SERVICES, \"post\");\n      if (!serverResponse.error) {\n        this.messageArray.push(this.selectedMessage);\n      }\n      return serverResponse;\n    } else {\n      var serverResponse = await this.data.saveObject(this.selectedMessage, this.MESSAGE_SERVICES, \"put\");\n      if (!serverResponse.error) {\n        this.messageArray[this.editMessageIndex] = this.utils.copyObject(this.selectedMessage, this.messageArray[this.editMessageIndex]);\n      }\n      return serverResponse;\n    }\n  }\n\n  isMessageDirty(obj) {\n    if (this.selectedMessage) {\n      if (!obj) {\n        var obj = this.emptyItem();\n      }\n      return this.utils.objectsEqual(this.selectedMessage, obj);\n    }\n    return new Array();\n  }\n\n  async deleteMessage() {\n    let serverResponse = await this.data.deleteObject(this.SITE_SERVICES + '/' + this.selectedMessage._id);\n    if (!serverResponse.error) {\n      this.messageArray.splice(this.editMessageIndex, 1);\n      this.editMessageIndex = - 1;\n    }\n    return serverResponse;\n  }\n\n}\n","import {inject} from 'aurelia-framework';\r\nimport {DataServices} from './dataServices';\r\nimport {Products} from './dataServices';\r\nimport {Utils} from '../utils/utils';\r\nimport {AppConfig} from '../../config/appConfig';\r\nimport { observable } from 'aurelia-framework';\r\n\r\n@inject(DataServices, Utils, AppConfig)\r\nexport class Systems{\r\n\r\n    SYSTEMS_SERVICE = \"systems\";\r\n    CHANGE_SERVICE = \"change\";\r\n    CHANGE_CATEGORY_SERVICE = \"changeCategory\";\r\n\r\n    constructor(data, utils, config){\r\n        this.data = data;\r\n        this.utils = utils;\r\n        this.config = config;\r\n    }\r\n\r\n    async getSystemsArray(options, refresh){\r\n        if(!this.systemsArray || refresh) {\r\n            var url = this.SYSTEMS_SERVICE;\r\n            url += options ? options : \"\";\r\n             try{\r\n                let serverResponse = await this.data.get(url);\r\n                if(!serverResponse.error){\r\n                    this.systemsArray = serverResponse;\r\n                } \r\n            } catch(error){\r\n                console.log(error);\r\n                this.systemsArray = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    async getSystem(index){\r\n        if(index >= 0){\r\n            let id = this.systemsArray[index]._id;\r\n            let serverResponse = await this.data.get(this.SYSTEMS_SERVICE + \"/\" + id);\r\n            if(!serverResponse.error){\r\n                this.selectedSystem = serverResponse;\r\n                this.systemsArray[index] = this.utils.copyObject(this.selectedSystem);\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    async getConfiguredProductSystems(sids){\r\n        if(sids){\r\n            let serverResponse = await this.data.get(this.SYSTEMS_SERVICE + \"/product/\" + sids);\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    async getAPJConfiguredProductSystems(sids){\r\n        if(sids){\r\n            let serverResponse = await this.data.get('apj/' + this.SYSTEMS_SERVICE + \"/product/\" + sids);\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    selectSystem(index){\r\n        if(!index && index != 0) {\r\n            this.selectedSystem = this.emptySystem();\r\n            this.newSystem = true;\r\n        } else {\r\n            try{\r\n                this.selectedSystem = this.utils.copyObject(this.systemsArray[index]);\r\n                this.newSystem = false;\r\n                this.editIndex = index;\r\n            } catch (error){\r\n                console.log(error);\r\n                this.selectedSystem = this.emptySystem();\r\n                this.newSystem = true;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    selectedSystemFromId(id){\r\n      this.selectedSystem = null;\r\n      for(var i = 0, x = this.systemsArray.length; i < x; i++){\r\n        if(this.systemsArray[i]._id === id){\r\n          this.selectedSystem = this.utils.copyObject(this.systemsArray[i]);\r\n          this.editIndex = i;\r\n          break;\r\n        }\r\n      };\r\n    }\r\n\r\n    selectedProductSystemFromId(id, systems){\r\n        this.selectedSystem = null;\r\n        for(var i = 0, x = systems.length; i < x; i++){\r\n          if(systems[i]._id === id){\r\n            this.selectedSystem = this.utils.copyObject(systems[i]);\r\n            this.editIndex = i;\r\n            break;\r\n          }\r\n        };\r\n    }\r\n\r\n    setSelectedSystem(system){\r\n        this.selectedSystem = this.utils.copyObject(system);\r\n    }\r\n\r\n    emptySystem(){\r\n        var newSystemObj = {};\r\n        newSystemObj.sid = \"\";\r\n        newSystemObj.active = true;\r\n        newSystemObj.description = \"\";\r\n        newSystemObj.server = \"\";\r\n        newSystemObj.instance = \"\";\r\n        newSystemObj.its = \"\";\r\n        newSystemObj.terms = \"\";\r\n        newSystemObj.idsAvailable = 0;\r\n        newSystemObj.productId = new Array();\r\n        newSystemObj.clients = [];\r\n        return newSystemObj;\r\n    }\r\n\r\n    async saveSystem(){\r\n        if(!this.selectedSystem){\r\n            return;\r\n        }\r\n\r\n        if(!this.selectedSystem._id){\r\n            let serverResponse = await this.data.saveObject(this.selectedSystem, this.SYSTEMS_SERVICE, \"post\");\r\n            if(!serverResponse.error){\r\n                 this.systemsArray.push(serverResponse);\r\n            } else {\r\n                this.data.processError(serverResponse,\"Error updating the system.<br>\")\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedSystem, this.SYSTEMS_SERVICE, \"put\");\r\n            if(!serverResponse.error){\r\n                this.selectedSystem = serverResponse;\r\n                this.systemsArray[this.editIndex] = this.utils.copyObject(this.selectedSystem);\r\n            } else {\r\n                this.data.processError(serverResponse,\"Error updating the system.<br>\")\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    async saveClient(clientToSave){\r\n      await this.data.saveObject(clientToSave, this.SYSTEMS_SERVICE + \"/client\", \"put\");\r\n    }\r\n\r\n    async deleteSystem(){\r\n        let serverResponse = await this.data.deleteObject(this.SYSTEMS_SERVICE + '/' + this.selectedSystem._id);\r\n        if (!serverResponse.error) {\r\n            this.systemsArray.splice(this.editIndex, 1);\r\n            this.editIndex = - 1;\r\n        } else {\r\n            this.data.processError(serverResponse,\"Error deleting the system.<br>\")\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    async saveProductChanges(obj){\r\n        let response = await this.data.saveObject(obj, this.SYSTEMS_SERVICE + '/product/', \"put\");\r\n        return response;\r\n    }\r\n\r\n    isDirty(obj, skip){\r\n        if(this.selectedSystem){\r\n            if(!obj){\r\n                var obj = this.emptySystem();\r\n            }\r\n            return this.utils.objectsEqual(this.selectedSystem, obj, skip);\r\n        }\r\n        return new Array();\r\n    }\r\n\r\n    async deleteAllClients(){\r\n        if(this.selectedSystem._id){\r\n            this.selectedSystem.clients = new Array();\r\n        }\r\n    }\r\n\r\n    generateClients(start, end, status, product, interval, idsAvailable){\r\n        if(!this.selectedSystem){\r\n            return {error: \"No system selected.\"};\r\n        }\r\n\r\n        this.selectedSystem.clients = this.selectedSystem.clients || new Array();\r\n        var lastClientIndex = this.selectedSystem.clients.length - 1;\r\n        if( start > 0 &&  end > 0 && end >= start){\r\n            for(var i = start; i <= end; i += interval){\r\n                if(this._findClient(i, 0, lastClientIndex) < 0){\r\n                    this.selectedSystem.clients.push(this.emptyClient(i, status, product, idsAvailable));\r\n                }\r\n            }\r\n            return true;\r\n        } else {\r\n            return {error: \"Enter valid start and end client numbers\"}\r\n        }\r\n    }\r\n\r\n    refreshClients(status, products){\r\n         for(var i = 0, x = this.selectedSystem.clients.length; i<x; i++){ \r\n            var aProduct = {firstAllowableID: 1, _id: null};\r\n            this.selectedSystem.clients.forEach(item => {\r\n                if(item.productId !== aProduct._id){\r\n                    for(let j = 0; j < products.length; j++){\r\n                        if(products[j]._id === item.productId){\r\n                            aProduct = products[j];\r\n                            this.selectedSystem.clients[i] = this.emptyClient(this.selectedSystem.clients[i].client, status, aProduct, aProduct.idsAvailable);\r\n                            break;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.selectedSystem.clients[i] = this.emptyClient(this.selectedSystem.clients[i].client, status, aProduct, aProduct.idsAvailable);\r\n                }\r\n            })\r\n            \r\n        }\r\n    }\r\n\r\n    _findClient(client, start, end){\r\n        if(end >= 0){\r\n            for(var i = start; i<=end; i++ ){\r\n                if(parseInt(this.selectedSystem.clients[i].client) === client) return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    selectClient(index){\r\n        if(index != undefined) {\r\n            this.selectedClient = this.utils.copyObject(this.selectedSystem.clients[index]);\r\n            this.clientIndex = index;\r\n        }\r\n    }\r\n\r\n    selectClientFromIDNoSystem(systemId, clientId){\r\n        console.log('The wrong function')\r\n      this.selectedClient = null;\r\n      for(var i = 0, x = this.systemsArray.length; i < x; i++){\r\n        if(this.systemsArray[i]._id === systemId){\r\n            for(var j = 0; j < this.systemsArray[i].clients.length; j++){\r\n                if(this.systemsArray[i].clients[j].client == clientId){\r\n                    this.selectedClient = this.utils.copyObject(this.systemsArray[i].clients[j]);\r\n                    this.clientIndex = j;\r\n                    break;\r\n                }\r\n            }  \r\n        }\r\n      }\r\n    }\r\n\r\n    selectClientFromIDNoSystem(systemId, clientId, systems){\r\n        console.log('Using the right one');\r\n        this.selectedClient = null;\r\n        for(var i = 0, x = systems.length; i < x; i++){\r\n          if(systems[i]._id === systemId){\r\n              for(var j = 0; j < systems[i].clients.length; j++){\r\n                  if(systems[i].clients[j].client == clientId){\r\n                      this.selectedClient = this.utils.copyObject(systems[i].clients[j]);\r\n                      this.clientIndex = j;\r\n                      break;\r\n                  }\r\n              }  \r\n          }\r\n        }\r\n      }\r\n    \r\n    selectClientFromID(systemId, clientId){\r\n      this.selectedClient = null;\r\n      for(var i = 0, x = this.systemsArray.length; i < x; i++){\r\n        if(this.systemsArray[i]._id === systemId){\r\n            this.selectedSystem = this.utils.copyObject(this.systemsArray[i]);\r\n            for(var j = 0; j < this.systemsArray[i].clients.length; j++){\r\n                if(this.systemsArray[i].clients[j].client == clientId){\r\n                    this.selectedClient = this.utils.copyObject(this.systemsArray[i].clients[j]);\r\n                    this.clientIndex = j;\r\n                    break;\r\n                }\r\n            }  \r\n        }\r\n      }\r\n    }\r\n\r\n    selectClientFromNumber(systemId, client){\r\n        this.selectedClient = null;\r\n        for(var i = 0, x = this.systemsArray.length; i < x; i++){\r\n            if(this.systemsArray[i]._id === systemId){\r\n                this.selectedSystem = this.utils.copyObject(this.systemsArray[i]);\r\n                for(var j = 0; j < this.systemsArray[i].clients.length; j++){\r\n                    if(this.systemsArray[i].clients[j].client === client){\r\n                        this.selectedClient = this.utils.copyObject(this.systemsArray[i].clients[j]);\r\n                        this.clientIndex = j;\r\n                        break;\r\n                    }\r\n                }  \r\n            }\r\n        }\r\n    }\r\n\r\n    emptyClient(clientNo, status, product, idsAvailable){\r\n        let obj = new Object();\r\n        obj.client = clientNo;\r\n        obj.clientStatus = status;\r\n        obj.systemId = this.selectedSystem._id;\r\n        obj.idsAvailable = product.idsAvailable;\r\n        obj.assignments = new Array(); \r\n        obj.createdDate = new Date();\r\n        obj.lastIdAssigned = 0;\r\n        obj.lastFacIdAssigned = 0;\r\n        obj.firstFacIdAssigned = 0;\r\n        obj.manual = false;\r\n        obj.productId = product ? product._id : null;\r\n        obj.firstAllowableID = product.firstAllowableId ? parseInt(product.firstAllowableId) : 1;\r\n        return obj;\r\n    }\r\n\r\n    selectClient(index){\r\n        if(index != undefined) {\r\n            this.selectedClient = this.utils.copyObject(this.selectedSystem.clients[index]);\r\n            this.clientIndex = index;\r\n        }\r\n    }\r\n    \r\n    /*****************************************************************************************************\r\n     * Find the client in a systems client list and update it, used by client request assignment\r\n     ****************************************************************************************************/\r\n    updateClient(client, systemId){\r\n        if(!systemId){\r\n            for(var i = 0, x = this.systemsArray.length; i < x; i++){\r\n                if(this.systemsArray[i]._id === client.systemId){\r\n                    for(var j = 0; j < this.systemsArray[i].clients.length; j++){\r\n                        if(this.systemsArray[i].clients[j].client == client.client){\r\n                            this.systemsArray[i].clients[j] = this.utils.copyObject(client);\r\n                            break;\r\n                        }\r\n                    }  \r\n                }\r\n            };\r\n        } else {\r\n            for(var j = 0; j < this.systemsArray[i].clients.length; j++){\r\n                if(this.systemsArray[i].clients[j].client == client.client){\r\n                    this.systemsArray[i].clients[j] = this.utils.copyObject(client);\r\n                    break;\r\n                }\r\n            } \r\n        }\r\n        \r\n    }\r\n\r\n    async getAssignmentDetails(id){\r\n        var url = \"/serverAssignments/\" + id;\r\n        let serverResponse = await this.data.get(url);\r\n        if (!serverResponse.error) {\r\n            this.assignmentDetailsArray = serverResponse.sort((a,b) => {\r\n                return a.lastName < b.lastName ? -1 : 1;\r\n            });\r\n        }  else {\r\n            this.data.processError(serverResponse);\r\n        }\r\n    }\r\n\r\n    //Change\r\n    async getChangeArray(options, refresh){\r\n        if(!this.changeArray || refresh) {\r\n            var url = this.CHANGE_SERVICE;\r\n            url += options ? options : \"\";\r\n             try{\r\n                let serverResponse = await this.data.get(url);\r\n                if(!serverResponse.error){\r\n                    this.changeArray = serverResponse;\r\n                } \r\n            } catch(error){\r\n                console.log(error);\r\n                this.changeArray = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    async getChange(index){\r\n        if(index >= 0){\r\n            let id = this.changeArray[index]._id;\r\n            let serverResponse = await this.data.get(this.CHANGE_SERVICE + \"/\" + id);\r\n            if(!serverResponse.error){\r\n                this.selectedChange = serverResponse;\r\n                this.changeArray[index] = this.utils.copyObject(this.selectedChange);\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    selectChange(index){\r\n        if(!index && index != 0) {\r\n            this.selectedChange = this.emptyChange();\r\n        } else {\r\n            try{\r\n                this.selectedChange = this.utils.copyObject(this.changeArray[index]);\r\n                this.changeIndex = index;\r\n            } catch (error){\r\n                console.log(error);\r\n                this.selectedChange = this.emptyChange();\r\n            }\r\n        }\r\n    }\r\n\r\n    emptyChange(){\r\n        var newObj = {};\r\n        newObj.category = \"\";\r\n        newObj.content = \"\";\r\n        return newObj;\r\n    }\r\n\r\n    async saveChange(){\r\n        if(!this.selectedChange){\r\n            return;\r\n        }\r\n\r\n        if(!this.selectedChange._id){\r\n            let serverResponse = await this.data.saveObject(this.selectedChange, this.CHANGE_SERVICE, \"post\");\r\n            if(!serverResponse.error){\r\n                 this.changeArray.push(serverResponse);\r\n            } else {\r\n                this.data.processError(serverResponse,\"Error updating the change.<br>\")\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedChange, this.CHANGE_SERVICE, \"put\");\r\n            if(!serverResponse.error){\r\n                this.selectedChange = serverResponse;\r\n                this.changeArray[this.changeIndex] = this.utils.copyObject(this.selectedChange);\r\n            } else {\r\n                this.data.processError(serverResponse,\"Error updating the change .<br>\")\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    async deleteChange(){\r\n        let serverResponse = await this.data.deleteObject(this.CHANGE_SERVICE + '/' + this.selectedChange._id);\r\n        if (!serverResponse.error) {\r\n            this.changeArray.splice(this.editIndex, 1);\r\n            this.editIndex = - 1;\r\n        } else {\r\n            this.data.processError(serverResponse,\"Error deleting the change.<br>\")\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    //Change Category\r\n    async getChangeCategoryArray(options, refresh){\r\n        if(!this.changeCategoryArray || refresh) {\r\n            var url = this.CHANGE_CATEGORY_SERVICE;\r\n            url += options ? options : \"\";\r\n             try{\r\n                let serverResponse = await this.data.get(url);\r\n                if(!serverResponse.error){\r\n                    this.changeCategoryArray = serverResponse;\r\n                } \r\n            } catch(error){\r\n                console.log(error);\r\n                this.changeCategoryArray = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    async getChangeCategory(index){\r\n        if(index >= 0){\r\n            let id = this.changeCategoryArray[index]._id;\r\n            let serverResponse = await this.data.get(this.CHANGE_CATEGORY_SERVICE + \"/\" + id);\r\n            if(!serverResponse.error){\r\n                this.selectedChangeCategory = serverResponse;\r\n                this.changeCategoryArray[index] = this.utils.copyObject(this.selectedChangeCategory);\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    selectChangeCategory(index){\r\n        if(!index && index != 0) {\r\n            this.selectedChangeCategory = this.emptyChangeCategory();\r\n        } else {\r\n            try{\r\n                this.selectedChangeCategory = this.utils.copyObject(this.changeCategoryArray[index]);\r\n                this.categoryIndex = index;\r\n            } catch (error){\r\n                console.log(error);\r\n                this.selectedChangeCategory = this.emptyChangeCategory();\r\n            }\r\n        }\r\n    }\r\n\r\n    selectChangeCategoryByCategory(category){\r\n        this.changeCategoryArray.forEach((item, index) => {\r\n            if(item.category == category) {\r\n                this.selectedChangeCategory = this.utils.copyObject(item);\r\n                this.categoryIndex = index;\r\n            }\r\n        });\r\n    }\r\n\r\n    emptyChangeCategory(){\r\n        var newCategoryObj = {};\r\n        newCategoryObj.category = \"\";\r\n        return newCategoryObj;\r\n    }\r\n\r\n    async categortInUse(){\r\n        let response = await this.data.get(this.CHANGE_CATEGORY_SERVICE + \"?filter=category|eq|\" + this.selectedChangeCategory.category);\r\n        if(!response.error) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async saveChangeCategory(){\r\n        if(!this.selectedChangeCategory){\r\n            return;\r\n        }\r\n\r\n        if(!this.selectedChangeCategory._id){\r\n            let serverResponse = await this.data.saveObject(this.selectedChangeCategory, this.CHANGE_CATEGORY_SERVICE, \"post\");\r\n            if(!serverResponse.error){\r\n                 this.changeCategoryArray.push(serverResponse);\r\n            } else {\r\n                this.data.processError(serverResponse,\"Error updating the change category.<br>\")\r\n            }\r\n            return serverResponse;\r\n        } else {\r\n            var serverResponse = await this.data.saveObject(this.selectedChangeCategory, this.CHANGE_CATEGORY_SERVICE, \"put\");\r\n            if(!serverResponse.error){\r\n                this.selectedChangeCategory = serverResponse;\r\n                this.changeCategoryArray[this.categoryIndex] = this.utils.copyObject(this.selectedChangeCategory);\r\n            } else {\r\n                this.data.processError(serverResponse,\"Error updating the change category.<br>\")\r\n            }\r\n            return serverResponse;\r\n        }\r\n    }\r\n\r\n    async deleteChangeCategory(){\r\n        let serverResponse = await this.data.deleteObject(this.CHANGE_CATEGORY_SERVICE + '/' + this.selectedChangeCategory._id);\r\n        if (!serverResponse.error) {\r\n            this.changeCategoryArray.splice(this.editIndex, 1);\r\n            this.editIndex = - 1;\r\n        } else {\r\n            this.data.processError(serverResponse,\"Error deleting the change category.<br>\")\r\n        }\r\n        return serverResponse;\r\n    }\r\n    \r\n}\r\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.push([module.id, \"@import url(//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css);\"]);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".toast {\\n    opacity: 1 !important;\\n}\\n\\n.assignedColor {\\n  background-color: #dff0d8;\\n}\\n\\n.toolbar {\\n    position:fixed;\\n    z-index:1000;\\n    width:100%;\\n    top:91px;\\n    left:0;\\n    background-color:ghostwhite;\\n}\\n\\n.panelContrastColor {\\n    background-color:ghostwhite;\\n}\\n\\n.positionUnderToolbar{\\n    margin-top:50px;\\n}\\n\\n.provisional {\\n    background-color: cyan;\\n}\\n\\n.existing {\\n    background-color: LightGoldenRodYellow;\\n}\\n\\n.danger {\\n    background-color:deeppink;\\n}\\n\\n.customFont {\\n    font-family: 'Montserrat', sans-serif;\\n}\\n.card-header{\\n    font-size: 1.640625rem;\\n}\\n\\n.card-title {\\n    padding: 5px;\\n}\\n\\n.card-title {\\n    background-color: rgba(0, 0, 0, 0.03);\\n    border: 1px solid rgba(0, 0, 0, 0.125);\\n}\\n\\n.bigLabel{\\n    font-size: 1.5rem;\\n}\\n\\n.btn-default{\\n    background-color:white;\\n}\\n    .hover_img a { position:relative; }\\n    .hover_img a span { position:absolute; display:none; z-index:99; }\\n    .hover_img a:hover span { display:block; }\\n\\n    .hover {\\n        position:absolute;\\n        height: 200px;\\n        width: 600px;\\n        z-index:99;\\n        display:none; \\n        box-shadow: 10px 10px 5px #888888;\\n        overflow: hidden;\\n        background-color: white;\\n        padding: 10px;\\n    }\\n\\n.fixed\\n{\\n    position: fixed;\\n    top: 20px;\\n    right: 40px;\\n}\\n\\n.bold {\\n    font-weight: bold;\\n}\\n\\n.redText {\\n    color: purple;\\n    font-weight: bolder !important;\\n}\\n\\n.banner {\\n    height: 50px;\\n    width: 100%;\\n    background-color: white;\\n    border-bottom-style: solid;\\n    border-bottom-width: 1px;\\n}\\n\\n.banner #notice {\\n    margin-left: 30px;\\n    font-size: 1.25em;\\n    color: indianred;\\n}\\n\\n.browse .textContainer {\\n    height: 430px;\\n    line-height: 400px;\\n}\\n\\n.textContainer h4 {\\n    vertical-align: middle;\\n    display: inline-block;\\n}\\n\\n.vertical-align {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n\\n.table-borderless td,\\n.table-borderless th {\\n    border: 0 !important;\\n}\\n\\n.topMargin {\\n    margin-top: 25px;\\n}\\n\\n.smallTopMargin {\\n  margin-top: 5px;\\n}\\n\\n.bottomMargin {\\n    margin-bottom: 25px;\\n}\\n\\n.leftMargin {\\n    margin-left: 25px;\\n}\\n\\n.rightMargin {\\n  margin-right: 25px;\\n}\\n\\n.smallLeftMargin {\\n    margin-left: 10px;\\n}\\n\\n.backColorOne {\\n  background-color: ghostwhite;\\n}\\n\\n.backColorTwo{\\n  background-color: LightSalmon;\\n}\\n\\n.backColorThree {\\n  background-color: cyan;\\n}\\n\\n.backColorFour{\\n  background-color: lightgrey;\\n}\\n\\n\\n.bigTopMargin {\\n    margin-top: 50px;\\n}\\n\\n.bigLeftMargin {\\n    margin-left: 50px;\\n}\\n\\n.smallMarginTop {\\n    margin-top: 5px;\\n}\\n\\n.smallMarginRight {\\n    margin-right: 10px;\\n}\\n\\n.parallax1 {\\n\\n    /* Set a specific height */\\n    min-height: 300px;\\n\\n    /* Create the parallax scrolling effect */\\n    background-attachment: fixed;\\n    background-position: center;\\n    background-repeat: no-repeat;\\n    background-size: cover;\\n}\\n\\n.parallax2 {\\n\\n    /* Set a specific height */\\n    min-height: 200px;\\n\\n    /* Create the parallax scrolling effect */\\n    background-attachment: fixed;\\n    background-position: center;\\n    background-repeat: no-repeat;\\n    background-size: cover;\\n}\\n\\n.caption span.border {\\n    background-color: #111;\\n    color: #fff;\\n    padding: 18px;\\n    font-size: 25px;\\n    letter-spacing: 10px;\\n}\\n\\n.caption {\\n  position: absolute;\\n  left: 0;\\n  top: 25%;\\n  width: 100%;\\n  text-align: center;\\n  color: #000;\\n}\\n\\n.center-text {\\n   text-align: center;\\n}\\n\\n.home-page-header{\\n    text-align: center;\\n    font-size: 30px;\\n}\\n\\n.underline {\\n    text-decoration: underline;\\n}\\n\\n.subMenu{\\n    position: relative;\\n    top: -5px;\\n    left: 0px;\\n    width: 100%;\\n}\\n\\n.subMenu-container {\\n    position: fixed; /* Set the navbar to fixed position */\\n    top: 5rem;\\n    width: 100%;\\n    z-index:99;\\n}\\n\\n.hover {\\n    position:absolute;\\n    height: 200px;\\n    width: 600px;\\n    z-index:99;\\n    display:none;\\n    box-shadow: 10px 10px 5px #888888;\\n    overflow: hidden;\\n    background-color: white;\\n    padding: 10px;\\n}\\n\\n.hoverProfile {\\n    position:absolute;\\n    height: 250px;\\n    width: 500px;\\n    z-index:99;\\n    display:none;\\n    box-shadow: 10px 10px 5px #888888;\\n    overflow: hidden;\\n    background-color: white;\\n    padding: 10px;\\n     right:0;\\n    bottom:0;\\n}\\n\\n.overFlow {\\n    overflow-y:scroll;\\n}\\n\\n.carouselSize {\\n    width:700px;\\n    height:500px;\\n}\\n\\n.carouselImage {\\n    height:500px;\\n}\\n\\n.weatherIcon {\\n    height: 50px;\\n    width: 50px;\\n}\\n\\n.page-host {\\n    margin-top: 10rem;\\n}\\n\\nspan i {\\n    cursor: pointer;\\n}\\n\\n.sortable {\\n    cursor: pointer;   \\n}\\n\\n.aurelia-flatpickr {\\n    background-color: white !important;\\n}\\n\\n/* Dropdown Button */\\n.dropbtn {\\n    border: none;\\n    cursor: pointer;\\n}\\n\\n/* The container <div> - needed to position the dropdown content */\\n.dropdown {\\n    position: relative;\\n    display: inline-block;\\n}\\n\\n/* Dropdown Content (Hidden by Default) */\\n.dropdown-content {\\n    display: none;\\n    position: absolute;\\n    background-color: #f9f9f9;\\n    min-width: 160px;\\n    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\\n    z-index: 1;\\n}\\n\\n/* Links inside the dropdown */\\n.dropdown-content a {\\n    color: black;\\n    padding: 12px 16px;\\n    text-decoration: none;\\n    display: block;\\n}\\n\\n/* Change color of dropdown links on hover */\\n.dropdown-content a:hover {background-color: #f1f1f1}\\n\\n/* Show the dropdown menu on hover */\\n.dropdown:hover .dropdown-content {\\n    display: block;\\n}\\n\\n/* Change the background color of the dropdown button when the dropdown content is shown */\\n.dropdown:hover .dropbtn {\\n    background-color: #3e8e41;\\n}\\n\\n.smart-timeline{position:relative}\\n.smart-timeline-list{list-style:none;margin:0;padding:0}\\n.smart-timeline-list:after{content:\\\" \\\";background-color:#eee;position:absolute;display:block;width:2px;top:0;left:95px;bottom:0;z-index:1}\\n.smart-timeline-list li{position:relative;margin:0;padding:15px 0}\\n.smart-timeline-list>li:hover{background-color:#f4f4f4}\\n.smart-timeline-hover li:hover{background-color:#f9f9f9}\\n.smart-timeline-icon{background:#3276b1;color:#fff;border-radius:50%;position:absolute;width:32px;height:32px;line-height:28px;font-size:14px;text-align:center;left:80px;top:10px;z-index:100;padding:2px}\\n.smart-timeline-icon>img{height:32px;width:32px;border-radius:50%;margin-top:-2px;margin-left:-2px;border:2px solid #3276b1}\\n.smart-timeline-time{float:left;width:70px;text-align:right}\\n.smart-timeline-time>small{font-style:italic}\\n.smart-timeline-content{margin-left:123px}\\n\\n\\n/****** Style Star Rating Widget *****/\\n\\n.rating { \\n  border: none;\\n  float: left;\\n}\\n\\n.rating > span > input { display: none; } \\n.rating > span > label:before { \\n  margin: 5px;\\n  font-size: 1.25em;\\n  font-family: FontAwesome;\\n  display: inline-block;\\n  content: \\\"\\\\f005\\\";\\n}\\n\\n.rating > span > .half:before { \\n  content: \\\"\\\\f089\\\";\\n  position: absolute;\\n}\\n\\n.rating > span > label { \\n    color: #ddd; \\n    float: right; \\n}\\n\\n/***** CSS Magic to Highlight Stars on Hover *****/\\n\\n.rating > span > input:checked ~ label, /* show gold star when clicked */\\n.rating:not(:checked) > span > label:hover, /* hover current star */\\n.rating:not(:checked) > span > label:hover ~ label { color: #FFD700;  } /* hover previous stars in list */\\n\\n.rating > span > input:checked + label:hover, /* hover current star when changing rating */\\n.rating > span >  input:checked ~ label:hover,\\n.rating > span > label:hover ~ input:checked ~ label, /* lighten current selection */\\n.rating > span > input:checked ~ label:hover ~ label { color: #FFED85;  }\\n\\n.link-shadow {\\n    -webkit-box-shadow: 3px 4px 11px 0px rgba(105,97,105,1);\\n    -moz-box-shadow: 3px 4px 11px 0px rgba(105,97,105,1);\\n    box-shadow: 3px 4px 11px 0px rgba(105,97,105,1);\\n}\\n\\n#curriculumInfo{\\n     display:none;\\n}\\n\\nux-dialog-header {\\n    background-color: #ffbd00 ;\\n    color: white;\\n}\\n\\n.col-centered{\\n    float: none;\\n    margin: 0 auto;\\n}\\n\\n.circular--square {\\n  border-radius: 50%;\\n}\\n\\n@media only screen and (max-width: 800px) {\\n    \\n    /* Force table to not be like tables anymore */\\n\\t#no-more-tables table, \\n\\t#no-more-tables thead, \\n\\t#no-more-tables tbody, \\n\\t#no-more-tables th, \\n\\t#no-more-tables td, \\n\\t#no-more-tables tr { \\n\\t\\tdisplay: block; \\n\\t}\\n \\n\\t/* Hide table headers (but not display: none;, for accessibility) */\\n\\t#no-more-tables thead tr { \\n\\t\\tposition: absolute;\\n\\t\\ttop: -9999px;\\n\\t\\tleft: -9999px;\\n\\t}\\n \\n\\t#no-more-tables tr { border: 1px solid #ccc; }\\n \\n\\t#no-more-tables td { \\n\\t\\t/* Behave  like a \\\"row\\\" */\\n\\t\\tborder: none;\\n\\t\\tborder-bottom: 1px solid #eee; \\n\\t\\tposition: relative;\\n\\t\\tpadding-left: 50%; \\n\\t\\twhite-space: normal;\\n\\t\\ttext-align:left;\\n\\t}\\n \\n\\t#no-more-tables td:before { \\n\\t\\t/* Now like a table header */\\n\\t\\tposition: absolute;\\n\\t\\t/* Top/left values mimic padding */\\n\\t\\ttop: 6px;\\n\\t\\tleft: 6px;\\n\\t\\twidth: 45%; \\n\\t\\tpadding-right: 10px; \\n\\t\\twhite-space: nowrap;\\n\\t\\ttext-align:left;\\n\\t\\tfont-weight: bold;\\n\\t}\\n\\n    .clickable{\\n        cursor: pointer;   \\n    }\\n\\n    .smallFont{\\n        font-size: small;\\n    }\\n\\n\\t/*\\n\\tLabel the data\\n\\t*/\\n    #no-more-tables td:before { content: attr(data-title); }\\n    \\n    }\\n\\n    #loading {\\n        background: repeat scroll 0 0;\\n        height: 100%;\\n        left: 0;\\n        margin: auto;\\n        position: fixed;\\n        top: 0;\\n        width: 100%;\\n        z-index:99;\\n    }\\n\\n    .bokeh {\\n        border: 0.01em solid rgba(150, 150, 150, 0.1);\\n        border-radius: 50%;\\n        font-size: 100px;\\n        height: 1em;\\n        list-style: outside none none;\\n        margin: 0 auto;\\n        position: relative;\\n        top: 35%;\\n        width: 1em;\\n        z-index: 2147483647;\\n    }\\n    .bokeh li {\\n        border-radius: 50%;\\n        height: 0.2em;\\n        position: absolute;\\n        width: 0.2em;\\n    }\\n    .bokeh li:nth-child(1) {\\n        animation: 1.13s linear 0s normal none infinite running rota, 3.67s ease-in-out 0s alternate none infinite running opa;\\n        background: #00c176 none repeat scroll 0 0;\\n        left: 50%;\\n        margin: 0 0 0 -0.1em;\\n        top: 0;\\n        transform-origin: 50% 250% 0;\\n    }\\n    .bokeh li:nth-child(2) {\\n        animation: 1.86s linear 0s normal none infinite running rota, 4.29s ease-in-out 0s alternate none infinite running opa;\\n        background: #ff003c none repeat scroll 0 0;\\n        margin: -0.1em 0 0;\\n        right: 0;\\n        top: 50%;\\n        transform-origin: -150% 50% 0;\\n    }\\n    .bokeh li:nth-child(3) {\\n        animation: 1.45s linear 0s normal none infinite running rota, 5.12s ease-in-out 0s alternate none infinite running opa;\\n        background: #fabe28 none repeat scroll 0 0;\\n        bottom: 0;\\n        left: 50%;\\n        margin: 0 0 0 -0.1em;\\n        transform-origin: 50% -150% 0;\\n    }\\n    .bokeh li:nth-child(4) {\\n        animation: 1.72s linear 0s normal none infinite running rota, 5.25s ease-in-out 0s alternate none infinite running opa;\\n        background: #88c100 none repeat scroll 0 0;\\n        margin: -0.1em 0 0;\\n        top: 50%;\\n        transform-origin: 250% 50% 0;\\n    }\\n    \\n    .translucent{\\n        opacity: 0.2;\\n    }\\n    \\n    @keyframes opa {\\n    12% {\\n        opacity: 0.8;\\n    }\\n    19.5% {\\n        opacity: 0.88;\\n    }\\n    37.2% {\\n        opacity: 0.64;\\n    }\\n    40.5% {\\n        opacity: 0.52;\\n    }\\n    52.7% {\\n        opacity: 0.69;\\n    }\\n    60.2% {\\n        opacity: 0.6;\\n    }\\n    66.6% {\\n        opacity: 0.52;\\n    }\\n    70% {\\n        opacity: 0.63;\\n    }\\n    79.9% {\\n        opacity: 0.6;\\n    }\\n    84.2% {\\n        opacity: 0.75;\\n    }\\n    91% {\\n        opacity: 0.87;\\n    }\\n    }\\n    \\n    @keyframes rota {\\n        100% {\\n            transform: rotate(360deg);\\n        }\\n    }\\n\\n    /* Tabs panel */\\n.tabbable-panel {\\n  border:1px solid #eee;\\n  padding: 10px;\\n}\\n\\n/* Default mode */\\n.tabbable-line > .nav-tabs {\\n  border: none;\\n  margin: 0px;\\n}\\n.tabbable-line > .nav-tabs > li {\\n  margin-right: 2px;\\n}\\n.tabbable-line > .nav-tabs > li > a {\\n  border: 0;\\n  margin-right: 0;\\n  color: #737373;\\n}\\n.tabbable-line > .nav-tabs > li > a > i {\\n  color: #a6a6a6;\\n}\\n.tabbable-line > .nav-tabs > li.open, .tabbable-line > .nav-tabs > li:hover {\\n  border-bottom: 4px solid #fbcdcf;\\n}\\n.tabbable-line > .nav-tabs > li.open > a, .tabbable-line > .nav-tabs > li:hover > a {\\n  border: 0;\\n  background: none !important;\\n  color: #333333;\\n}\\n.tabbable-line > .nav-tabs > li.open > a > i, .tabbable-line > .nav-tabs > li:hover > a > i {\\n  color: #a6a6a6;\\n}\\n.tabbable-line > .nav-tabs > li.open .dropdown-menu, .tabbable-line > .nav-tabs > li:hover .dropdown-menu {\\n  margin-top: 0px;\\n}\\n.tabbable-line > .nav-tabs > li.active {\\n  border-bottom: 4px solid #f3565d;\\n  position: relative;\\n}\\n.tabbable-line > .nav-tabs > li.active > a {\\n  border: 0;\\n  color: #333333;\\n}\\n.tabbable-line > .nav-tabs > li.active > a > i {\\n  color: #404040;\\n}\\n.tabbable-line > .tab-content {\\n  margin-top: -3px;\\n  background-color: #fff;\\n  border: 0;\\n  border-top: 1px solid #eee;\\n  padding: 15px 0;\\n}\\n.portlet .tabbable-line > .tab-content {\\n  padding-bottom: 0;\\n}\\n\\n/* Below tabs mode */\\n\\n.tabbable-line.tabs-below > .nav-tabs > li {\\n  border-top: 4px solid transparent;\\n}\\n.tabbable-line.tabs-below > .nav-tabs > li > a {\\n  margin-top: 0;\\n}\\n.tabbable-line.tabs-below > .nav-tabs > li:hover {\\n  border-bottom: 0;\\n  border-top: 4px solid #fbcdcf;\\n}\\n.tabbable-line.tabs-below > .nav-tabs > li.active {\\n  margin-bottom: -2px;\\n  border-bottom: 0;\\n  border-top: 4px solid #f3565d;\\n}\\n.tabbable-line.tabs-below > .tab-content {\\n  margin-top: -10px;\\n  border-top: 0;\\n  border-bottom: 1px solid #eee;\\n  padding-bottom: 15px;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/resources/css/styles.css\"],\"names\":[],\"mappings\":\"AAEA;IACI,qBAAqB;AACzB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,UAAU;IACV,QAAQ;IACR,MAAM;IACN,2BAA2B;AAC/B;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sCAAsC;AAC1C;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,qCAAqC;AACzC;AACA;IACI,sBAAsB;AAC1B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,qCAAqC;IACrC,sCAAsC;AAC1C;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,sBAAsB;AAC1B;IACI,eAAe,iBAAiB,EAAE;IAClC,oBAAoB,iBAAiB,EAAE,YAAY,EAAE,UAAU,EAAE;IACjE,0BAA0B,aAAa,EAAE;;IAEzC;QACI,iBAAiB;QACjB,aAAa;QACb,YAAY;QACZ,UAAU;QACV,YAAY;QACZ,iCAAiC;QACjC,gBAAgB;QAChB,uBAAuB;QACvB,aAAa;IACjB;;AAEJ;;IAEI,eAAe;IACf,SAAS;IACT,WAAW;AACf;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,uBAAuB;IACvB,0BAA0B;IAC1B,wBAAwB;AAC5B;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,sBAAsB;IACtB,qBAAqB;AACzB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;;IAEI,oBAAoB;AACxB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;EACE,eAAe;AACjB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,2BAA2B;AAC7B;;;AAGA;IACI,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;;IAEI,0BAA0B;IAC1B,iBAAiB;;IAEjB,yCAAyC;IACzC,4BAA4B;IAC5B,2BAA2B;IAC3B,4BAA4B;IAC5B,sBAAsB;AAC1B;;AAEA;;IAEI,0BAA0B;IAC1B,iBAAiB;;IAEjB,yCAAyC;IACzC,4BAA4B;IAC5B,2BAA2B;IAC3B,4BAA4B;IAC5B,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,WAAW;IACX,aAAa;IACb,eAAe;IACf,oBAAoB;AACxB;;AAEA;EACE,kBAAkB;EAClB,OAAO;EACP,QAAQ;EACR,WAAW;EACX,kBAAkB;EAClB,WAAW;AACb;;AAEA;GACG,kBAAkB;AACrB;;AAEA;IACI,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,SAAS;IACT,WAAW;AACf;;AAEA;IACI,eAAe,EAAE,qCAAqC;IACtD,SAAS;IACT,WAAW;IACX,UAAU;AACd;;AAEA;IACI,iBAAiB;IACjB,aAAa;IACb,YAAY;IACZ,UAAU;IACV,YAAY;IACZ,iCAAiC;IACjC,gBAAgB;IAChB,uBAAuB;IACvB,aAAa;AACjB;;AAEA;IACI,iBAAiB;IACjB,aAAa;IACb,YAAY;IACZ,UAAU;IACV,YAAY;IACZ,iCAAiC;IACjC,gBAAgB;IAChB,uBAAuB;IACvB,aAAa;KACZ,OAAO;IACR,QAAQ;AACZ;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,kCAAkC;AACtC;;AAEA,oBAAoB;AACpB;IACI,YAAY;IACZ,eAAe;AACnB;;AAEA,kEAAkE;AAClE;IACI,kBAAkB;IAClB,qBAAqB;AACzB;;AAEA,yCAAyC;AACzC;IACI,aAAa;IACb,kBAAkB;IAClB,yBAAyB;IACzB,gBAAgB;IAChB,4CAA4C;IAC5C,UAAU;AACd;;AAEA,8BAA8B;AAC9B;IACI,YAAY;IACZ,kBAAkB;IAClB,qBAAqB;IACrB,cAAc;AAClB;;AAEA,4CAA4C;AAC5C,2BAA2B,yBAAyB;;AAEpD,oCAAoC;AACpC;IACI,cAAc;AAClB;;AAEA,0FAA0F;AAC1F;IACI,yBAAyB;AAC7B;;AAEA,gBAAgB,iBAAiB;AACjC,qBAAqB,eAAe,CAAC,QAAQ,CAAC,SAAS;AACvD,2BAA2B,WAAW,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS;AACzI,wBAAwB,iBAAiB,CAAC,QAAQ,CAAC,cAAc;AACjE,8BAA8B,wBAAwB;AACtD,+BAA+B,wBAAwB;AACvD,qBAAqB,kBAAkB,CAAC,UAAU,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,cAAc,CAAC,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW;AAC1M,yBAAyB,WAAW,CAAC,UAAU,CAAC,iBAAiB,CAAC,eAAe,CAAC,gBAAgB,CAAC,wBAAwB;AAC3H,qBAAqB,UAAU,CAAC,UAAU,CAAC,gBAAgB;AAC3D,2BAA2B,iBAAiB;AAC5C,wBAAwB,iBAAiB;;;AAGzC,sCAAsC;;AAEtC;EACE,YAAY;EACZ,WAAW;AACb;;AAEA,yBAAyB,aAAa,EAAE;AACxC;EACE,WAAW;EACX,iBAAiB;EACjB,wBAAwB;EACxB,qBAAqB;EACrB,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA,kDAAkD;;AAElD;;qDAEqD,cAAc,GAAG,EAAE,iCAAiC;;AAEzG;;;uDAGuD,cAAc,GAAG;;AAExE;IACI,uDAAuD;IACvD,oDAAoD;IACpD,+CAA+C;AACnD;;AAEA;KACK,YAAY;AACjB;;AAEA;IACI,0BAA0B;IAC1B,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,cAAc;AAClB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;;IAEI,8CAA8C;CACjD;;;;;;EAMC,cAAc;CACf;;CAEA,mEAAmE;CACnE;EACC,kBAAkB;EAClB,YAAY;EACZ,aAAa;CACd;;CAEA,qBAAqB,sBAAsB,EAAE;;CAE7C;EACC,yBAAyB;EACzB,YAAY;EACZ,6BAA6B;EAC7B,kBAAkB;EAClB,iBAAiB;EACjB,mBAAmB;EACnB,eAAe;CAChB;;CAEA;EACC,4BAA4B;EAC5B,kBAAkB;EAClB,kCAAkC;EAClC,QAAQ;EACR,SAAS;EACT,UAAU;EACV,mBAAmB;EACnB,mBAAmB;EACnB,eAAe;EACf,iBAAiB;CAClB;;IAEG;QACI,eAAe;IACnB;;IAEA;QACI,gBAAgB;IACpB;;CAEH;;EAEC;IACE,4BAA4B,yBAAyB,EAAE;;IAEvD;;IAEA;QACI,6BAA6B;QAC7B,YAAY;QACZ,OAAO;QACP,YAAY;QACZ,eAAe;QACf,MAAM;QACN,WAAW;QACX,UAAU;IACd;;IAEA;QACI,6CAA6C;QAC7C,kBAAkB;QAClB,gBAAgB;QAChB,WAAW;QACX,6BAA6B;QAC7B,cAAc;QACd,kBAAkB;QAClB,QAAQ;QACR,UAAU;QACV,mBAAmB;IACvB;IACA;QACI,kBAAkB;QAClB,aAAa;QACb,kBAAkB;QAClB,YAAY;IAChB;IACA;QACI,sHAAsH;QACtH,0CAA0C;QAC1C,SAAS;QACT,oBAAoB;QACpB,MAAM;QACN,4BAA4B;IAChC;IACA;QACI,sHAAsH;QACtH,0CAA0C;QAC1C,kBAAkB;QAClB,QAAQ;QACR,QAAQ;QACR,6BAA6B;IACjC;IACA;QACI,sHAAsH;QACtH,0CAA0C;QAC1C,SAAS;QACT,SAAS;QACT,oBAAoB;QACpB,6BAA6B;IACjC;IACA;QACI,sHAAsH;QACtH,0CAA0C;QAC1C,kBAAkB;QAClB,QAAQ;QACR,4BAA4B;IAChC;;IAEA;QACI,YAAY;IAChB;;IAEA;IACA;QACI,YAAY;IAChB;IACA;QACI,aAAa;IACjB;IACA;QACI,aAAa;IACjB;IACA;QACI,aAAa;IACjB;IACA;QACI,aAAa;IACjB;IACA;QACI,YAAY;IAChB;IACA;QACI,aAAa;IACjB;IACA;QACI,aAAa;IACjB;IACA;QACI,YAAY;IAChB;IACA;QACI,aAAa;IACjB;IACA;QACI,aAAa;IACjB;IACA;;IAEA;QACI;YACI,yBAAyB;QAC7B;IACJ;;IAEA,eAAe;AACnB;EACE,qBAAqB;EACrB,aAAa;AACf;;AAEA,iBAAiB;AACjB;EACE,YAAY;EACZ,WAAW;AACb;AACA;EACE,iBAAiB;AACnB;AACA;EACE,SAAS;EACT,eAAe;EACf,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;EACE,gCAAgC;AAClC;AACA;EACE,SAAS;EACT,2BAA2B;EAC3B,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;EACE,eAAe;AACjB;AACA;EACE,gCAAgC;EAChC,kBAAkB;AACpB;AACA;EACE,SAAS;EACT,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;EACE,gBAAgB;EAChB,sBAAsB;EACtB,SAAS;EACT,0BAA0B;EAC1B,eAAe;AACjB;AACA;EACE,iBAAiB;AACnB;;AAEA,oBAAoB;;AAEpB;EACE,iCAAiC;AACnC;AACA;EACE,aAAa;AACf;AACA;EACE,gBAAgB;EAChB,6BAA6B;AAC/B;AACA;EACE,mBAAmB;EACnB,gBAAgB;EAChB,6BAA6B;AAC/B;AACA;EACE,iBAAiB;EACjB,aAAa;EACb,6BAA6B;EAC7B,oBAAoB;AACtB\",\"sourcesContent\":[\"@import url(//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css);\\n\\n.toast {\\n    opacity: 1 !important;\\n}\\n\\n.assignedColor {\\n  background-color: #dff0d8;\\n}\\n\\n.toolbar {\\n    position:fixed;\\n    z-index:1000;\\n    width:100%;\\n    top:91px;\\n    left:0;\\n    background-color:ghostwhite;\\n}\\n\\n.panelContrastColor {\\n    background-color:ghostwhite;\\n}\\n\\n.positionUnderToolbar{\\n    margin-top:50px;\\n}\\n\\n.provisional {\\n    background-color: cyan;\\n}\\n\\n.existing {\\n    background-color: LightGoldenRodYellow;\\n}\\n\\n.danger {\\n    background-color:deeppink;\\n}\\n\\n.customFont {\\n    font-family: 'Montserrat', sans-serif;\\n}\\n.card-header{\\n    font-size: 1.640625rem;\\n}\\n\\n.card-title {\\n    padding: 5px;\\n}\\n\\n.card-title {\\n    background-color: rgba(0, 0, 0, 0.03);\\n    border: 1px solid rgba(0, 0, 0, 0.125);\\n}\\n\\n.bigLabel{\\n    font-size: 1.5rem;\\n}\\n\\n.btn-default{\\n    background-color:white;\\n}\\n    .hover_img a { position:relative; }\\n    .hover_img a span { position:absolute; display:none; z-index:99; }\\n    .hover_img a:hover span { display:block; }\\n\\n    .hover {\\n        position:absolute;\\n        height: 200px;\\n        width: 600px;\\n        z-index:99;\\n        display:none; \\n        box-shadow: 10px 10px 5px #888888;\\n        overflow: hidden;\\n        background-color: white;\\n        padding: 10px;\\n    }\\n\\n.fixed\\n{\\n    position: fixed;\\n    top: 20px;\\n    right: 40px;\\n}\\n\\n.bold {\\n    font-weight: bold;\\n}\\n\\n.redText {\\n    color: purple;\\n    font-weight: bolder !important;\\n}\\n\\n.banner {\\n    height: 50px;\\n    width: 100%;\\n    background-color: white;\\n    border-bottom-style: solid;\\n    border-bottom-width: 1px;\\n}\\n\\n.banner #notice {\\n    margin-left: 30px;\\n    font-size: 1.25em;\\n    color: indianred;\\n}\\n\\n.browse .textContainer {\\n    height: 430px;\\n    line-height: 400px;\\n}\\n\\n.textContainer h4 {\\n    vertical-align: middle;\\n    display: inline-block;\\n}\\n\\n.vertical-align {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n\\n.table-borderless td,\\n.table-borderless th {\\n    border: 0 !important;\\n}\\n\\n.topMargin {\\n    margin-top: 25px;\\n}\\n\\n.smallTopMargin {\\n  margin-top: 5px;\\n}\\n\\n.bottomMargin {\\n    margin-bottom: 25px;\\n}\\n\\n.leftMargin {\\n    margin-left: 25px;\\n}\\n\\n.rightMargin {\\n  margin-right: 25px;\\n}\\n\\n.smallLeftMargin {\\n    margin-left: 10px;\\n}\\n\\n.backColorOne {\\n  background-color: ghostwhite;\\n}\\n\\n.backColorTwo{\\n  background-color: LightSalmon;\\n}\\n\\n.backColorThree {\\n  background-color: cyan;\\n}\\n\\n.backColorFour{\\n  background-color: lightgrey;\\n}\\n\\n\\n.bigTopMargin {\\n    margin-top: 50px;\\n}\\n\\n.bigLeftMargin {\\n    margin-left: 50px;\\n}\\n\\n.smallMarginTop {\\n    margin-top: 5px;\\n}\\n\\n.smallMarginRight {\\n    margin-right: 10px;\\n}\\n\\n.parallax1 {\\n\\n    /* Set a specific height */\\n    min-height: 300px;\\n\\n    /* Create the parallax scrolling effect */\\n    background-attachment: fixed;\\n    background-position: center;\\n    background-repeat: no-repeat;\\n    background-size: cover;\\n}\\n\\n.parallax2 {\\n\\n    /* Set a specific height */\\n    min-height: 200px;\\n\\n    /* Create the parallax scrolling effect */\\n    background-attachment: fixed;\\n    background-position: center;\\n    background-repeat: no-repeat;\\n    background-size: cover;\\n}\\n\\n.caption span.border {\\n    background-color: #111;\\n    color: #fff;\\n    padding: 18px;\\n    font-size: 25px;\\n    letter-spacing: 10px;\\n}\\n\\n.caption {\\n  position: absolute;\\n  left: 0;\\n  top: 25%;\\n  width: 100%;\\n  text-align: center;\\n  color: #000;\\n}\\n\\n.center-text {\\n   text-align: center;\\n}\\n\\n.home-page-header{\\n    text-align: center;\\n    font-size: 30px;\\n}\\n\\n.underline {\\n    text-decoration: underline;\\n}\\n\\n.subMenu{\\n    position: relative;\\n    top: -5px;\\n    left: 0px;\\n    width: 100%;\\n}\\n\\n.subMenu-container {\\n    position: fixed; /* Set the navbar to fixed position */\\n    top: 5rem;\\n    width: 100%;\\n    z-index:99;\\n}\\n\\n.hover {\\n    position:absolute;\\n    height: 200px;\\n    width: 600px;\\n    z-index:99;\\n    display:none;\\n    box-shadow: 10px 10px 5px #888888;\\n    overflow: hidden;\\n    background-color: white;\\n    padding: 10px;\\n}\\n\\n.hoverProfile {\\n    position:absolute;\\n    height: 250px;\\n    width: 500px;\\n    z-index:99;\\n    display:none;\\n    box-shadow: 10px 10px 5px #888888;\\n    overflow: hidden;\\n    background-color: white;\\n    padding: 10px;\\n     right:0;\\n    bottom:0;\\n}\\n\\n.overFlow {\\n    overflow-y:scroll;\\n}\\n\\n.carouselSize {\\n    width:700px;\\n    height:500px;\\n}\\n\\n.carouselImage {\\n    height:500px;\\n}\\n\\n.weatherIcon {\\n    height: 50px;\\n    width: 50px;\\n}\\n\\n.page-host {\\n    margin-top: 10rem;\\n}\\n\\nspan i {\\n    cursor: pointer;\\n}\\n\\n.sortable {\\n    cursor: pointer;   \\n}\\n\\n.aurelia-flatpickr {\\n    background-color: white !important;\\n}\\n\\n/* Dropdown Button */\\n.dropbtn {\\n    border: none;\\n    cursor: pointer;\\n}\\n\\n/* The container <div> - needed to position the dropdown content */\\n.dropdown {\\n    position: relative;\\n    display: inline-block;\\n}\\n\\n/* Dropdown Content (Hidden by Default) */\\n.dropdown-content {\\n    display: none;\\n    position: absolute;\\n    background-color: #f9f9f9;\\n    min-width: 160px;\\n    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\\n    z-index: 1;\\n}\\n\\n/* Links inside the dropdown */\\n.dropdown-content a {\\n    color: black;\\n    padding: 12px 16px;\\n    text-decoration: none;\\n    display: block;\\n}\\n\\n/* Change color of dropdown links on hover */\\n.dropdown-content a:hover {background-color: #f1f1f1}\\n\\n/* Show the dropdown menu on hover */\\n.dropdown:hover .dropdown-content {\\n    display: block;\\n}\\n\\n/* Change the background color of the dropdown button when the dropdown content is shown */\\n.dropdown:hover .dropbtn {\\n    background-color: #3e8e41;\\n}\\n\\n.smart-timeline{position:relative}\\n.smart-timeline-list{list-style:none;margin:0;padding:0}\\n.smart-timeline-list:after{content:\\\" \\\";background-color:#eee;position:absolute;display:block;width:2px;top:0;left:95px;bottom:0;z-index:1}\\n.smart-timeline-list li{position:relative;margin:0;padding:15px 0}\\n.smart-timeline-list>li:hover{background-color:#f4f4f4}\\n.smart-timeline-hover li:hover{background-color:#f9f9f9}\\n.smart-timeline-icon{background:#3276b1;color:#fff;border-radius:50%;position:absolute;width:32px;height:32px;line-height:28px;font-size:14px;text-align:center;left:80px;top:10px;z-index:100;padding:2px}\\n.smart-timeline-icon>img{height:32px;width:32px;border-radius:50%;margin-top:-2px;margin-left:-2px;border:2px solid #3276b1}\\n.smart-timeline-time{float:left;width:70px;text-align:right}\\n.smart-timeline-time>small{font-style:italic}\\n.smart-timeline-content{margin-left:123px}\\n\\n\\n/****** Style Star Rating Widget *****/\\n\\n.rating { \\n  border: none;\\n  float: left;\\n}\\n\\n.rating > span > input { display: none; } \\n.rating > span > label:before { \\n  margin: 5px;\\n  font-size: 1.25em;\\n  font-family: FontAwesome;\\n  display: inline-block;\\n  content: \\\"\\\\f005\\\";\\n}\\n\\n.rating > span > .half:before { \\n  content: \\\"\\\\f089\\\";\\n  position: absolute;\\n}\\n\\n.rating > span > label { \\n    color: #ddd; \\n    float: right; \\n}\\n\\n/***** CSS Magic to Highlight Stars on Hover *****/\\n\\n.rating > span > input:checked ~ label, /* show gold star when clicked */\\n.rating:not(:checked) > span > label:hover, /* hover current star */\\n.rating:not(:checked) > span > label:hover ~ label { color: #FFD700;  } /* hover previous stars in list */\\n\\n.rating > span > input:checked + label:hover, /* hover current star when changing rating */\\n.rating > span >  input:checked ~ label:hover,\\n.rating > span > label:hover ~ input:checked ~ label, /* lighten current selection */\\n.rating > span > input:checked ~ label:hover ~ label { color: #FFED85;  }\\n\\n.link-shadow {\\n    -webkit-box-shadow: 3px 4px 11px 0px rgba(105,97,105,1);\\n    -moz-box-shadow: 3px 4px 11px 0px rgba(105,97,105,1);\\n    box-shadow: 3px 4px 11px 0px rgba(105,97,105,1);\\n}\\n\\n#curriculumInfo{\\n     display:none;\\n}\\n\\nux-dialog-header {\\n    background-color: #ffbd00 ;\\n    color: white;\\n}\\n\\n.col-centered{\\n    float: none;\\n    margin: 0 auto;\\n}\\n\\n.circular--square {\\n  border-radius: 50%;\\n}\\n\\n@media only screen and (max-width: 800px) {\\n    \\n    /* Force table to not be like tables anymore */\\n\\t#no-more-tables table, \\n\\t#no-more-tables thead, \\n\\t#no-more-tables tbody, \\n\\t#no-more-tables th, \\n\\t#no-more-tables td, \\n\\t#no-more-tables tr { \\n\\t\\tdisplay: block; \\n\\t}\\n \\n\\t/* Hide table headers (but not display: none;, for accessibility) */\\n\\t#no-more-tables thead tr { \\n\\t\\tposition: absolute;\\n\\t\\ttop: -9999px;\\n\\t\\tleft: -9999px;\\n\\t}\\n \\n\\t#no-more-tables tr { border: 1px solid #ccc; }\\n \\n\\t#no-more-tables td { \\n\\t\\t/* Behave  like a \\\"row\\\" */\\n\\t\\tborder: none;\\n\\t\\tborder-bottom: 1px solid #eee; \\n\\t\\tposition: relative;\\n\\t\\tpadding-left: 50%; \\n\\t\\twhite-space: normal;\\n\\t\\ttext-align:left;\\n\\t}\\n \\n\\t#no-more-tables td:before { \\n\\t\\t/* Now like a table header */\\n\\t\\tposition: absolute;\\n\\t\\t/* Top/left values mimic padding */\\n\\t\\ttop: 6px;\\n\\t\\tleft: 6px;\\n\\t\\twidth: 45%; \\n\\t\\tpadding-right: 10px; \\n\\t\\twhite-space: nowrap;\\n\\t\\ttext-align:left;\\n\\t\\tfont-weight: bold;\\n\\t}\\n\\n    .clickable{\\n        cursor: pointer;   \\n    }\\n\\n    .smallFont{\\n        font-size: small;\\n    }\\n\\n\\t/*\\n\\tLabel the data\\n\\t*/\\n    #no-more-tables td:before { content: attr(data-title); }\\n    \\n    }\\n\\n    #loading {\\n        background: repeat scroll 0 0;\\n        height: 100%;\\n        left: 0;\\n        margin: auto;\\n        position: fixed;\\n        top: 0;\\n        width: 100%;\\n        z-index:99;\\n    }\\n\\n    .bokeh {\\n        border: 0.01em solid rgba(150, 150, 150, 0.1);\\n        border-radius: 50%;\\n        font-size: 100px;\\n        height: 1em;\\n        list-style: outside none none;\\n        margin: 0 auto;\\n        position: relative;\\n        top: 35%;\\n        width: 1em;\\n        z-index: 2147483647;\\n    }\\n    .bokeh li {\\n        border-radius: 50%;\\n        height: 0.2em;\\n        position: absolute;\\n        width: 0.2em;\\n    }\\n    .bokeh li:nth-child(1) {\\n        animation: 1.13s linear 0s normal none infinite running rota, 3.67s ease-in-out 0s alternate none infinite running opa;\\n        background: #00c176 none repeat scroll 0 0;\\n        left: 50%;\\n        margin: 0 0 0 -0.1em;\\n        top: 0;\\n        transform-origin: 50% 250% 0;\\n    }\\n    .bokeh li:nth-child(2) {\\n        animation: 1.86s linear 0s normal none infinite running rota, 4.29s ease-in-out 0s alternate none infinite running opa;\\n        background: #ff003c none repeat scroll 0 0;\\n        margin: -0.1em 0 0;\\n        right: 0;\\n        top: 50%;\\n        transform-origin: -150% 50% 0;\\n    }\\n    .bokeh li:nth-child(3) {\\n        animation: 1.45s linear 0s normal none infinite running rota, 5.12s ease-in-out 0s alternate none infinite running opa;\\n        background: #fabe28 none repeat scroll 0 0;\\n        bottom: 0;\\n        left: 50%;\\n        margin: 0 0 0 -0.1em;\\n        transform-origin: 50% -150% 0;\\n    }\\n    .bokeh li:nth-child(4) {\\n        animation: 1.72s linear 0s normal none infinite running rota, 5.25s ease-in-out 0s alternate none infinite running opa;\\n        background: #88c100 none repeat scroll 0 0;\\n        margin: -0.1em 0 0;\\n        top: 50%;\\n        transform-origin: 250% 50% 0;\\n    }\\n    \\n    .translucent{\\n        opacity: 0.2;\\n    }\\n    \\n    @keyframes opa {\\n    12% {\\n        opacity: 0.8;\\n    }\\n    19.5% {\\n        opacity: 0.88;\\n    }\\n    37.2% {\\n        opacity: 0.64;\\n    }\\n    40.5% {\\n        opacity: 0.52;\\n    }\\n    52.7% {\\n        opacity: 0.69;\\n    }\\n    60.2% {\\n        opacity: 0.6;\\n    }\\n    66.6% {\\n        opacity: 0.52;\\n    }\\n    70% {\\n        opacity: 0.63;\\n    }\\n    79.9% {\\n        opacity: 0.6;\\n    }\\n    84.2% {\\n        opacity: 0.75;\\n    }\\n    91% {\\n        opacity: 0.87;\\n    }\\n    }\\n    \\n    @keyframes rota {\\n        100% {\\n            transform: rotate(360deg);\\n        }\\n    }\\n\\n    /* Tabs panel */\\n.tabbable-panel {\\n  border:1px solid #eee;\\n  padding: 10px;\\n}\\n\\n/* Default mode */\\n.tabbable-line > .nav-tabs {\\n  border: none;\\n  margin: 0px;\\n}\\n.tabbable-line > .nav-tabs > li {\\n  margin-right: 2px;\\n}\\n.tabbable-line > .nav-tabs > li > a {\\n  border: 0;\\n  margin-right: 0;\\n  color: #737373;\\n}\\n.tabbable-line > .nav-tabs > li > a > i {\\n  color: #a6a6a6;\\n}\\n.tabbable-line > .nav-tabs > li.open, .tabbable-line > .nav-tabs > li:hover {\\n  border-bottom: 4px solid #fbcdcf;\\n}\\n.tabbable-line > .nav-tabs > li.open > a, .tabbable-line > .nav-tabs > li:hover > a {\\n  border: 0;\\n  background: none !important;\\n  color: #333333;\\n}\\n.tabbable-line > .nav-tabs > li.open > a > i, .tabbable-line > .nav-tabs > li:hover > a > i {\\n  color: #a6a6a6;\\n}\\n.tabbable-line > .nav-tabs > li.open .dropdown-menu, .tabbable-line > .nav-tabs > li:hover .dropdown-menu {\\n  margin-top: 0px;\\n}\\n.tabbable-line > .nav-tabs > li.active {\\n  border-bottom: 4px solid #f3565d;\\n  position: relative;\\n}\\n.tabbable-line > .nav-tabs > li.active > a {\\n  border: 0;\\n  color: #333333;\\n}\\n.tabbable-line > .nav-tabs > li.active > a > i {\\n  color: #404040;\\n}\\n.tabbable-line > .tab-content {\\n  margin-top: -3px;\\n  background-color: #fff;\\n  border: 0;\\n  border-top: 1px solid #eee;\\n  padding: 15px 0;\\n}\\n.portlet .tabbable-line > .tab-content {\\n  padding-bottom: 0;\\n}\\n\\n/* Below tabs mode */\\n\\n.tabbable-line.tabs-below > .nav-tabs > li {\\n  border-top: 4px solid transparent;\\n}\\n.tabbable-line.tabs-below > .nav-tabs > li > a {\\n  margin-top: 0;\\n}\\n.tabbable-line.tabs-below > .nav-tabs > li:hover {\\n  border-bottom: 0;\\n  border-top: 4px solid #fbcdcf;\\n}\\n.tabbable-line.tabs-below > .nav-tabs > li.active {\\n  margin-bottom: -2px;\\n  border-bottom: 0;\\n  border-top: 4px solid #f3565d;\\n}\\n.tabbable-line.tabs-below > .tab-content {\\n  margin-top: -10px;\\n  border-top: 0;\\n  border-bottom: 1px solid #eee;\\n  padding-bottom: 15px;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n"],"names":[],"sourceRoot":""}