{"version":3,"file":"vendors-46c71041.2384d3fce1a12a237460.bundle.js","mappingshBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://uccss-old-new/./node_modules/aurelia-mask/dist/masked-input.js","webpack://uccss-old-new/./node_modules/aurelia-mask/dist/masker.js"],"sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar aurelia_framework_1 = require(\"aurelia-framework\");\nvar masker_1 = require(\"./masker\");\nfunction findFirstInputElement(elt) {\n    var elts = elt.getElementsByTagName(\"input\");\n    if (elts.length == 0) {\n        throw new Error(\"'masked' attribute is not on an input element\");\n    }\n    return elts[0];\n}\nvar MaskedInput = (function () {\n    function MaskedInput(element) {\n        var _this = this;\n        this.isAttached = false;\n        this.element = element;\n        this.preventBackspace = false;\n        this.keyDownHandler = function (e) { return _this.onKeyDown(e); };\n        this.keyUpHandler = function (e) { return _this.onKeyUp(e); };\n        this.clickHandler = function (e) { return _this.onClick(e); };\n        this.inputHandler = function (e) { return _this.onInput(e); };\n        this.focusHandler = function (e) { return _this.onFocus(e); };\n        this.selectHandler = function (e) { return _this.onSelect(e); };\n    }\n    MaskedInput.prototype.bind = function () {\n        if (this.mask == null) {\n            throw new Error(\"mask needs to be defined\");\n        }\n        this.makeMasker();\n        this.oldValue = this.masker.maskValue(this.numberToString(this.value));\n        this.oldValueUnmasked = this.masker.unmaskValue(this.oldValue);\n    };\n    MaskedInput.prototype.attached = function () {\n        this.isAttached = true;\n        this.findInputElement();\n        this.inputElement.addEventListener(\"keydown\", this.keyDownHandler);\n        this.inputElement.addEventListener('keyup', this.keyUpHandler);\n        this.inputElement.addEventListener('input', this.inputHandler);\n        this.inputElement.addEventListener('mouseup', this.clickHandler);\n        this.inputElement.addEventListener('focus', this.focusHandler);\n        this.inputElement.addEventListener('select', this.selectHandler);\n        this.caretPos = this.getCaretPosition();\n        this.inputElement.value = this.oldValue;\n        this.updateUIValue(this.oldValue, false, this.minCaretPos, this.minCaretPos);\n    };\n    MaskedInput.prototype.findInputElement = function () {\n        if (this.element.tagName.toLowerCase() === \"input\") {\n            this.inputElement = this.element;\n        }\n        else if (this.findInput != null) {\n            this.inputElement = this.findInput(this.element);\n        }\n        else {\n            this.inputElement = findFirstInputElement(this.element);\n        }\n    };\n    MaskedInput.prototype.detached = function () {\n        this.inputElement.removeEventListener(\"keydown\", this.keyDownHandler);\n        this.inputElement.removeEventListener('keyup', this.keyUpHandler);\n        this.inputElement.removeEventListener('input', this.inputHandler);\n        this.inputElement.removeEventListener('mouseup', this.clickHandler);\n        this.inputElement.removeEventListener('focus', this.focusHandler);\n        this.inputElement.removeEventListener('select', this.selectHandler);\n    };\n    Object.defineProperty(MaskedInput.prototype, \"maxCaretPos\", {\n        get: function () {\n            if (this.masker == null) {\n                return 0;\n            }\n            var valUnmasked = this.unmaskedModelValue;\n            var caretPosMax = this.masker.maxCaretPos(valUnmasked);\n            return caretPosMax;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MaskedInput.prototype, \"minCaretPos\", {\n        get: function () {\n            if (this.masker == null) {\n                return 0;\n            }\n            return this.masker.minCaretPos();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MaskedInput.prototype.onSelect = function (e) {\n        this.oldSelectionLength = this.getSelectionLength();\n    };\n    MaskedInput.prototype.onClick = function (e) {\n        e = e || {};\n        var valUnmasked = this.unmaskedUIValue;\n        var caretPos = this.getCaretPosition() || 0;\n        var caretPosOld = this.oldCaretPosition || 0;\n        var caretPosDelta = caretPos - caretPosOld;\n        var selectionLenOld = this.oldSelectionLength || 0;\n        var isSelected = this.getSelectionLength() > 0;\n        var wasSelected = selectionLenOld > 0;\n        var isKeyBackspace = (this.isDeletion() && (caretPosDelta === -1));\n        var isKeyDelete = (this.isDeletion() && (caretPosDelta === 0) && !wasSelected);\n        var caretBumpBack = caretPos > this.minCaretPos;\n        this.oldSelectionLength = 0;\n        if (isSelected) {\n            this.oldCaretPosition = -1;\n            return;\n        }\n        if (isKeyBackspace && this.preventBackspace) {\n            this.inputElement.value = this.oldValue;\n            this.setCaretPosition(caretPosOld);\n            return;\n        }\n        this.updateUIValue(valUnmasked, caretBumpBack, caretPos, caretPosOld);\n    };\n    Object.defineProperty(MaskedInput.prototype, \"unmaskedUIValue\", {\n        get: function () {\n            if (this.isAttached) {\n                var val = this.inputElement.value;\n                var unmasked = this.masker.unmaskValue(val);\n                return unmasked;\n            }\n            else {\n                return this.numberToString(this.value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MaskedInput.prototype, \"unmaskedModelValue\", {\n        get: function () {\n            return this.getUnmaskedValue(this.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MaskedInput.prototype.getUnmaskedValue = function (_val) {\n        var val = this.numberToString(_val);\n        var unmasked = this.masker.unmaskValue(val);\n        return unmasked;\n    };\n    MaskedInput.prototype.isAddition = function (doterriblethings) {\n        if (doterriblethings === void 0) { doterriblethings = false; }\n        var val = this.unmaskedUIValue;\n        var maskedVal = this.inputElement.value;\n        if (doterriblethings && (this.bindMasking || this.aspnetMasking)) {\n            val = this.inputElement.value;\n        }\n        var valOld = this.oldValueUnmasked;\n        var oldMaskedVal = this.oldValue;\n        var selectionLenOld = this.oldSelectionLength || 0;\n        var _isAddition = (val.length > valOld.length) || (selectionLenOld && maskedVal.length > oldMaskedVal.length - selectionLenOld);\n        return _isAddition;\n    };\n    MaskedInput.prototype.isSingleAddition = function () {\n        var val = this.inputElement.value;\n        var valOld = this.oldValueUnmasked;\n        var selectionLenOld = this.oldSelectionLength || 0;\n        var _isAddition = (val.length == valOld.length + 1);\n        return _isAddition;\n    };\n    MaskedInput.prototype.isDeletion = function () {\n        var val = this.inputElement.value;\n        var valOld = this.oldValue;\n        var selectionLenOld = this.oldSelectionLength || 0;\n        var _isDeletion = (val.length < valOld.length) || (selectionLenOld && val.length === valOld.length - selectionLenOld);\n        return _isDeletion;\n    };\n    MaskedInput.prototype.onInput = function (e) {\n        e = e || {};\n        var valUnmasked = this.unmaskedUIValue;\n        var valUnmaskedOld = this.oldValueUnmasked;\n        var caretPos = this.getCaretPosition() || 0;\n        var caretPosOld = this.oldCaretPosition || 0;\n        if (caretPosOld === -1) {\n            caretPosOld = caretPos - 1;\n        }\n        var caretPosDelta = caretPos - caretPosOld;\n        var selectionLenOld = this.oldSelectionLength || 0;\n        var wasSelected = selectionLenOld > 0;\n        if (this.isSingleAddition() && this.editMode === \"overtype\") {\n            valUnmasked = this.inputElement.value;\n            if (this.isValidCaretPosition(caretPosOld)) {\n                var newChar = valUnmasked.charAt(caretPosOld);\n                if (this.masker.isValidAt(newChar, caretPosOld)) {\n                    valUnmasked = valUnmasked.substr(0, caretPos) + valUnmasked.substr(caretPos + 1);\n                    valUnmasked = this.masker.unmaskValue(valUnmasked);\n                }\n                else {\n                    valUnmasked = valUnmasked.substr(0, caretPosOld) + valUnmasked.substr(caretPosOld + 1);\n                    valUnmasked = this.masker.unmaskValue(valUnmasked);\n                }\n                caretPos = this.masker.getNextCaretPos(caretPosOld);\n            }\n            else {\n                var newChar = this.inputElement.value.charAt(caretPosOld) || \"\";\n                if (!this.isValidCaretPosition(caretPos)) {\n                    caretPos = this.masker.getNextCaretPos(caretPos);\n                }\n                valUnmasked = this.oldValue.substr(0, caretPos) + newChar + this.oldValue.substr(caretPos + 1);\n                valUnmasked = this.masker.unmaskValue(valUnmasked);\n                caretPos = this.masker.getNextCaretPos(caretPos);\n            }\n        }\n        var isKeyBackspace = (this.isDeletion() && (caretPosDelta === -1));\n        var isKeyDelete = (this.isDeletion() && (caretPosDelta === 0) && !wasSelected);\n        var caretBumpBack = (isKeyBackspace) && caretPos > this.minCaretPos;\n        if (wasSelected && this.isAddition(true)) {\n            var startCaretPos = Math.min(caretPos, caretPosOld);\n            if (caretPos < caretPosOld) {\n                startCaretPos--;\n            }\n            if (selectionLenOld == this.oldValue.length && this.editMode === \"insert\") {\n                var maskedValue = this.masker.maskValue(this.inputElement.value);\n                var newDelta = maskedValue.length - (this.oldValue.length - selectionLenOld);\n                caretPos = startCaretPos + newDelta;\n            }\n            else {\n                var oldSelectionStart = startCaretPos;\n                var oldSuffix = this.oldValue.substr(oldSelectionStart + selectionLenOld);\n                var oldPrefix = this.oldValue.substr(0, oldSelectionStart);\n                var newPart = this.inputElement.value;\n                if (newPart.startsWith(oldPrefix)) {\n                    newPart = newPart.substr(oldPrefix.length);\n                }\n                if (newPart.endsWith(oldSuffix)) {\n                    newPart = newPart.substr(0, newPart.length - oldSuffix.length);\n                }\n                if (!this.isValidCaretPosition(startCaretPos)) {\n                    startCaretPos = this.masker.getNextCaretPos(startCaretPos);\n                }\n                if (this.inputElement.value.length === 1) {\n                    caretPos = this.masker.getNextCaretPos(startCaretPos);\n                }\n                else {\n                    var newDelta = this.inputElement.value.length - (this.oldValue.length - selectionLenOld);\n                    caretPos = startCaretPos + newDelta;\n                }\n                var allPlaceholder = this.masker.maskValue(\"\");\n                if (newPart.length < selectionLenOld) {\n                    var caretDiff = startCaretPos - oldSelectionStart;\n                    var fill = allPlaceholder.substr(startCaretPos + newPart.length, selectionLenOld - newPart.length - caretDiff);\n                    var fillPrefix = allPlaceholder.substr(oldSelectionStart, caretDiff);\n                    valUnmasked = oldPrefix + fillPrefix + newPart + fill + oldSuffix;\n                    valUnmasked = this.masker.unmaskValue(valUnmasked);\n                }\n            }\n        }\n        this.oldSelectionLength = this.getSelectionLength();\n        if (isKeyBackspace && this.preventBackspace && !wasSelected) {\n            this.inputElement.value = this.oldValue;\n            this.setCaretPosition(caretPosOld);\n            return;\n        }\n        if (this.isDeletion() && !wasSelected && !this.isValidCaretPosition(caretPos)) {\n            caretPos = this.masker.getPreviousCaretPos(caretPos);\n            valUnmasked = this.masker.unmaskValue(this.oldValue.substring(0, caretPos) + this.oldValue.substring(caretPos + 1));\n        }\n        else if (this.isDeletion() && !wasSelected && valUnmasked === valUnmaskedOld) {\n            while (isKeyBackspace && caretPos > this.minCaretPos && !this.isValidCaretPosition(caretPos)) {\n                caretPos--;\n            }\n            while (isKeyDelete && caretPos < this.maxCaretPos && this.masker.maskCaretMap.indexOf(caretPos) === -1) {\n                caretPos++;\n            }\n            var charIndex = this.masker.maskCaretMap.indexOf(caretPos);\n            if (charIndex != 0) {\n                if (!this.aspnetMasking) {\n                    valUnmasked = valUnmasked.substring(0, charIndex) + valUnmasked.substring(charIndex + 1);\n                }\n            }\n        }\n        this.updateUIValue(valUnmasked, caretBumpBack, caretPos, caretPosOld);\n        this._setValue(valUnmasked);\n    };\n    MaskedInput.prototype._setValue = function (newValue) {\n        if (masker_1.isNumeric(newValue) && masker_1.isString(this.value) && this.numberToString(newValue) === this.value) {\n            return;\n        }\n        if (masker_1.isNumeric(this.value) && masker_1.isString(newValue) && this.numberToString(this.value) === newValue) {\n            return;\n        }\n        if (!this.value && this.value !== 0 && !newValue && newValue !== 0) {\n            return;\n        }\n        if (this.change != null && newValue !== this.value) {\n            this.change({ newValue: newValue, oldValue: this.value });\n        }\n        this.value = newValue;\n    };\n    MaskedInput.prototype.numberToString = function (val) {\n        if (val == null)\n            val = \"\";\n        return \"\" + val;\n    };\n    MaskedInput.prototype.stringToNumber = function (val) {\n        if (masker_1.isNumeric(val)) {\n            return val;\n        }\n        return parseFloat(val);\n    };\n    MaskedInput.prototype.onFocus = function (e) {\n        e = e || {};\n        var valUnmasked = this.unmaskedUIValue;\n        var caretPos = this.getCaretPosition() || 0;\n        var caretPosOld = this.oldCaretPosition || 0;\n        var caretPosDelta = caretPos - caretPosOld;\n        var selectionLenOld = this.oldSelectionLength || 0;\n        var wasSelected = selectionLenOld > 0;\n        var isKeyBackspace = (this.isDeletion() && (caretPosDelta === -1));\n        var isKeyDelete = (this.isDeletion() && (caretPosDelta === 0) && !wasSelected);\n        var caretBumpBack = (isKeyBackspace) && caretPos > this.minCaretPos;\n        this.oldSelectionLength = 0;\n        if (isKeyBackspace && this.preventBackspace) {\n            this.inputElement.value = this.oldValue;\n            this.setCaretPosition(caretPosOld);\n            return;\n        }\n        this.updateUIValue(valUnmasked, caretBumpBack, caretPos, caretPosOld);\n        this.inputElement.setSelectionRange(0, this.inputElement.value.length);\n        this.oldSelectionLength = this.getSelectionLength();\n    };\n    MaskedInput.prototype.onKeyUp = function (e) {\n        e = e || {};\n        var eventType = e.type;\n        if (e.which === 16 || e.which === 91) {\n            return;\n        }\n        var valUnmasked = this.unmaskedUIValue;\n        var caretPos = this.getCaretPosition() || 0;\n        var caretPosOld = this.oldCaretPosition || 0;\n        var caretPosDelta = caretPos - caretPosOld;\n        var selectionLenOld = this.oldSelectionLength || 0;\n        var isSelected = this.getSelectionLength() > 0;\n        var isSelection = (e.which >= 37 && e.which <= 40) && e.shiftKey;\n        var isKeyLeftArrow = e.which === 37;\n        var isKeyBackspace = e.which === 8;\n        var isKeyDelete = e.which === 46;\n        var caretBumpBack = (isKeyLeftArrow || isKeyBackspace) && caretPos > this.minCaretPos;\n        this.oldSelectionLength = this.getSelectionLength();\n        if (isSelection || isSelected) {\n            return;\n        }\n        if (isKeyBackspace && this.preventBackspace) {\n            this.inputElement.value = this.oldValue;\n            this.setCaretPosition(caretPosOld);\n            return;\n        }\n        this.updateUIValue(valUnmasked, caretBumpBack, caretPos, caretPosOld);\n        this._setValue(valUnmasked);\n    };\n    MaskedInput.prototype.updateUIValue = function (valUnmasked, caretBumpBack, caretPos, caretPosOld) {\n        var isAddition = this.isAddition();\n        var valMasked = this.masker.maskValue(valUnmasked);\n        var caretPosMin = this.minCaretPos;\n        var caretPosMax = this.masker.maxCaretPos(valUnmasked);\n        this.oldValue = valMasked;\n        this.oldValueUnmasked = valUnmasked;\n        if (this.isAttached) {\n            this.inputElement.value = valMasked;\n        }\n        if (isAddition && (caretPos <= caretPosMin)) {\n            caretPos = caretPosMin + 1;\n        }\n        if (caretBumpBack) {\n            caretPos--;\n        }\n        caretPos = caretPos > caretPosMax ? caretPosMax : caretPos < caretPosMin ? caretPosMin : caretPos;\n        while (!this.isValidCaretPosition(caretPos) && caretPos > caretPosMin && caretPos < caretPosMax) {\n            caretPos += caretBumpBack ? -1 : 1;\n        }\n        if ((caretBumpBack && caretPos < caretPosMax) || (isAddition && !this.isValidCaretPosition(caretPosOld))) {\n            caretPos++;\n        }\n        this.oldCaretPosition = caretPos;\n        this.caretPos = caretPos;\n        this.setCaretPosition(this.caretPos);\n    };\n    MaskedInput.prototype.getSelectionLength = function () {\n        if (!this.inputElement)\n            return 0;\n        if (this.inputElement.selectionStart !== undefined) {\n            return (this.inputElement.selectionEnd - this.inputElement.selectionStart);\n        }\n        if (document.selection) {\n            return (document.selection.createRange().text.length);\n        }\n        return 0;\n    };\n    MaskedInput.prototype.onKeyDown = function (e) {\n        var isKeyBackspace = e.which === 8;\n        var oldCaretPos = this.getCaretPosition();\n        var newCaretPosOnBksp = oldCaretPos - 1 || 0;\n        if (isKeyBackspace) {\n            while (newCaretPosOnBksp >= 0) {\n                if (this.isValidCaretPosition(newCaretPosOnBksp)) {\n                    this.caretPos = newCaretPosOnBksp;\n                    break;\n                }\n                newCaretPosOnBksp--;\n            }\n            this.preventBackspace = newCaretPosOnBksp === -1;\n        }\n    };\n    MaskedInput.prototype.getCaretPosition = function () {\n        if (!this.inputElement)\n            return 0;\n        if (this.inputElement.selectionStart !== undefined) {\n            return this.inputElement.selectionStart;\n        }\n        else if (document.selection) {\n            if (this.isFocused()) {\n                this.inputElement.focus();\n                var selection = document.selection.createRange();\n                selection.moveStart('character', this.inputElement.value ? -this.inputElement.value.length : 0);\n                return selection.text.length;\n            }\n        }\n        return 0;\n    };\n    MaskedInput.prototype.isValidCaretPosition = function (pos) {\n        return this.masker.maskCaretMap.indexOf(pos) > -1;\n    };\n    MaskedInput.prototype.setCaretPosition = function (pos) {\n        if (!this.inputElement)\n            return 0;\n        if (this.isHidden()) {\n            return;\n        }\n        if (this.inputElement.setSelectionRange) {\n            if (this.isFocused()) {\n                this.inputElement.focus();\n                this.inputElement.setSelectionRange(pos, pos);\n            }\n        }\n        else if (this.inputElement.createTextRange) {\n            var range = this.inputElement.createTextRange();\n            range.collapse(true);\n            range.moveEnd('character', pos);\n            range.moveStart('character', pos);\n            range.select();\n        }\n    };\n    MaskedInput.prototype.isFocused = function () {\n        return this.inputElement === document.activeElement && (!document.hasFocus || document.hasFocus()) &&\n            !!(this.inputElement.type || this.inputElement.href || ~this.inputElement.tabIndex);\n    };\n    MaskedInput.prototype.isHidden = function () {\n        return (this.inputElement.offsetWidth === 0 || this.inputElement.offsetHeight === 0);\n    };\n    MaskedInput.prototype.maskChanged = function () {\n        this.makeMasker();\n        this.setValue(this.value);\n    };\n    MaskedInput.prototype.makeMasker = function () {\n        this.masker = masker_1.getMasker({\n            maskFormat: this.mask,\n            bindMasking: this.bindMasking,\n            placeholder: this.placeholder,\n            aspnetMasking: this.aspnetMasking\n        });\n    };\n    MaskedInput.prototype.setValue = function (newValue) {\n        var valUnmasked = this.getUnmaskedValue(newValue);\n        var caretPos = this.getCaretPosition() || 0;\n        var caretPosOld = this.oldCaretPosition || 0;\n        var caretPosDelta = caretPos - caretPosOld;\n        var selectionLenOld = this.oldSelectionLength || 0;\n        var isSelected = this.getSelectionLength() > 0;\n        var caretBumpBack = caretPos > this.minCaretPos;\n        this.oldSelectionLength = this.getSelectionLength();\n        if (this.editMode === \"overtype\") {\n            var strippedOld = this.masker.stripPlaceholders(this.value);\n            var strippedNew = this.masker.stripPlaceholders(newValue);\n            caretBumpBack = caretBumpBack && strippedNew.length < strippedOld.length;\n        }\n        this.updateUIValue(valUnmasked, caretBumpBack, caretPos, caretPosOld);\n        this._setValue(valUnmasked);\n    };\n    __decorate([\n        aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.twoWay }),\n        __metadata(\"design:type\", Object)\n    ], MaskedInput.prototype, \"value\", void 0);\n    __decorate([\n        aurelia_framework_1.bindable,\n        __metadata(\"design:type\", String)\n    ], MaskedInput.prototype, \"mask\", void 0);\n    __decorate([\n        aurelia_framework_1.bindable,\n        __metadata(\"design:type\", String)\n    ], MaskedInput.prototype, \"inputId\", void 0);\n    __decorate([\n        aurelia_framework_1.bindable,\n        __metadata(\"design:type\", String)\n    ], MaskedInput.prototype, \"inputClass\", void 0);\n    __decorate([\n        aurelia_framework_1.bindable,\n        __metadata(\"design:type\", Boolean)\n    ], MaskedInput.prototype, \"disabled\", void 0);\n    __decorate([\n        aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneTime, defaultValue: false }),\n        __metadata(\"design:type\", Boolean)\n    ], MaskedInput.prototype, \"bindMasking\", void 0);\n    __decorate([\n        aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneTime, defaultValue: false }),\n        __metadata(\"design:type\", Boolean)\n    ], MaskedInput.prototype, \"aspnetMasking\", void 0);\n    __decorate([\n        aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneTime, defaultValue: null }),\n        __metadata(\"design:type\", String)\n    ], MaskedInput.prototype, \"placeholder\", void 0);\n    __decorate([\n        aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneTime, defaultValue: \"insert\" }),\n        __metadata(\"design:type\", String)\n    ], MaskedInput.prototype, \"editMode\", void 0);\n    __decorate([\n        aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneTime, defaultValue: null }),\n        __metadata(\"design:type\", Function)\n    ], MaskedInput.prototype, \"findInput\", void 0);\n    __decorate([\n        aurelia_framework_1.bindable(),\n        __metadata(\"design:type\", Function)\n    ], MaskedInput.prototype, \"change\", void 0);\n    MaskedInput = __decorate([\n        aurelia_framework_1.customAttribute('masked'),\n        aurelia_framework_1.inject(Element),\n        __metadata(\"design:paramtypes\", [Element])\n    ], MaskedInput);\n    return MaskedInput;\n}());\nexports.MaskedInput = MaskedInput;\n//# sourceMappingURL=masked-input.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getMasker(options) {\n    var maskers = _maskers;\n    var key = new MaskOptions();\n    key.maskFormat = options.maskFormat;\n    key.placeholder = options.placeholder || \"_\";\n    key.bindMasking = !!options.bindMasking;\n    key.aspnetMasking = !!options.aspnetMasking;\n    var strkey = JSON.stringify(key);\n    if (!maskers[strkey]) {\n        maskers[strkey] = new Masker(key);\n    }\n    return maskers[strkey];\n}\nexports.getMasker = getMasker;\nvar MaskOptions = (function () {\n    function MaskOptions() {\n    }\n    return MaskOptions;\n}());\nexports.MaskOptions = MaskOptions;\nvar _maskers = new Map();\nvar maskDefinitions = {\n    '9': /\\d/,\n    'A': /[a-zA-Z]/,\n    '*': /[a-zA-Z0-9]/\n};\nfunction deleteChars(s, ch) {\n    if (s == null) {\n        s = \"\";\n    }\n    return s.split(ch).join(\"\");\n}\nvar Masker = (function () {\n    function Masker(options) {\n        this.maskFormat = options.maskFormat;\n        this.bindMasking = options.bindMasking;\n        this.aspnetMasking = options.aspnetMasking;\n        this.maskCaretMap = [];\n        this.maskPatterns = [];\n        this.maskPlaceholder = '';\n        this.minRequiredLength = 0;\n        this.maskComponents = null;\n        this.maskProcessed = false;\n        this.placeholder = options.placeholder;\n        this.processRawMask();\n    }\n    Masker.prototype.unmaskValue = function (value) {\n        if (this.aspnetMasking) {\n            var result = this._maskValue2(value);\n            return result;\n        }\n        else if (this.bindMasking) {\n            return this._maskValue(value, true);\n        }\n        return this._unmaskValue(value);\n    };\n    Masker.prototype.maskValue = function (unmaskedValue) {\n        if (this.aspnetMasking) {\n            var result = this._maskValue2(unmaskedValue);\n            return result;\n        }\n        return this._maskValue(unmaskedValue, false);\n    };\n    Masker.prototype.maxCaretPos = function (value) {\n        var valueLength = -1;\n        valueLength = value.length;\n        if (this.aspnetMasking) {\n            var caretPosMax = this.maskCaretMap.slice().pop();\n            return caretPosMax;\n        }\n        else if (this.bindMasking) {\n            if (this.maskCaretMap.indexOf(valueLength) != -1 ||\n                valueLength === this.maskFormat.length) {\n                return valueLength;\n            }\n            else {\n                for (var i = 0; i < this.maskCaretMap.length; i++) {\n                    if (this.maskCaretMap[i] > valueLength) {\n                        return this.maskCaretMap[i];\n                    }\n                }\n                return this.maskCaretMap.slice().shift();\n            }\n        }\n        else {\n            var caretPosMax = this.maskCaretMap[valueLength] || this.maskCaretMap.slice().shift();\n            return caretPosMax;\n        }\n    };\n    Masker.prototype.minCaretPos = function () {\n        return this.maskCaretMap[0];\n    };\n    Masker.prototype._unmaskValue = function (value) {\n        var valueUnmasked = '', maskPatternsCopy = this.maskPatterns.slice();\n        value = value.toString();\n        this.maskComponents.forEach(function (component) {\n            value = value.replace(component, '');\n        });\n        value.split('').forEach(function (chr) {\n            if (maskPatternsCopy.length && maskPatternsCopy[0].test(chr)) {\n                valueUnmasked += chr;\n                maskPatternsCopy.shift();\n            }\n        });\n        return valueUnmasked;\n    };\n    Masker.prototype._maskValue = function (unmaskedValue, keepMasking) {\n        var input = unmaskedValue || '';\n        var valueMasked = '', maskCaretMapCopy = this.maskCaretMap.slice(), maskPatternsCopy = this.maskPatterns.slice();\n        if (keepMasking) {\n            input = this._unmaskValue(input);\n        }\n        function putMaybe(chr) {\n            if (!keepMasking || input.length > 0) {\n                valueMasked += chr;\n            }\n        }\n        function putNextInput() {\n            valueMasked += input.charAt(0);\n        }\n        function nextCharMatches() {\n            return maskPatternsCopy[0].test(input.charAt(0));\n        }\n        function advanceInput() {\n            input = input.substr(1);\n        }\n        function advanceCaretMap() {\n            maskCaretMapCopy.shift();\n        }\n        function advancePatterns() {\n            maskPatternsCopy.shift();\n        }\n        this.maskPlaceholder.split('').forEach(function (chr, i) {\n            if (input.length > 0 && i === maskCaretMapCopy[0]) {\n                if (maskPatternsCopy.length) {\n                    while (input.length > 0 && !nextCharMatches()) {\n                        advanceInput();\n                    }\n                }\n                if (maskPatternsCopy.length && nextCharMatches()) {\n                    putNextInput();\n                    advanceCaretMap();\n                    advancePatterns();\n                }\n                else {\n                    putMaybe(chr);\n                    maskCaretMapCopy.shift();\n                }\n                advanceInput();\n            }\n            else {\n                if (input.length > 0 && input.charAt(0) === chr) {\n                    advanceInput();\n                }\n                putMaybe(chr);\n            }\n        });\n        return valueMasked;\n    };\n    Masker.prototype._maskValue2 = function (unmaskedValue) {\n        var input;\n        input = unmaskedValue || \"\";\n        var valueMasked = '', maskCaretMapCopy = this.maskCaretMap.slice(), maskPatternsCopy = this.maskPatterns.slice();\n        maskCaretMapCopy.pop();\n        var placeholder = this.placeholder;\n        function putMaybe(chr) {\n            valueMasked += chr;\n        }\n        function putNextInput() {\n            valueMasked += input.charAt(0);\n        }\n        function nextCharMatches() {\n            if (input.charAt(0) == placeholder)\n                return true;\n            return maskPatternsCopy[0].test(input.charAt(0));\n        }\n        function advanceInput() {\n            input = input.substr(1);\n        }\n        function advanceCaretMap() {\n            maskCaretMapCopy.shift();\n        }\n        function advancePatterns() {\n            maskPatternsCopy.shift();\n        }\n        this.maskPlaceholder.split('').forEach(function (chr, i) {\n            if (input.length > 0 && i === maskCaretMapCopy[0]) {\n                if (maskPatternsCopy.length && nextCharMatches()) {\n                    putNextInput();\n                    advanceCaretMap();\n                    advancePatterns();\n                }\n                else {\n                    putMaybe(chr);\n                    maskCaretMapCopy.shift();\n                }\n                advanceInput();\n            }\n            else {\n                while (input.length > 0 && input.charAt(0) === placeholder) {\n                    advanceInput();\n                }\n                if (input.length > 0 && input.charAt(0) === chr) {\n                    advanceInput();\n                }\n                putMaybe(chr);\n            }\n        });\n        return valueMasked;\n    };\n    Masker.prototype.stripPlaceholders = function (masked) {\n        return deleteChars(masked, this.placeholder);\n    };\n    Masker.prototype.getNextCaretPos = function (caretPos) {\n        if (this.maskCaretMap.length == 0) {\n            return this.maskFormat.length;\n        }\n        var ix = 0;\n        while (ix < this.maskCaretMap.length - 1 && this.maskCaretMap[ix] <= caretPos) {\n            ix++;\n        }\n        return this.maskCaretMap[ix];\n    };\n    Masker.prototype.getPreviousCaretPos = function (caretPos) {\n        if (this.maskCaretMap.length == 0) {\n            return 0;\n        }\n        var ix = this.maskCaretMap.length - 1;\n        while (ix > 0 && this.maskCaretMap[ix] >= caretPos) {\n            ix--;\n        }\n        return this.maskCaretMap[ix];\n    };\n    Masker.prototype.processRawMask = function () {\n        var _this = this;\n        var characterCount = 0;\n        if (isString(this.maskFormat)) {\n            var isOptional = false, numberOfOptionalCharacters = 0, splitMask = this.maskFormat.split('');\n            splitMask.forEach(function (chr, i) {\n                if (maskDefinitions[chr]) {\n                    _this.maskCaretMap.push(characterCount);\n                    _this.maskPlaceholder += _this.getPlaceholderChar(i - numberOfOptionalCharacters);\n                    _this.maskPatterns.push(maskDefinitions[chr]);\n                    characterCount++;\n                    if (!isOptional) {\n                        _this.minRequiredLength++;\n                    }\n                    isOptional = false;\n                }\n                else if (chr === '?') {\n                    isOptional = true;\n                    numberOfOptionalCharacters++;\n                }\n                else {\n                    _this.maskPlaceholder += chr;\n                    characterCount++;\n                }\n            });\n        }\n        this.maskCaretMap.push(this.maskCaretMap.slice().pop() + 1);\n        this.getMaskComponents();\n        this.maskProcessed = this.maskCaretMap.length > 1 ? true : false;\n    };\n    Masker.prototype.getMaskComponents = function () {\n        var maskPlaceholderChars = this.maskPlaceholder.split(''), maskPlaceholderCopy;\n        if (this.maskCaretMap && !isNaN(this.maskCaretMap[0])) {\n            this.maskCaretMap.forEach(function (value) {\n                maskPlaceholderChars[value] = '_';\n            });\n        }\n        maskPlaceholderCopy = maskPlaceholderChars.join('');\n        this.maskComponents = maskPlaceholderCopy.replace(/[_]+/g, '_').split('_');\n    };\n    Masker.prototype.getPlaceholderChar = function (i) {\n        var defaultPlaceholderChar = this.placeholder;\n        return (defaultPlaceholderChar.toLowerCase() === 'space') ? ' ' : defaultPlaceholderChar[0];\n    };\n    Masker.prototype.isValidAt = function (chr, caretPos) {\n        var ix = this.maskCaretMap.indexOf(caretPos);\n        if (ix == -1 || ix >= this.maskPatterns.length)\n            return false;\n        var pattern = this.maskPatterns[ix];\n        return pattern.test(chr);\n    };\n    return Masker;\n}());\nexports.Masker = Masker;\nfunction isString(myVar) {\n    return (typeof myVar === 'string' || myVar instanceof String);\n}\nexports.isString = isString;\nfunction isNumeric(n) {\n    return !isString(n) && !isNaN(parseFloat(n)) && isFinite(n);\n}\nexports.isNumeric = isNumeric;\n//# sourceMappingURL=masker.js.map"],"names":[],"sourceRoot":""}