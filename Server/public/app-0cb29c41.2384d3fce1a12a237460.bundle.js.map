{"version":3,"file":"app-0cb29c41.2384d3fce1a12a237460.bundle.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAIA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAoCA;AAAA;AAljpBA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAYA;AAAA;AAVA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAiBA;AAAA;AAfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACnYA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;AAAA;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC7HA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAAA;AAJA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAAA;AAJA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AAEA;AAIA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAYA;AAAA;AAVA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAWA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;ACxsources":["webpack://uccss-old-new/./src/modules/user/requests/clientRequests.js","webpack://uccss-old-new/./src/modules/user/requests/createRequests.js","webpack://uccss-old-new/./src/modules/user/requests/viewProducts.js","webpack://uccss-old-new/./src/modules/user/requests/viewRequests.js","webpack://uccss-old-new/./src/modules/user/support/createHelpTicketsWiz.js","webpack://uccss-old-new/./src/modules/user/support/curriculum.js","webpack://uccss-old-new/./src/modules/user/support/downloads.js","webpack://uccss-old-new/./src/modules/user/support/links.js","webpack://uccss-old-new/./src/modules/user/support/support.js","webpack://uccss-old-new/./src/modules/user/support/viewHelpTickets.js","webpack://uccss-old-new/./src/modules/user/user.js","webpack://uccss-old-new/./src/modules/user/requests/clientRequests.html","webpack://uccss-old-new/./src/modules/user/requests/components/Courses.html","webpack://uccss-old-new/./src/modules/user/requests/components/assignmentDetails.html","webpack://uccss-old-new/./src/modules/user/requests/components/bo.html","webpack://uccss-old-new/./src/modules/user/requests/components/client-request-step1.html","webpack://uccss-old-new/./src/modules/user/requests/components/client-request-step2.html","webpack://uccss-old-new/./src/modules/user/requests/components/client-request-step3.html","webpack://uccss-old-new/./src/modules/user/requests/components/client-request-step4.html","webpack://uccss-old-new/./src/modules/user/requests/components/erp.html","webpack://uccss-old-new/./src/modules/user/requests/components/hana.html","webpack://uccss-old-new/./src/modules/user/requests/components/requestDetails.html","webpack://uccss-old-new/./src/modules/user/requests/components/viewRequestsForm.html","webpack://uccss-old-new/./src/modules/user/requests/components/viewRequestsTable.html","webpack://uccss-old-new/./src/modules/user/requests/createRequests.html","webpack://uccss-old-new/./src/modules/user/requests/viewProducts.html","webpack://uccss-old-new/./src/modules/user/requests/viewRequests.html","webpack://uccss-old-new/./src/modules/user/support/components/Requests.html","webpack://uccss-old-new/./src/modules/user/support/components/comment.html","webpack://uccss-old-new/./src/modules/user/support/components/help-ticket-step1.html","webpack://uccss-old-new/./src/modules/user/support/components/help-ticket-step2.html","webpack://uccss-old-new/./src/modules/user/support/components/help-ticket-step3.html","webpack://uccss-old-new/./src/modules/user/support/components/help-ticket-step4.html","webpack://uccss-old-new/./src/modules/user/support/components/help-ticket-step5.html","webpack://uccss-old-new/./src/modules/user/support/components/helpTicketWizard.html","webpack://uccss-old-new/./src/modules/user/support/components/viewHTForm.html","webpack://uccss-old-new/./src/modules/user/support/components/viewHTTable.html","webpack://uccss-old-new/./src/modules/user/support/createHelpTicketsWiz.html","webpack://uccss-old-new/./src/modules/user/support/curriculum.html","webpack://uccss-old-new/./src/modules/user/support/downloads.html","webpack://uccss-old-new/./src/modules/user/support/links.html","webpack://uccss-old-new/./src/modules/user/support/support.html","webpack://uccss-old-new/./src/modules/user/support/viewHelpTickets.html","webpack://uccss-old-new/./src/modules/user/user.html"],"sourcesContent":["import {inject} from 'aurelia-framework';\nimport {Router} from \"aurelia-router\";\nimport {AppConfig} from '../../../config/appConfig'; \n\n@inject(Router, AppConfig)\nexport class ClientRequests{\n    title=\"Product Requests\";\n    \n    constructor(router, config){\n        this.router = router;\n        this.config = config;\n    }\n\n    attached(){\n        $(\".nav a\").on(\"click\", function(){\n            $(\".nav\").find(\".active\").removeClass(\"active\");\n            $(this).parent().addClass(\"active\");\n        });\n    }\n    \n    activate(){\n         this.config.getConfig(true);\n    }    \n\n    configureRouter(config, router) {\n        config.map([\n        {\n            route: ['', 'viewRequests'],\n            moduleId: PLATFORM.moduleName('./viewRequests'),\n            settings: { auth: true, roles: [] },\n            nav: true,\n            name: 'viewRequests',\n            title: 'View Requests'\n        },\n        {\n            route: 'createRequests',\n            moduleId: PLATFORM.moduleName('./createRequests'),\n            settings: { auth: true, roles: [] },\n            nav: true,\n            name: 'createRequests',\n            title: 'Create Request'\n        },       \n        {\n            route: 'viewProducts',\n            moduleId: PLATFORM.moduleName('./viewProducts'),\n            settings: { auth: true, roles: [] },\n            nav: true,\n            name: 'viewProducts',\n            title: 'Product List'\n        }\n        ]);\n\n        this.router = router;\n    }\n}\n","import { inject } from 'aurelia-framework';\r\nimport { Router } from \"aurelia-router\";\r\nimport { DataTable } from '../../../resources/utils/dataTable';\r\nimport { Sessions } from '../../../resources/data/sessions';\r\nimport { Products } from '../../../resources/data/products';\r\nimport { SiteInfo } from '../../../resources/data/siteInfo';\r\nimport { ClientRequests } from '../../../resources/data/clientRequests';\r\nimport { AppConfig } from '../../../config/appConfig';\r\nimport { Utils } from '../../../resources/utils/utils';\r\nimport { People } from '../../../resources/data/people';\r\nimport Validation from '../../../resources/utils/validation';\r\nimport { CommonDialogs } from '../../../resources/dialogs/common-dialogs';\r\nimport { SessionObj } from '../../../resources/data/sessionData';\r\nimport Flatpickr from 'flatpickr';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\n\r\nimport fuelux from 'fuelux';\r\nimport moment from 'moment';\r\n\r\n@inject(Router, AppConfig, Validation, People, CommonDialogs, DataTable, Utils, Sessions, Products, ClientRequests, SiteInfo, EventAggregator)\r\nexport class ViewHelpTickets {\r\n  sessionSelected = false;\r\n  courseSelected = false;\r\n  sandBoxClient = false;\r\n  editCourse = false;\r\n  editCourseFlag = false;\r\n  showLockMessage = false;\r\n  showInfoBox = true;\r\n  spinnerHTML = \"\";\r\n  sessionId = -1;\r\n  courseId = -1;\r\n  requestType = -1;\r\n  requestReceived = false;\r\n  existingRequest = false;\r\n\r\n  tempRequests = new Array();\r\n  productInfo = new Array();\r\n  lockObject = new Object();\r\n\r\n  minStartDate = \"1/1/1900\";\r\n  maxStartDate = \"1/1/9999\";\r\n  startDate = \"\";\r\n  configDate = {\r\n    \"disable\": [\r\n      function (date) {\r\n        // return true to disable\r\n        return (date.getDay() === 6 || date.getDay() === 0);\r\n\r\n      }\r\n    ],\r\n    \"locale\": {\r\n      \"firstDayOfWeek\": 1 // start week on Monday\r\n    }\r\n  };\r\n\r\n  constructor(router, config, validation, people, dialog, datatable, utils, sessions, products, requests, siteInfo, ea) {\r\n    this.router = router;\r\n    this.config = config;\r\n    this.validation = validation;\r\n    this.validation.initialize(this);\r\n    this.people = people;\r\n    this.dataTable = datatable;\r\n    this.dataTable.initialize(this);\r\n    this.utils = utils;\r\n    this.sessions = sessions;\r\n    this.products = products;\r\n    this.requests = requests;\r\n    this.siteInfo = siteInfo;\r\n    this.dialog = dialog;\r\n    this.ea = ea;\r\n\r\n    this.userObj = JSON.parse(sessionStorage.getItem('user'));\r\n\r\n  };\r\n\r\n  async activate() {\r\n    let responses = await Promise.all([\r\n      this.sessions.getSessionsArray('?filter=[or]sessionStatus|Requests&order=sortOrder', true),\r\n      this.products.getProductsArray('?filter=active|eq|true&order=name', true),\r\n      this.siteInfo.getMessageArray('?filter=category|eq|CLIENT_REQUESTS', true),\r\n      this.config.getConfig()\r\n    ]);\r\n\r\n    this.people.getPeopleArray();\r\n    this.people.getCoursesArray(true, '?filter=personId|eq|' + this.userObj._id + '&order=number');\r\n    this.requests.selectRequest()\r\n    this.filterList();\r\n    this._setUpValidation();\r\n    this.getMessages();\r\n\r\n    this.useSandbox = this.config.SANDBOX_USED;\r\n    if (!this.useSandbox) {\r\n      this.typeSelected = true;\r\n      this.regularClient = true;\r\n      this.requestType = \"regularCourse\";\r\n    }\r\n  }\r\n\r\n  canActivate() {\r\n    if (!this.userObj) {\r\n      this.userObj = this.config.user;\r\n      if (!this.userObj) {\r\n        this.utils.showNotification(\"Couldn't find your user information.  Try logging in again or call the UCC.\", \"warning\");\r\n        this.router.navigate(\"home\");\r\n      }\r\n    }\r\n  }\r\n\r\n  getMessages() {\r\n    this.CLIENT_REQUEST_START = this.siteInfo.selectMessageByKey('CLIENT_REQUEST_START');\r\n    this.SESSION_SELECTED = this.siteInfo.selectMessageByKey('SESSION_SELECTED');\r\n    this.REGULAR_NUMBER_OF_STUDENTS = this.siteInfo.selectMessageByKey('REGULAR_NUMBER_OF_STUDENTS');\r\n    this.START_END_DATES = this.siteInfo.selectMessageByKey('START_END_DATES');\r\n  }\r\n\r\n  async getRequests() {\r\n    await this._unLock();\r\n    this.requestReceived = false;\r\n    if (this.sessionId != -1 && this.courseId != -1) {\r\n      this.ILockedIt = false;\r\n      this.existingRequest = false;\r\n      await this.requests.getClientRequestsArray('?filter=[and]personId|eq|' + this.userObj._id + ':sessionId|eq|' + this.sessionId + ':courseId|eq|' + this.courseId, true);\r\n      if (this.requests.requestsArray && this.requests.requestsArray.length > 0) {\r\n        this.requests.selectRequest(0);\r\n        this.originalRequest = this.utils.copyObject(this.requests.selectedRequest);\r\n        this.existingRequestLength = this.requests.selectedRequest.requestDetails.length;\r\n        this.setDates(false);\r\n        await this._lock();\r\n        this.ILockedIt = true;\r\n        this.existingRequest = true;\r\n        if (this.requests.requestsArray && this.requests.requestsArray.length > 0) {\r\n          let dateFoo = moment(new Date(this.requests.selectedRequest.requestDetails[0].createdDate)).format(this.config.DATE_FORMAT_TABLE);\r\n          let existingMsg = this.siteInfo.selectMessageByKey('EXISTING_REQUEST_MESSAGE').content.replace('DATECREATED', dateFoo);\r\n          $(\"#existingRequestInfo\").html('').append(existingMsg).fadeIn();\r\n        } else {\r\n          $(\"#existingRequestInfo\").empty().hide();\r\n        }\r\n        this.requestReceived = true;\r\n      } else {\r\n        $(\"#existingRequestInfo\").empty().hide();\r\n        this.setDates(true);\r\n        this.existingRequestLength = 0;\r\n        this.existingRequest = false;\r\n        this.requests.selectRequest();\r\n        this.requests.selectedRequest.sessionId = this.sessionId;\r\n        this.requestReceived = true;\r\n      }\r\n\r\n    } else {\r\n      this.existingRequest = false;\r\n    }\r\n  }\r\n\r\n  async refresh() {\r\n    this.spinnerHTML = \"<i class='fa fa-spinner fa-spin'></i>\";\r\n    await this.getRequests();\r\n    this.spinnerHTML = \"\";\r\n  }\r\n\r\n  attached() {\r\n    var wizard = $('.wizard').wizard();\r\n    this.toolTips();\r\n    var that = this;\r\n\r\n    wizard.on('actionclicked.fu.wizard', function (e, data) {\r\n      that.step = data.step;\r\n      if (data.direction !== \"previous\") {\r\n        if (!that.validation.validate(data.step)) {\r\n          e.preventDefault();\r\n        } else if (data.step === 4) {\r\n          that.validation.makeValid($(\"#productListTable\"));\r\n          that.save();\r\n        }\r\n      }\r\n    })\r\n    let config = {\r\n      altInput: true,\r\n      altFormat: \"F j, Y\"\r\n    };\r\n  }\r\n\r\n  deactivate() {\r\n    this._unLock();\r\n  }\r\n\r\n  /*******************************************************************\r\n   * User changes the session\r\n   * el - event object\r\n   ******************************************************************/\r\n  async changeSession(el) {\r\n    if (this.sessionId == -1) {\r\n      //Drop down list changed to no session selected\r\n      this.sessionSelected = false;\r\n      this.courseSelected = false;\r\n      this.sandBoxClient = false;\r\n    } else {\r\n      this._unLock();\r\n      this.sessionSelected = true;\r\n      //Select a session\r\n      this.sessions.selectSession(el.target.selectedIndex - 1);\r\n      this.setDates();\r\n      this.validation.makeValid($(el.target));\r\n      await this.getRequests();\r\n    }\r\n  }\r\n\r\n  async selectCourse(index, el) {\r\n    this.editCourseIndex = index;\r\n    this.people.selectCourse(this.editCourseIndex);\r\n    this.courseSelected = true;\r\n    this.courseId = this.people.selectedCourse._id;\r\n    await this.getRequests();\r\n\r\n    if (this.selectedCourseRow) this.selectedCourseRow.children().removeClass('info');\r\n    this.selectedCourseRow = $(el.target).closest('tr');\r\n    this.selectedCourseRow.children().addClass('info')\r\n  }\r\n\r\n  setDates(session) {\r\n    if (session) {\r\n      $(\"#input-startDate\").val(\"\")\r\n      $(\"#input-endDate\").val(\"\")\r\n    }\r\n    this.minStartDate = moment(this.sessions.selectedSession.startDate).add(7, 'hours').format('YYYY-MM-DD');\r\n    this.maxStartDate = this.sessions.selectedSession.endDate;\r\n    this.minEndDate = this.sessions.selectedSession.startDate;\r\n    this.maxEndDate = this.sessions.selectedSession.endDate;\r\n\r\n    this.minRequiredDate = this.minStartDate;\r\n    // var nowPlusLeeway = moment(new Date()).add(this.config.REQUEST_LEEWAY + 1,'days');\r\n    // this.minRequiredDate = moment.max(nowPlusLeeway, moment(this.sessions.selectedSession.startDate));\r\n    // this.minRequiredDate = moment(this.minRequiredDate).add(7, 'hours').format('YYYY-MM-DD');\r\n    this.maxRequiredDate = this.sessions.selectedSession.endDate;\r\n  }\r\n\r\n  async changeCourse(el) {\r\n    var courseId = el.target.options[el.target.selectedIndex].value;\r\n    this.selectedCourseIndex = el.target.selectedIndex;\r\n    if (courseId === \"\") {\r\n      this.courseSelected = false;\r\n    } else {\r\n      this.courseSelected = true;\r\n      this.courseName = this.courses[el.target.selectedIndex - 1].number + \" - \" + this.courses[el.target.selectedIndex - 1].name;\r\n      this.validation.makeValid($(el.target));\r\n      await this.getRequests();\r\n    }\r\n  }\r\n\r\n  filterList() {\r\n    if (this.filter) {\r\n      var thisFilter = this.filter\r\n      this.filteredProductsArray = this.products.productsArray.filter((item) => {\r\n        return item.name.toUpperCase().indexOf(thisFilter.toUpperCase()) != -1;\r\n      });\r\n    } else {\r\n      this.filteredProductsArray = this.products.productsArray;\r\n    }\r\n  }\r\n\r\n  changeBeginDate(evt) {\r\n    if (evt.detail && evt.detail.value.date !== \"\") {\r\n      this.minEndDate = moment(evt.detail.value.date).format(\"YYYY-MM-DD\");\r\n      this.requests.selectedRequest.endDate = moment.max(this.requests.selectedRequest.startDate, this.requests.selectedRequest.endDate);\r\n    }\r\n  }\r\n\r\n  async changeRequestType(el) {\r\n    $(\"#existingRequestInfo\").empty().hide();\r\n    switch (el.target.value) {\r\n      case \"-1\":\r\n        this.typeSelected = false;\r\n        this.courseSelected = false;\r\n        this.sandBoxClient = false;\r\n        break;\r\n      case 'sandboxCourse':\r\n        this.typeSelected = true;\r\n        this.courseSelected = false;\r\n        this.sandBoxClient = true;\r\n        this.regularClient = false;\r\n        this.courseId = this.config.SANDBOX_ID;\r\n        await this.getRequests();\r\n        this.validation.makeValid($(el.target));\r\n        break;\r\n      case 'regularCourse':\r\n        this.typeSelected = true;\r\n        this.courseId = \"-1\";\r\n        this.regularClient = true;\r\n        this.sandBoxClient = false;\r\n        this.validation.makeValid($(el.target));\r\n        await this.getRequests();\r\n    }\r\n  }\r\n\r\n  _cleanRequest() {\r\n    this.request.undergraduates = 0;\r\n    this.request.graduates = 0;\r\n    this.request.comments = \"\";\r\n    this.tempRequests = [];\r\n    this.tempRequest = {};\r\n  }\r\n\r\n  selectProduct(el) {\r\n    if (this.requests.selectedRequest.requestDetails.length < this.config.REQUEST_LIMIT && !this.showLockMessage) {\r\n      if (this.alreadyOnList(el.target.id)) {\r\n        this.utils.showNotification('If you need more than one client of a product, add a comment on the next step.', 'warning')\r\n      } else {\r\n        $(\"#requestProductsLabel\").html(\"Requested Products\");\r\n        var newObj = this.requests.emptyRequestDetail();\r\n        newObj.productId = el.target.id;\r\n        newObj.sessionId = this.requests.selectedRequest.sessionId;\r\n        this.requests.selectedRequest.requestDetails.push(newObj);\r\n        this.products.testFunction();\r\n        this.products.selectedObjectById(newObj.productId);\r\n        this.requests.selectedRequest.requestDetails[this.requests.selectedRequest.requestDetails.length - 1].productName = this.products.selectedProduct.name;\r\n        // this.requiredDates.push(false);\r\n      }\r\n    } else {\r\n      if (this.requests.selectedRequest.requestDetails.length === this.config.REQUEST_LIMIT) {\r\n        this.utils.showNotification('Only ' + this.config.REQUEST_LIMIT + ' products per request are allowed.', 'warning')\r\n      }\r\n    }\r\n\r\n    this.validation.makeValid($(\"#productList\"));\r\n  }\r\n\r\n  alreadyOnList(id) {\r\n    for (let i = 0; i < this.requests.selectedRequest.requestDetails.length; i++) {\r\n      if (this.requests.selectedRequest.requestDetails[i].productId === id) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  removeProduct(el) {\r\n    if (!this.showLockMessage) {\r\n      for (var i = 0; i < this.requests.selectedRequest.requestDetails.length; i++) {\r\n        if (el.target.id === this.requests.selectedRequest.requestDetails[i].productId) {\r\n          if (this.requests.selectedRequest.requestDetails[i]._id) {\r\n            if (this.requests.selectedRequest.requestDetails[i].requestStatus == this.config.ASSIGNED_REQUEST_CODE) {\r\n              return this.dialog.showMessage(\r\n                \"That request has already been assigned and cannot be deleted?\",\r\n                \"Cannot Delete Request\",\r\n                ['Ok']\r\n              ).whenClosed(response => {\r\n              });\r\n\r\n            } else {\r\n              return this.dialog.showMessage(\r\n                \"Are you sure you want to delete that request?\",\r\n                \"Delete Request\",\r\n                ['Yes', 'No']\r\n              ).whenClosed(response => {\r\n                if (!response.wasCancelled) {\r\n                  this.requests.selectedRequest.requestDetails[i].delete = true;\r\n                }\r\n              });\r\n            }\r\n            break;\r\n          } else {\r\n            this.requests.selectedRequest.requestDetails.splice(i, 1);\r\n            // this.requiredDates.splice(i,1);\r\n            for (var j = 0; j < this.productInfo.length; j++) {\r\n              if (el.target.id == this.productInfo[j].productId) {\r\n                this.productInfo.splice(j, 1);\r\n                break;\r\n              }\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  showCurriculum(product, $event) {\r\n    this.productInfoObject = this.products.getProductInfo(product._id);\r\n    if (this.productInfoObject) $(\"#curriculumInfo\").css(\"display\", \"block\");\r\n  }\r\n\r\n  hideCurriculum() {\r\n    $(\"#curriculumInfo\").css(\"display\", \"none\");\r\n  }\r\n\r\n  _setUpValidation() {\r\n    this.validation.addRule(1, \"course\", [{\r\n      \"rule\": \"custom\", \"message\": \"Select a course\",\r\n      \"valFunction\": function (context) {\r\n        if (context.requestType === \"sandboxCourse\") {\r\n          return true\r\n        } else {\r\n          return !(context.courseId == -1);\r\n        }\r\n      }\r\n    }]);\r\n    this.validation.addRule(1, \"session\", [\r\n      {\r\n        \"rule\": \"custom\", \"message\": \"Select a session\",\r\n        \"valFunction\": function (context) {\r\n          return !(context.sessionId == -1);\r\n        }\r\n      }\r\n\r\n    ]);\r\n    this.validation.addRule(1, \"startDateError\", [\r\n      {\r\n        \"rule\": \"required\", \"message\": \"Select a date\",\r\n        \"value\": \"requests.selectedRequest.startDate\"\r\n      }\r\n    ]);\r\n    this.validation.addRule(1, \"endDateError\", [\r\n      {\r\n        \"rule\": \"required\", \"message\": \"Select a date\",\r\n        \"value\": \"requests.selectedRequest.endDate\"\r\n      }\r\n    ]);\r\n\r\n    this.validation.addRule(1, \"requestType\", [{\r\n      \"rule\": \"custom\", \"message\": \"Select a request type\",\r\n      \"valFunction\": function (context) {\r\n        return !(context.requestType == -1);\r\n      }\r\n    }]);\r\n    this.validation.addRule(1, \"numberOfStudentsError\", [{\r\n      \"rule\": \"custom\", \"message\": \"Enter either the number of undergradate or graduate students\",\r\n      \"valFunction\": function (context) {\r\n        if (context.requestType === \"sandboxCourse\") {\r\n          return true;\r\n        } else if (context.requests.selectedRequest.undergradIds == 0 && context.requests.selectedRequest.graduateIds == 0) {\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      }\r\n    }]);\r\n    this.validation.addRule(2, \"productList\", [{\r\n      \"rule\": \"custom\", \"message\": \"Select at least one product\",\r\n      \"valFunction\": function (context) {\r\n        if (context.requests.selectedRequest.requestDetails.length === 0) {\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    ]);\r\n    this.validation.addRule(4, \"productListTable\", [{\r\n      \"rule\": \"custom\", \"message\": \"Enter all required dates\",\r\n      \"valFunction\": function (context) {\r\n        for (var i = 0; i < context.requests.selectedRequest.requestDetails.length; i++) {\r\n          if ((!context.requests.selectedRequest.requestDetails[i].requiredDate || context.requests.selectedRequest.requestDetails[i].requiredDate === \"\"\r\n            || moment(context.requests.selectedRequest.requestDetails[i].requiredDate).isBefore(context.minStartDate))\r\n          ) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    },\r\n    {\r\n      \"rule\": \"custom\", \"message\": \"Required date cannot be earlier than 5 days from today\",\r\n      \"valFunction\": function (context) {\r\n        var nowPlusLeeway = moment(new Date()).add(context.config.REQUEST_LEEWAY + 1, 'days');\r\n        var minRequiredDate = moment.max(nowPlusLeeway, moment(context.sessions.selectedSession.startDate));\r\n        for (var i = context.existingRequestLength; i < context.requests.selectedRequest.requestDetails.length; i++) {\r\n          if (moment(context.requests.selectedRequest.requestDetails[i].requiredDate).isBefore(minRequiredDate, 'day')) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    }]);\r\n    this.validation.addRule(5, \"number\", [\r\n      { \"rule\": \"required\", \"message\": \"Enter the course number\", \"value\": \"people.selectedCourse.number\" },\r\n      { \"rule\": \"required\", \"message\": \"Enter the course name\", \"value\": \"people.selectedCourse.name\" }\r\n    ]);\r\n  }\r\n\r\n  _buildRequest() {\r\n    if (this.existingRequest && this.userObj._id) {\r\n      let changes = this.requests.isRequestDirty(this.originalRequest, ['personId', 'requestDetailsToSave']);\r\n      this.requests.selectedRequest.requestDetailsToSave = this.requests.selectedRequest.requestDetails;\r\n      this.requests.selectedRequest.requestDetailsToSave.forEach((item, index) => {\r\n        if (item.requestStatus != this.config.ASSIGNED_REQUEST_CODE) item.requestStatus = this.config.UPDATED_REQUEST_CODE;\r\n\r\n      });\r\n\r\n      changes.forEach(item => {\r\n        if (item.property === 'requestDetails') {\r\n          item.oldValue = \"\";\r\n          this.originalRequest.requestDetails.forEach(item2 => {\r\n            this.products.selectedProductFromId(item.productId);\r\n            item.oldValue += this.products.selectedProduct.name + \" \";\r\n          });\r\n          item.newValue = \"\";\r\n          this.requests.selectedRequest.requestDetails.forEach(item2 => {\r\n            this.products.selectedProductFromId(item.productId);\r\n            item.newValue += this.products.selectedProduct.name + \" \";\r\n          });\r\n        }\r\n        this.requests.selectedRequest.audit.push({\r\n          personId: this.userObj._id,\r\n          property: item.property,\r\n          oldValue: item.oldValue,\r\n          newValue: item.newValue\r\n        })\r\n      })\r\n\r\n    } else {\r\n      this.requests.selectedRequest.audit[0].personId = this.userObj._id;\r\n    }\r\n\r\n    // this.requests.selectedRequest.requestDetails.forEach((item, index) => {\r\n    //   if(!item.requiredDate){\r\n    //      this.requests.selectedRequest.requestDetails[index].requiredDate = this.requiredDates[index];\r\n    //   }\r\n    // });\r\n\r\n    this.requests.selectedRequest.institutionId = this.userObj.institutionId._id;\r\n    this.requests.selectedRequest.sessionId = this.sessionId;\r\n    this.requests.selectedRequest.courseId = this.courseId;\r\n    this.requests.selectedRequest.personId = this.userObj._id;\r\n    this.requests.selectedRequest.requestStatus = this.config.UPDATED_REQUEST_CODE;\r\n  }\r\n\r\n  async save() {\r\n    if (this.validation.validate(1)) {\r\n      this._buildRequest();\r\n      let email = this._buildEmailObject();\r\n      let serverResponse = await this.requests.saveRequest(email);\r\n      if (!serverResponse.status) {\r\n        this.systemSelected = false;\r\n        this.utils.showNotification(\"Product request \" + serverResponse.clientRequestNo + \" was updated\");\r\n      }\r\n    }\r\n    this._cleanUp();\r\n  }\r\n\r\n  _buildEmailObject() {\r\n    var mailObject = new Object();\r\n    if (this.config.SEND_EMAILS) {\r\n      mailObject.products = new Array();\r\n      this.requests.selectedRequest.requestDetails.forEach((detail, index) => {\r\n        this.products.selectedProductFromId(detail.productId);\r\n        var date = new Date(detail.requiredDate);\r\n        var day = date.getDate();\r\n        var month = date.getMonth() + 1;\r\n        var year = date.getFullYear();\r\n        mailObject.products.push({ id: detail.productId, requiredDate: month + \"/\" + day + \"/\" + year, name: this.products.selectedProduct.name })\r\n      });\r\n\r\n      let course = this.people.selectedCourse ? this.people.selectedCourse.name : 'Trial Client';\r\n      mailObject.MESSAGE = this.config.CLIENT_REQUEST_CREATED_TOP\r\n        .replace('[CUSTOMER]', this.userObj.fullName)\r\n        .replace('[SESSION]', this.sessions.selectedSession.session)\r\n        .replace('[COURSE]', course)\r\n      mailObject.BOTTOM = this.config.CLIENT_REQUEST_CREATED_BOTTOM;\r\n      // mailObject.comments = this.requests.selectedRequest.comments;\r\n      // mailObject.name = this.userObj.fullName;\r\n      mailObject.numStudents = parseInt(this.requests.selectedRequest.undergradIds) + parseInt(this.requests.selectedRequest.graduateIds);\r\n      mailObject.email = this.userObj.email\r\n      mailObject.cc = this.config.REQUESTS_EMAIL_LIST ? this.config.REQUESTS_EMAIL_LIST : \"\";\r\n    }\r\n\r\n    return mailObject;\r\n  }\r\n\r\n  _cleanUp() {\r\n    this._unLock()\r\n    this.requests.selectRequest();\r\n    this.productInfo = new Array();\r\n    this.sessionSelected = false;\r\n    this.typeSelected = false;\r\n    this.sandBoxClient = false;\r\n    this.courseSelected = false;\r\n    this.courseId = \"-1\";\r\n    this.sessionId = -1;\r\n    this.requestType = -1;\r\n    $(\"#existingRequestInfo\").hide();\r\n    $('.wizard').wizard('selectedItem', {\r\n      step: 1\r\n    })\r\n  }\r\n\r\n  //Courses\r\n  async openEditCourseForm() {\r\n    if (!this.showCourses) await this.refreshCourses();\r\n    this.showCourses = !this.showCourses;\r\n  }\r\n\r\n  async refreshCourses() {\r\n    await this.people.getCoursesArray(true, '?filter=personId|eq|' + this.userObj._id + '&order=number');\r\n  }\r\n\r\n  editACourse() {\r\n    if (this.courseId != -1) {\r\n      this.editCourse = true;\r\n      $(\"#number\").focus();\r\n    }\r\n  }\r\n\r\n  newCourse() {\r\n    this.editCourseIndex = -1;\r\n    this.people.selectCourse();\r\n    $(\"#number\").focus();\r\n    this.editCourse = true;\r\n  }\r\n\r\n  async saveCourse() {\r\n    if (this.validation.validate(5)) {\r\n      if (this.userObj._id) {\r\n        // if (this.people.selectedCourse._id) this.editCourseIndex = this.baseArray.length;\r\n        this.people.selectedCourse.personId = this.userObj._id;\r\n        let serverResponse = await this.people.saveCourse();\r\n        if (!serverResponse.status) {\r\n          this.utils.showNotification(\"The course was updated\");\r\n        }\r\n        this.editCourse = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  cancelEditCourse() {\r\n    this.editCourse = false;\r\n  }\r\n\r\n  async _lock() {\r\n    var response = await this.requests.getRequestLock(this.requests.selectedRequest._id);\r\n    if (!response.error) {\r\n      if (response.requestId === 0) {\r\n        //Lock help ticket\r\n        this.requests.lockRequest({\r\n          requestId: this.requests.selectedRequest._id,\r\n          personId: this.userObj._id\r\n        });\r\n        this.showLockMessage = false;\r\n        this.lockObject = {};\r\n      } else {\r\n        if (response[0].personId !== this.userObj._id) {\r\n          this.lockObject = response[0];\r\n          this.showLockMessage = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _unLock() {\r\n    if (this.ILockedIt) {\r\n      if (this.requests.selectedRequest._id) {\r\n        this.showLockMessage = false;\r\n        this.requests.removeRequestLock(this.requests.selectedRequest._id);\r\n      }\r\n    }\r\n  }\r\n\r\n  toolTips() {\r\n    $('[data-toggle=\"tooltip\"]').tooltip();\r\n  }\r\n\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport {DataTable} from '../../../resources/utils/dataTable';\r\nimport {Products} from '../../../resources/data/products';\r\nimport {AppConfig} from '../../../config/appConfig';\r\n\r\n@inject( AppConfig, DataTable, Products)\r\nexport class ViewProducts {\r\n\r\n\tconstructor( config, datatable, products) {\r\n    this.config = config;\r\n    this.dataTable = datatable;\r\n    this.dataTable.initialize(this);\r\n    this.products = products;\r\n\r\n    this.userObj = JSON.parse(sessionStorage.getItem('user'))\r\n  };\r\n\r\n  async activate() {\r\n    let responses =  await Promise.all([\r\n      this.products.getProductsArray('?filter=active|eq|true&order=name', true),\r\n      this.config.getConfig() \r\n    ]);\r\n\t//  this.dataTable.updateArray(this.products.productsArray);\r\n\tthis.filterList();\r\n  }\r\n\r\n  filterList(){\r\n      if(this.filter){\r\n        var thisFilter = this.filter\r\n        this.filteredProductsArray = this.products.productsArray.filter((item) => {\r\n          return item.name.toUpperCase().indexOf(thisFilter.toUpperCase()) != -1;\r\n        });\r\n      } else {\r\n          this.filteredProductsArray = this.products.productsArray;\r\n      }\r\n  }\r\n\r\n   showCurriculum(product, $event){\r\n    this.productInfoObject = this.products.getProductInfo(product._id);\r\n    if(this.productInfoObject)  $(\"#curriculumInfo\").css(\"display\", \"block\");\r\n  }\r\n\r\n  hideCurriculum() {\r\n    $(\"#curriculumInfo\").css(\"display\", \"none\");\r\n  }\r\n}","import {inject} from 'aurelia-framework';\r\nimport {Router} from \"aurelia-router\";\r\nimport {DataTable} from '../../../resources/utils/dataTable';\r\nimport {Sessions} from '../../../resources/data/sessions';\r\nimport {Systems} from '../../../resources/data/systems';\r\nimport {Products} from '../../../resources/data/products';\r\nimport {ClientRequests} from '../../../resources/data/clientRequests';\r\nimport {AppConfig} from '../../../config/appConfig';\r\nimport {Utils} from '../../../resources/utils/utils';\r\nimport {People} from '../../../resources/data/people';\r\nimport Validation from '../../../resources/utils/validation';\r\nimport {CommonDialogs} from '../../../resources/dialogs/common-dialogs';\r\n\r\nimport moment from 'moment';\r\n\r\n@inject(Router, AppConfig, Validation, People, DataTable, Utils, Sessions, Systems, Products, ClientRequests, CommonDialogs)\r\nexport class ViewRequests {\r\n  requestSelected = false;\r\n  showLockMessage = false;\r\n  showRequests = false;\r\n  noRequests = true;\r\n  statusClass = [\"\", \"unassigned\", \"assigned\",\"\",\"customer\"];\r\n\r\n  navControl = \"requestsNavButtons\";\r\n  spinnerHTML = \"\";\r\n  lockObject = new Object();\r\n\r\n  constructor(router, config, validation, people, datatable, utils, sessions, systems, products, requests, dialogs) {\r\n    this.router = router;\r\n    this.config = config;\r\n    this.validation = validation;\r\n    this.validation.initialize(this);\r\n    this.people = people;\r\n    this.dataTable = datatable;\r\n    this.dataTable.initialize(this);\r\n    this.utils = utils;\r\n    this.sessions = sessions;\r\n    this.products = products;\r\n    this.requests = requests;\r\n    this.systems = systems;\r\n    this.dialogs = dialogs;\r\n\r\n    this.userObj = JSON.parse(sessionStorage.getItem('user'))\r\n  };\r\n\r\n\tcanActivate(){\r\n\t\tif(!this.userObj) {\r\n\t\t\tthis.userObj = this.config.user;\r\n\t\t\tthis.isUCC = this.userObj.userRole >= this.config.UCC_ROLE;\r\n\t\t\tif(!this.userObj) {\r\n\t\t\t\tthis.utils.showNotification(\"Couldn't find your user information.  Try logging in again or call the UCC.\",'warning');\r\n\t\t\t\tthis.router.navigate(\"home\");\r\n\t\t\t}\r\n    }\r\n  } \r\n\r\n  async activate() {\r\n    $(\"#infoBox\").fadeOut();\r\n    $(\"#existingRequestInfo\").fadeOut(); \r\n    let responses =  await Promise.all([\r\n      this.sessions.getSessionsArray('?order=startDate:DSC',true ),\r\n      this.people.getCoursesArray(true, \"?filter=personId|eq|\" + this.userObj._id),\r\n      this.products.getProductsArray('?order=Category'),\r\n      this.systems.getSystemsArray(),\r\n      this.config.getConfig() \r\n    ]);\r\n    this.people.coursesArray.push({_id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME});\r\n    this.sessions.sessionsArray = this.sessions.sessionsArray.filter(item => {\r\n      return item.sessionStatus !== 'Next';\r\n    });\r\n    this.selectedSession = this.sessions.sessionsArray[0]._id;\r\n    this.getRequests();\r\n  }\r\n\r\n  deactivate(){\r\n    this._unLock();\r\n  }\r\n\r\n  async getRequests() {\r\n    if (this.selectedSession) {\r\n          this.sessions.selectSessionById(this.selectedSession);\r\n          await this.requests.getClientRequestsArray('?filter=[and]sessionId|eq|' + this.selectedSession + ':personId|eq|' + this.userObj._id, true);\r\n          if(this.requests.requestsArray && this.requests.requestsArray.length){\r\n            this.dataTable.updateArray(this.requests.requestsArray);\r\n            this.noRequests = false;\r\n          } else { \r\n            this.noRequests = true;\r\n          }\r\n      } \r\n  }\r\n\r\n  async refresh() {\r\n    await this._unLock();\r\n    this.spinnerHTML = \"<i class='fa fa-spinner fa-spin'></i>\";\r\n    await this.getRequests();\r\n    this.spinnerHTML = \"\";\r\n  }\r\n\r\n  async edit(product, el, index) { \r\n    this.requestSelected = true;\r\n    this.selectedDetailIndex = index;\r\n    this.showDetails = true;\r\n    this.requests.setTheSelectedRequestDetail(product); \r\n    this.customerActionRequired = this.requests.selectedRequestDetail.requestStatus == this.config.CUSTOMER_ACTION_REQUEST_CODE;\r\n    this.requests.selectRequstById(product.requestId);\r\n    this.customerMessage = this.requests.selectedRequest.customerMessage ? this.requests.selectedRequest.customerMessage : \"\"; \r\n    this.sessions.selectSessionById(this.requests.selectedRequest.sessionId);\r\n    this.products.selectedProductFromId(this.requests.selectedRequestDetail.productId);\r\n   \r\n    if(this.requests.selectedRequestDetail.assignments.length){\r\n      this.selectedAssignmentIndex = 0;\r\n      this.systems.selectedSystemFromId(this.requests.selectedRequestDetail.assignments[this.selectedAssignmentIndex].systemId);\r\n    }\r\n\r\n    this.selectedRowAss = $(\"#assignmentTable\").closest('tr');\r\n    \r\n    if (this.selectedRow) this.selectedRow.children().removeClass('info');\r\n    this.selectedRow = $(el.target).closest('tr');\r\n    this.selectedRow.children().addClass('info')\r\n  }\r\n\r\n  back(){\r\n     this.requestSelected = false;\r\n  }\r\n\r\n  customerActionResponse(request, el){\r\n    if(request.requestStatus == this.config.CUSTOMER_ACTION_REQUEST_CODE){\r\n      this.requests.setSelectedRequest(request);\r\n      this.showDetails = false;\r\n      this.requestSelected = true;\r\n      this.customerActionRequired = true;\r\n      this.selectedDetailIndex = -1;\r\n      this.customerMessage = request.customerMessage ? request.customerMessage : \"\";\r\n\r\n      if (this.selectedRow) this.selectedRow.children().removeClass('info');\r\n      this.selectedRow = $(el.target).closest('tr');\r\n      this.selectedRow.children().addClass('info')\r\n    }\r\n  }\r\n\r\n  async save() {\r\n    if(!this.showLockMessage){\r\n        if(this._buildRequest()){\r\n          let serverResponse = await this.requests.saveRequest(this.config.SEND_EMAILS);\r\n          if (!serverResponse.error) {\r\n            this.getRequests();\r\n            this.utils.showNotification(\"The request was updated\");\r\n          }\r\n      this._cleanUp();\r\n      }\r\n    } else {\r\n      this.utils.showNotification(\"The request is locked and can't be saved\",'warning');\r\n    }\r\n  }\r\n\r\n  _buildRequest(){\r\n    //Update the selected request to update\r\n    this.requests.selectedRequest.requestDetails.forEach(item => {\r\n      if(item.requestStatus != this.config.ASSIGNED_REQUEST_CODE) item.requestStatus = this.config.REPLIED_REQUEST_CODE;\r\n      item.modifiedDate = new Date();\r\n    });\r\n    this.requests.selectedRequest.requestStatus = this.config.REPLIED_REQUEST_CODE;\r\n    this.requests.selectedRequest.comments = '<div class=\"well\">' + this.customerResponse + '</div><p>' + this.requests.selectedRequest.comments\r\n    this.requests.selectedRequest.audit.push({\r\n      property: \"Replied to Message\",\r\n      newValue: this.customerResponse,\r\n      personId: this.userObj._id\r\n    })\r\n      \r\n    this.requests.selectedRequest.requestDetailsToSave = new Array();\r\n    this.requests.selectedRequest.requestDetailsToSave = this.requests.selectedRequest.requestDetails;\r\n    this.requests.selectedRequest.requestDetails = new Array();\r\n    this.requests.selectedRequest.requestDetailsToSave.forEach((item) => {\r\n        this.requests.selectedRequest.requestDetails.push(item._id)\r\n    });\r\n    return true;\r\n  }\r\n\r\n  delete(){\r\n     return this.dialogs.showMessage(\r\n        \"Are you sure you want to delete that request?\",\r\n        \"Delete Request\",\r\n        ['Yes','No']\r\n        ).whenClosed(response => {\r\n          if (!response.wasCancelled) {\r\n             this.deleteRequest();\r\n          }\r\n        });\r\n  }\r\n\r\n  async deleteRequest(){\r\n      this.requests.selectedRequest.requestDetails[this.selectedDetailIndex].delete = true;\r\n      this.requests.selectedRequest.audit.push({\r\n        property: \"Deleted Product\",\r\n        newValue: this.requests.selectedRequest.requestDetails[this.selectedDetailIndex].productId,\r\n        personId: this.userObj._id\r\n      })\r\n      \r\n    this.requests.selectedRequest.requestDetailsToSave = new Array();\r\n    this.requests.selectedRequest.requestDetailsToSave = this.requests.selectedRequest.requestDetails;\r\n    this.requests.selectedRequest.requestDetails = new Array();\r\n    this.requests.selectedRequest.requestDetailsToSave.forEach((item) => {\r\n        this.requests.selectedRequest.requestDetails.push(item._id)\r\n    });\r\n    var flushRequestArray = false;\r\n    if(this.requests.selectedRequest.requestDetails.length === 1) flushRequestArray = true;\r\n    let serverResponse = await this.requests.saveRequest(this.config.SEND_EMAILS);\r\n    if (!serverResponse.error) {\r\n      if(flushRequestArray){\r\n        this.requests.requestsArray = new Array();\r\n        this.dataTable.updateArray(this.requests.requestsArray);\r\n      } else {\r\n        this.getRequests();\r\n      }\r\n      this.utils.showNotification(\"The request was deleted\");\r\n    }\r\n    this._cleanUp();\r\n  }\r\n\r\n  _cleanUp(){\r\n    this.requestSelected = false;\r\n    this.customeResponse = \"\";\r\n  }\r\n\r\n  selectAssignment(assign, index, el){\r\n    this.selectedAssignmentIndex = index;\r\n    this.systems.selectedSystemFromId(assign.systemId);\r\n\r\n    if (this.selectedRowAss) this.selectedRowAss.children().removeClass('info');\r\n    this.selectedRowAss = $(el.target).closest('tr');\r\n    this.selectedRowAss.children().addClass('info')\r\n  }\r\n  \r\n  cancel(){\r\n    this.requests.selectRequest(0);\r\n  }\r\n\r\n  changeBeginDate(evt){\r\n    this.minEndDate = moment(evt.detail.event.date).format(\"MM/DD/YYYY\");\r\n    this.requests.selectedRequest.endDate = moment.max(moment(this.requests.selectedRequest.startDate).format(\"MM/DD/YYYY\"), moment(this.requests.selectedRequest.endDate).format(\"MM/DD/YYYY\")).format(\"MM/DD/YYYY\");\r\n  }\r\n\r\n  async _lock(){\r\n    var response = await this.requests.getRequestLock(this.requests.selectedRequest._id);\r\n    if(!response.error){\r\n      if(response.requestId === 0){\r\n            //Lock help ticket\r\n          this.requests.lockRequest({\r\n            requestId: this.requests.selectedRequest._id,\r\n            personId: this.userObj._id\r\n          });\r\n          this.showLockMessage = false;\r\n          this.lockObject = {}; \r\n      } else {\r\n          this.lockObject = response[0];\r\n          this.showLockMessage = true;  \r\n      }\r\n    }\r\n  }\r\n\r\n   _unLock(){\r\n    if(!this.showLockMessage){\r\n      if(this.requests.selectedRequest && this.requests.selectedRequest._id){\r\n         this.showLockMessage = false;\r\n        this.requests.removeRequestLock(this.requests.selectedRequest._id);\r\n      }    \r\n    }\r\n  }\r\n\r\n}\r\n","import { inject, TemplatingEngine } from 'aurelia-framework';\nimport { Utils } from '../../../resources/utils/utils';\nimport { Sessions } from '../../../resources/data/sessions';\nimport { Downloads } from '../../../resources/data/downloads';\nimport { Products } from '../../../resources/data/products';\nimport { Systems } from '../../../resources/data/systems';\nimport { HelpTickets } from '../../../resources/data/helpTickets';\nimport { ClientRequests } from '../../../resources/data/clientRequests';\nimport { People } from '../../../resources/data/people';\nimport Validation from '../../../resources/utils/validation';\nimport { DataTable } from '../../../resources/utils/dataTable';\nimport { AppConfig } from '../../../config/appConfig';\nimport { SiteInfo } from '../../../resources/data/siteInfo';\n\nimport fuelux from 'fuelux';\n\n@inject(Sessions, Downloads, HelpTickets, Validation, Utils, DataTable, AppConfig, People, ClientRequests, Products, Systems, SiteInfo, TemplatingEngine)\nexport class CreateHelpTickets {\n    showInfoBox = false;\n    courseSelected = false;\n    showHelpTicketDescription = false;\n    showInputForm = false;\n    showRequests = false;\n    inputForm = null;\n    showTypes = false;\n    inputHTML = \"\";\n    filesSelected;\n    selectedFiles;\n    removedFiles = new Array();\n    test = true;\n\n    showAdditionalInfo = false;\n\n    constructor(sessions, apps, helpTickets, validation, utils, datatable, config, people, clientRequests, products, systems, site, templatingEngine) {\n        this.sessions = sessions;\n        this.apps = apps;\n        this.helpTickets = helpTickets;\n        this.people = people;\n        this.utils = utils;\n        this.validation = validation;\n        this.validation.initialize(this);\n        this.dataTable = datatable;\n        this.dataTable.initialize(this);\n        this.config = config;\n        this.clientRequests = clientRequests;\n        this.products = products;\n        this.systems = systems;\n        this.site = site;\n        this.templatingEngine = templatingEngine;\n\n        this.userObj = JSON.parse(sessionStorage.getItem('user'));\n    };\n\n    canActivate() {\n        if (!this.userObj) {\n            this.userObj = this.config.user;\n            this.isUCC = this.userObj.userRole >= this.config.UCC_ROLE;\n            if (!this.userObj) {\n                this.utils.showNotification(\"Couldn't find your user information.  Try logging in again or call the UCC.\",'warning');\n                this.router.navigate(\"home\");\n            }\n        }\n    }\n\n    attached() {\n        // $('[data-toggle=\"tooltip\"]').tooltip();\n        var wizard = $('.wizard').wizard();\n        var that = this;\n\n        wizard.on('actionclicked.fu.wizard', (e, data) => {\n            that.step = data.step;\n            if (data.direction !== \"previous\") {\n                if (!that.validation.validate(data.step)) {\n                    e.preventDefault();\n                } else if (data.step === 2) {\n                    that.createInputForm(this.helpTickets.helpTicketTypesArray[this.catIndex].subtypes[this.selectedHelpTicketType].inputForm);\n                    this.setupValidation(this.helpTickets.helpTicketTypesArray[this.catIndex].subtypes[this.selectedHelpTicketType].validation);\n                    // $(\"#comments\").focus();\n                } else if (data.step === 3) {\n                    setTimeout(() => { \n                        $(\".note-editable:first\").focus().scroll(); \n                    }, 500);\n                } else if (data.step === 4) {\n                    this.outputForm = this.helpTickets.helpTicketTypesArray[this.catIndex].subtypes[this.selectedHelpTicketType].outputForm;\n                    this.createOutputForm(this.outputForm)\n                } else if (data.step === 5) {\n                    that.save();\n                }\n            } else {\n                that.validation.makeAllValid(data.step);\n            }\n        })\n    }\n\n    async activate() {\n        let responses = await Promise.all([\n            this.helpTickets.getHelpTicketTypes('?order=category'),\n            this.sessions.getSessionsArray('?filter=[or]sessionStatus|Active:Requests&order=startDate', true),\n            this.people.getCoursesArray(true, '?filter=personId|eq|' + this.userObj._id + '&order=number'),\n            this.apps.getDownloadsArray(true, '?filter=helpTicketRelevant[eq]true&order=name'),\n            this.systems.getSystemsArray(),\n            this.config.getConfig(),\n            this.site.getMessageArray('?filter=category|eq|HELP_TICKETS', true)\n        ]);\n        this._setUpValidation();\n        this.initialize();\n        this.sendEmail = this.config.SEND_EMAILS;\n        this.appsArray = this.apps.appDownloadsArray.filter(item => {\n            return item.helpTicketRelevant;\n        })\n        this.editorMessage = this.getMessage('EDITOR_DESCRIPTION_MESSAGE');\n        this.fileUploadMessage = this.getMessage('FILE_UPLOAD_DESCRIPTION');\n        this.stepsMessage = this.getMessage('RECREATE_STEPS');\n    }\n\n    initialize(){\n        this.helpTickets.selectHelpTicket();\n    }\n\n    async categoryChanged() {\n        this.catIndex = this.getCategoryIndex();\n        await this.getActiveRequests();\n        this.showTypes = true;\n    }\n\n    getCategoryIndex() {\n        var index = 0;\n        this.helpTickets.helpTicketTypesArray.forEach((item, categoryIndex) => {\n            if (this.helpTickets.selectedHelpTicket.helpTicketCategory == item.category) {\n                index = categoryIndex;\n            }\n        });\n        return index;\n    }\n\n    // /*****************************************************************************************\n    // * The user selected a request\n    // *****************************************************************************************/\n    async requestChosen(el, index) {\n        this.showAdditionalInfo = true;\n        if (this.SelectedClientRequest && this.SelectedClientRequest._id === this.clientRequestsArray[index]._id) {\n            this.SelectedClientRequest = undefined;\n            this.selectedSessionId = undefined;\n            if (this.selectedProductRow) this.selectedProductRow.children().removeClass('info');\n        } else {\n            this.SelectedClientRequest = this.clientRequestsArray[index];\n            this.selectedSessionId = this.clientRequestsArray[index].sessionId;\n\n            if (this.selectedProductRow) this.selectedProductRow.children().removeClass('info');\n            this.selectedProductRow = $(el.target).closest('tr');\n            this.selectedProductRow.children().addClass('info')\n        }\n    }\n\n    typeChanged() {\n        this.selectedHelpTicketType = this.getTypeIndex();\n        this.requestsRequired = this.helpTickets.helpTicketTypesArray[this.catIndex].requestsRequired;\n        this.descriptionRequired = this.helpTickets.helpTicketTypesArray[this.catIndex].subtypes[this.selectedHelpTicketType].descriptionRequired;\n        this.showForm = true;\n    }\n\n    getTypeIndex() {\n        var typeIndex = 0;\n        this.helpTickets.helpTicketTypesArray[this.catIndex].subtypes.forEach((item, typIndex) => {\n            if (this.helpTickets.selectedHelpTicket.helpTicketType == item.type) {\n                typeIndex = typIndex;\n            }\n        });\n        return typeIndex;\n    }\n\n    async getActiveRequests() {\n        var sessions = \"\";\n        this.sessions.sessionsArray.forEach(item => {\n            sessions += item._id + \":\";\n        });\n        sessions = sessions.substring(0, sessions.length - 1);\n        await this.clientRequests.getActiveClientRequestsArray(this.userObj._id, sessions);\n        this.originalClientRequestsArray = new Array();\n        this.clientRequestsArray = new Array();\n        //Cycle through request array\n        this.clientRequests.requestsArray.forEach(item => {\n            //Cycle through details of request\n            item.requestDetails.forEach(item2 => {\n                //If there are assignments\n                if (item2.assignments && item2.assignments.length > 0) {\n                    //Cycle through the assignments\n                    item2.assignments.forEach((assign) => {\n                        this.originalClientRequestsArray.push({\n                            productId: item2.productId,\n                            productName: item2.productId.name,\n                            sessionId: item.sessionId,\n                            requestStatus: item2.requestStatus,\n                            systemId: assign.systemId,\n                            courseName: item.courseId ? item.courseId.name : 'Trial Client',\n                            courseId: item.courseId ? item.courseId._id : null,\n                            client: assign.client,\n                            clientId: assign.clientId,\n                            _id: item2._id\n                        })\n                    })\n                } else {\n                    this.originalClientRequestsArray.push({\n                        productName: item2.productId.name,\n                        sessionId: item.sessionId,\n                        requestStatus: item2.requestStatus,\n                        courseName: item.courseId ? item.courseId.name : 'Trial Client',\n                        _id: item2._id\n                    })\n                }\n            })\n        });\n        this.originalClientRequestsArray.forEach(item => {\n            this.clientRequestsArray.push(item);\n        })\n    }\n\n    // /*****************************************************************************************\n    // * Save the help ticket\n    // *****************************************************************************************/\n    async save() {\n        await this.buldHelpTicket();\n        var email = new Object();\n        if (this.sendEmail) {\n            email.MESSAGE = this.config.HELP_TICKET_CREATED_MESSAGE;\n            email.INSTRUCTIONS = this.config.HELP_TICKET_INSTRUCTIONS;\n            email.subject = this.config.HELP_TICKET_CREATED_SUBJECT.replace('[[faculty name]]', this.userObj.fullName);\n            email.email = this.userObj.email;\n            email.helpTicketNo = 0;\n            email.cc = this.config.HELP_TICKET_EMAIL_LIST ? this.config.HELP_TICKET_EMAIL_LIST : \"\";\n        }\n\n        let serverResponse = await this.helpTickets.saveHelpTicket(email);\n        if (!serverResponse.status) {\n            this.utils.showNotification(\"Help ticket number \" + serverResponse.helpTicketNo + \" was created\");\n            if (this.filesToUpload && this.filesToUpload.length > 0) {\n                this.helpTickets.uploadFile(this.filesToUpload, serverResponse.content[0]._id, this.helpTickets.selectedHelpTicket);\n            }\n        }\n        this._cleanUp();\n    }\n\n    // /*****************************************************************************************\n    // * Prepare the help ticket to submit to the server\n    // *****************************************************************************************/\n    async buldHelpTicket() {\n        this.helpTickets.selectedHelpTicket.owner = [{ \"personId\": \"b1b1b1b1b1b1b1b1b1b1b1b1\", \"date\": new Date() }];\n        this.helpTickets.selectedHelpTicket.personId = this.userObj._id;\n        this.helpTickets.selectedHelpTicket.institutionId = this.userObj.institutionId._id;\n        this.helpTickets.selectedHelpTicket.sessionId = this.selectedSessionId;\n\n        if (!this.SelectedClientRequest || !this.SelectedClientRequest._id) {\n            //If the help ticket type doesn't require a course, insert a dummy courseId\n            this.helpTickets.selectedHelpTicket.courseId = 'b1b1b1b1b1b1b1b1b1b1b1b1';\n        } else {\n            this.helpTickets.selectedHelpTicket.requestId = this.SelectedClientRequest._id;\n            this.helpTickets.selectedHelpTicket.systemId = this.SelectedClientRequest.systemId;\n            this.helpTickets.selectedHelpTicket.client = this.SelectedClientRequest.client;\n            this.helpTickets.selectedHelpTicket.productId = this.SelectedClientRequest.productId;\n            this.helpTickets.selectedHelpTicket.courseId = this.SelectedClientRequest.courseId;\n        }\n\n        this.helpTickets.selectedHelpTicketContent.personId = this.userObj._id;\n        this.helpTickets.selectedHelpTicketContent.type = this.helpTickets.selectedHelpTicket.helpTicketType;\n        // this.helpTickets.selectedHelpTicketContent.displayForm = this.inputForm;\n        this.helpTickets.selectedHelpTicket.content.push(this.helpTickets.selectedHelpTicketContent);\n    }\n\n    _cleanUp() {\n        this.showTypes = false;\n        // this.helpTicketTypeMessage = undefined;\n        // this.showAdditionalInfo = false;\n        // this.helpTickets.selectHelpTicket();\n        this.helpTickets.selectHelpTicketContent();\n        this.clearTables();\n        this.filesToUpload = new Array();\n        this.showDetails = false;\n        this.initialize();\n        $('.wizard').wizard('selectedItem', {\n            step: 1\n          })\n    }\n\n    // /*****************************************************************************************\n    // * Remove styling from selected rows on tables\n    // *****************************************************************************************/\n    clearTables() {\n        if (this.selectedCourseRow) this.selectedCourseRow.children().removeClass('rowSelected');\n        if (this.selectedProductRow) this.selectedProductRow.children().removeClass('rowSelected');\n    }\n\n    _setUpValidation() {\n        this.validation.addRule(1, \"helpTicketCategory\", [{\n            \"rule\": \"custom\", \"message\": \"Select a category\",\n            \"valFunction\": function (context) {\n                return !(context.helpTickets.selectedHelpTicket.helpTicketCategory == -1);\n            }\n        }]);\n        this.validation.addRule(1, \"helpTicketType\", [{\n            \"rule\": \"custom\", \"message\": \"Select a type\",\n            \"valFunction\": function (context) {\n                return !(context.helpTickets.selectedHelpTicket.helpTicketType == -1);\n            }\n        }]);\n        this.validation.addRule(2, \"selectProductRequestError\", [{\n            \"rule\": \"custom\", \"message\": \"Select a product request\",\n            \"valFunction\": function (context) {\n                if (context.requestsRequired) {\n                    return context.SelectedClientRequest;\n                } else {\n                    return true;\n                }\n            }\n        }]);\n        this.validation.addRule(4, \"descriptionErrorMessage\", [{\n            \"rule\": \"custom\", \"message\": \"Enter a description of the problem\",\n            \"valFunction\": function (context) {\n                return !context.descriptionRequired || context.helpTickets.selectedHelpTicketContent.content.comments;\n            }\n        }]);\n    }\n\n    setupValidation(rules) {\n        this.validation.clearRuleGroup(3);\n        rules.forEach(item => {\n            this.validation.addRule(3, item.control, [{ \"rule\": item.rule, \"message\": item.message, \"value\": item.value }]);\n        });\n    }\n\n    getMessage(messageKey) {\n        for (var i = 0; i < this.site.messageArray.length; i++) {\n            if (this.site.messageArray[i].key === messageKey) return this.site.messageArray[i].content\n        }\n        return \"\";\n    }\n\n    createInputForm(html) {\n        $('#container').html(html);\n        let extendedInput = $('.extend');\n        for (let i = 0; i < extendedInput.length; i++) {\n            this.helpTickets.selectedHelpTicketContent.content[$(extendedInput[i]).attr('id')] = \"\";\n        }\n\n        let el = document.getElementById('container');\n\n        if (el) {\n            if (!el.querySelectorAll('.au-target').length) {\n                this.templatingEngine.enhance({ element: el, bindingContext: this });\n            }\n        }\n    }\n\n    createOutputForm(html) {\n        html = html.split('selectedHelpTicket.content[0]').join('selectedHelpTicketContent');\n        // html = html.replace('selectedHelpTicket.content[0]','selectedHelpTicketContent');\n        let el = document.getElementById('outputContainer');\n        el.innerHTML = html;\n\n        if (el) {\n            if (!el.querySelectorAll('.au-target').length) {\n                this.templatingEngine.enhance({ element: el, bindingContext: this });\n            }\n        }\n    }\n\n    toggleField(el) {\n        this.helpTickets.selectedHelpTicketContent.content[$(el.target).parent().attr('id')] = !this.helpTickets.selectedHelpTicketContent.content[$(el.target).parent().attr('id')];\n    }\n\n\n    // /*****************************************************************************************\n    // * THe user selected files to upload to update the ineterface with the file names\n    // *****************************************************************************************/\n    changeFiles() {\n        this.filesToUpload = this.filesToUpload ? this.filesToUpload : new Array();\n        for (var i = 0; i < this.files.length; i++) {\n            let addFile = true;\n            this.filesToUpload.forEach(item => {\n                if (item.name === this.files[i].name) addFile = false;\n            })\n            if (addFile) this.filesToUpload.push(this.files[i]);\n        }\n    }\n\n    removeFile(index) {\n        this.filesToUpload.splice(index, 1);\n    }\n}\n"," import {inject} from 'aurelia-framework';\r\nimport {DataTable} from '../../../resources/utils/dataTable';\r\nimport {AppConfig} from '../../../config/appConfig';\r\nimport {Utils} from '../../../resources/utils/utils';\r\nimport {Curriculum} from '../../../resources/data/curriculum';\r\nimport {Products} from '../../../resources/data/products';\r\n\r\n@inject(DataTable, Curriculum, Products, AppConfig, Utils)\r\nexport class CurrInfo{\r\n    curriculumItemSelected = false;\r\n    spinnerHTML = \"\";\r\n    curriculumContent = \" \";\r\n\tnewItem = false;\r\n\tcurriculumSelected = false;\r\n\taddComment = false;\r\n\tdescription = \"\";\r\n\tcomment = \"\";\r\n\r\n    constructor(datatable, curriculum, products, config, utils) {\r\n        this.dataTable = datatable;\r\n        this.dataTable.initialize(this);\r\n        this.utils = utils;\r\n        this.curriculum = curriculum;\r\n\t\tthis.products = products;\r\n        this.config = config;\r\n\r\n\t\tthis.userObj = JSON.parse(sessionStorage.getItem('user'));\r\n\t}\r\n\t\r\n\tcanActivate(){\r\n\t\tif(!this.userObj) {\r\n\t\t\tthis.userObj = this.config.user;\r\n\t\t\tthis.isUCC = this.userObj.userRole >= this.config.UCC_ROLE;\r\n\t\t\tif(!this.userObj) {\r\n\t\t\t\tthis.utils.showNotification(\"Couldn't find your user information.  Try logging in again or call the UCC.\",'warning');\r\n\t\t\t\tthis.router.navigate(\"home\");\r\n\t\t\t}\r\n\t\t}\r\n\t}  \r\n\r\n\tattached() {\r\n\t\t$('[data-toggle=\"tooltip\"]').tooltip();\r\n\t}\r\n\r\n    async activate() {\r\n\t\t let responses =  await Promise.all([\r\n\t\t \tthis.curriculum.getCurriculumCategoryArray(true, '?order=name'),\r\n         \tthis.curriculum.getCurriculumArray(true, '?order=sortOrder'),\r\n\t\t\tthis.products.getProductsArray('?order=name', true),\r\n\t\t\tthis.config.getConfig()\r\n\t\t ]);\r\n\t\t this.curriculum.selectCurriculumCategory(0);\r\n\t\t  this.curriculum.selectCurriculum();\r\n\t\t this.filterList();\r\n    }\r\n\r\n\tfilterList(){\r\n\t\tthis.curriculumArray = this.curriculum.curriculumArray.filter(item => {\r\n\t\t\treturn item.category === this.curriculum.selectedCurriculumCategory.name;\r\n\t\t});\r\n\t}\r\n\r\n\ttypeChanged(index, el){\r\n\t\t this.curriculum.selectCurriculumCategory(index);\r\n\t\t$(\"#buttonGroup\").children().removeClass('menuButtons');\r\n\t\t$(\"#buttonGroup\").children().css(\"background-color\",\"\");\r\n\t\t$(\"#buttonGroup\").children().css(\"color\",\"\");\r\n\t\t$(el.target).css(\"background-color\",this.config.BUTTONS_BACKGROUND);\r\n\t\t$(el.target).css(\"color\",this.config.ACTIVE_SUBMENU_COLOR);\r\n\t\t this.filterList();\r\n\t\t this.curriculumSelected = false;\r\n\t}\r\n\r\n\ttogglePanel(el){\r\n\t\tlet panel = $(el.target);\r\n\t\tif(!panel.hasClass('panel-collapsed')){\r\n\t\t\tpanel.parents('.panel').find('.panel-body').slideUp();\r\n\t\t\tpanel.addClass('panel-collapsed');\r\n\t\t\tpanel.find('i').removeClass('fa-chevron-up').addClass('fa-chevron-down');\r\n\t\t} else {\r\n\t\t\tpanel.parents('.panel').find('.panel-body').slideDown();\r\n\t\t\tpanel.removeClass('panel-collapsed');\r\n\t\t\tpanel.find('i').removeClass('fa-chevron-down').addClass('fa-chevron-up');\r\n\t\t}\r\n\t}\r\n\r\n\tselectCurriculum(curriculum){\r\n\t\tthis.curriculum.selectCurriculumById(curriculum._id);\r\n\t\tthis.curriculumSelected = true;\r\n\t}\r\n\r\n\tadd(){\r\n\t\tthis.addComment = true;\r\n\t}\r\n\r\n\tcancel(){\r\n\t\tthis.addComment = false;\r\n\t\tthis.comment = \"\";\r\n\t}\r\n\r\n\tasync save(){\r\n\t\tif(this.comment){\r\n\t\t\tif(!this.curriculum.selectedCurriculum.customerComments){\r\n\t\t\tthis.curriculum.selectedCurriculum.customerComments = new Array();\r\n\t\t}\r\n\t\tthis.curriculum.selectedCurriculum.customerComments.unshift({\r\n\t\t\tauthorEmail: this.userObj.email,\r\n\t\t\tcomment: this.comment,\r\n\t\t\tdateCreated: new Date()\r\n\t\t});\r\n\t\tlet serverResponse = await this.curriculum.save();\r\n\t\tthis.addComment = false;\r\n\t\t}\r\n\t}\r\n\r\n\tback(){\r\n\t\tthis.curriculumSelected = false;\r\n\t}\r\n\r\n\trateCurriculum(el){\r\n\t\tthis.curriculum.selectCurriculumById(el.detail.id);\r\n\t\tthis.curriculum.selectedCurriculum.rating = el.detail.rating;\r\n\t\tthis.curriculum.selectedCurriculum.raters = this.curriculum.selectedCurriculum.raters ? this.curriculum.selectedCurriculum.raters + 1 : 0;\r\n\t\tlet serverResponse = this.curriculum.save();\r\n\t}\r\n}","import { inject } from 'aurelia-framework';\r\nimport { DataTable } from '../../../resources/utils/dataTable';\r\nimport { AppConfig } from '../../../config/appConfig';\r\nimport { Utils } from '../../../resources/utils/utils';\r\nimport { Downloads } from '../../../resources/data/downloads';\r\n\r\n@inject(DataTable, Downloads, Utils, AppConfig)\r\nexport class Download {\r\n    navControl = \"downloadsNavButtons\";\r\n    spinnerHTML = \"\";\r\n    filterValues = new Array();\r\n\r\n    constructor(datatable, downloads, utils, config) {\r\n        this.dataTable = datatable;\r\n        this.dataTable.initialize(this);\r\n        this.utils = utils;\r\n        this.downloads = downloads;\r\n        this.config = config;\r\n    }\r\n\r\n    async activate() {\r\n        await this.downloads.getDownloadsArray(true, \"?filter=active|eq|true&order=name\"); \r\n        await this.downloads.getDownloadCategoriesArray();\r\n\r\n        this.updateArray();\r\n\r\n        this.typeSelected = this.downloads.appCatsArray[0].downCatcode;\r\n        this.filterList();\r\n    }\r\n\r\n    async refresh() {\r\n        this.spinnerHTML = \"<i class='fa fa-spinner fa-spin'></i>\";\r\n        await this.downloads.getDownloadsArray(true);\r\n        this.updateArray();\r\n        this.spinnerHTML = \"\";\r\n    }\r\n\r\n    updateArray() {\r\n        this.dataTable.updateArray(this.downloads.appDownloadsArray);\r\n    }\r\n\r\n    typeChanged(el) {\r\n        if (el.target.id != \"\") {\r\n            $(\"#buttonGroup\").children().removeClass('menuButtons');\r\n            $(\"#buttonGroup\").children().css(\"background-color\",\"\");\r\n            $(\"#buttonGroup\").children().css(\"color\",\"\");\r\n            $(el.target).css(\"background-color\",this.config.BUTTONS_BACKGROUND);\r\n            $(el.target).css(\"color\",this.config.ACTIVE_SUBMENU_COLOR);\r\n            this.typeSelected = el.target.id;\r\n            this.filterList();\r\n        }\r\n    }\r\n\r\n    filterList(){ \r\n        this.dataTable.filterList(this.typeSelected, {type: 'value', filter: \"downCatcodeFilter\",  collectionProperty: 'downCatcode', compare: 'match'});\r\n    }\r\n}","import {inject} from 'aurelia-framework';\r\nimport {Router} from 'aurelia-router';\r\nimport {AppConfig} from '../../../config/appConfig';\r\nimport {SiteInfo} from '../../../resources/data/siteInfo';\r\nimport {Utils} from '../../../resources/utils/utils';\r\nimport moment from 'moment';\r\n\r\n@inject(Router, AppConfig, SiteInfo, Utils)\r\nexport class UsefulInfo {\r\n    email = '';\r\n    password = '';\r\n    loginError = '';\r\n\r\n    constructor(router, config, siteinfo, utils) {\r\n        this.router = router;\r\n        this.config = config;\r\n        this.siteinfo = siteinfo;\r\n        this.utils = utils;\r\n    }\r\n\r\n    async activate() {\r\n        var currentDate = moment(new Date()).format(\"MM-DD-YYYY\");\r\n        var options = '?filter=[and]itemType|eq|ILNK:expiredDate|gt|' + currentDate + '&order=Category';\r\n        await this.siteinfo.getInfoArray(true, options);\r\n\r\n        this.linkArray = new Array();\r\n        var category = \"\";\r\n        for(var i = 0; i<this.siteinfo.siteArray.length; i++){\r\n          if(this.siteinfo.siteArray[i].category != category){\r\n            var obj = new Object();\r\n            var j = i;\r\n            obj.category = this.siteinfo.siteArray[i].category;\r\n            category = this.siteinfo.siteArray[i].category;\r\n            var objLinks = new Array();\r\n            while (i<this.siteinfo.siteArray.length && this.siteinfo.siteArray[i].category == category){\r\n              objLinks.push(this.siteinfo.siteArray[i]);\r\n              i++;\r\n            }\r\n            i--;\r\n            obj.links = objLinks;\r\n            this.linkArray.push(obj);\r\n          }\r\n        };\r\n    }\r\n\r\n}","import { inject } from 'aurelia-framework';\nimport { Router } from \"aurelia-router\";\nimport {AppConfig} from '../../../config/appConfig'; \n\n@inject(Router, AppConfig)\nexport class Support {\n    title=\"Support\";\n\n    constructor(router, config) {\n        this.router = router;\n        this.config = config;\n        \n        this.userObj = JSON.parse(sessionStorage.getItem('user'));\n    }\n\n    attached(){\n        $(\".nav a\").on(\"click\", function(){\n            $(\".nav\").find(\".active\").removeClass(\"active\");\n            $(this).parent().addClass(\"active\");\n        });\n    }    \n\n\n    activate(){\n         this.config.getConfig(true);\n    }\n\n    configureRouter(config, router) {\n        config.map([\n            {\n                route: ['', 'viewHelpTickets'],\n                moduleId: PLATFORM.moduleName('./viewHelpTickets'),\n                settings: { auth: true, roles: [] },\n                nav: true,\n                name: 'viewHelpTickets',\n                title: 'View Help Tickets'\n            },\n            {\n                route: 'createHelpTickets',\n                moduleId: PLATFORM.moduleName('./createHelpTicketsWiz'),\n               settings: { auth: true, roles: [] }, \n                nav: true,\n                name: 'createHelpTickets',\n                title: 'Create Help Tickets'\n            },         \n            {\n                route: 'downloads',\n                moduleId: PLATFORM.moduleName('./downloads'),\n                settings: { auth: true, roles: [] },\n                nav: true,\n                name: 'downloads',\n                title: 'Downloads'\n            },\n            {\n                route: 'curriculum',\n                moduleId: PLATFORM.moduleName('./curriculum'),\n               settings: { auth: true, roles: [] },\n                nav: true,\n                name: 'curriculum',\n                title: 'Curriculum'\n            },\n             {\n                route: 'links',\n                moduleId: PLATFORM.moduleName('./links'),\n                settings: { auth: true, roles: [] },\n                nav: true,\n                name: 'links',\n                title: 'Useful Information'\n            }\n        ]);\n\n        this.router = router;\n    }\n}\n","import { inject, TemplatingEngine } from 'aurelia-framework';\nimport { DataTable } from '../../../resources/utils/dataTable';\nimport { HelpTickets } from '../../../resources/data/helpTickets';\nimport { Sessions } from '../../../resources/data/sessions';\nimport { Systems } from '../../../resources/data/systems';\nimport { Products } from '../../../resources/data/products';\nimport { ClientRequests } from '../../../resources/data/clientRequests';\nimport { Downloads } from '../../../resources/data/downloads';\nimport { AppConfig } from '../../../config/appConfig';\nimport { Utils } from '../../../resources/utils/utils';\nimport { CommonDialogs } from '../../../resources/dialogs/common-dialogs';\nimport { People } from '../../../resources/data/people';\n\nimport Validation from '../../../resources/utils/validation';\n\n@inject(AppConfig, Validation, People, DataTable, Utils, HelpTickets, Sessions, Systems, Downloads, Products, ClientRequests, CommonDialogs, TemplatingEngine)\nexport class ViewHelpTickets {\n  helpTicketSelected = false;\n  enterResponse = false;\n  responseMessage = \"\";\n  isChecked = false;\n  nohelpTickets = true;\n  toolbar;\n\n  spinnerHTML = \"\";\n  filterValues = new Array();\n\n  constructor(config, validation, people, datatable, utils, helpTickets, sessions, systems, apps, products, requests, dialog, templatingEngine) {\n    this.config = config;\n    this.validation = validation;\n    this.validation.initialize(this);\n    this.people = people;\n    this.dataTable = datatable;\n    this.dataTable.initialize(this);\n    this.utils = utils;\n    this.helpTickets = helpTickets;\n    this.sessions = sessions;\n    this.systems = systems;\n    this.apps = apps;\n    this.products = products;\n    this.requests = requests;\n    this.dialog = dialog;\n    this.templatingEngine = templatingEngine;\n\n    this.userObj = JSON.parse(sessionStorage.getItem('user'));\n    this.isUCC = this.userObj.userRole >= this.config.UCC_ROLE;\n  };\n\n  canActivate() {\n    if (!this.userObj) {\n      this.userObj = this.config.user;\n      this.isUCC = this.userObj.userRole >= this.config.UCC_ROLE;\n      if (!this.userObj) {\n        this.utils.showNotification(\"Couldn't find your user information.  Try logging in again or call the UCC.\", 'warning');\n        this.router.navigate(\"home\");\n      }\n    }\n  }\n\n  attached() {\n    if (!this.mobile) this.toolTips();\n  }\n\n  deactivate() {\n    // this._unLock();\n  }\n\n  async activate() {\n    let uccRoles = \"\";\n    this.config.ROLES.forEach(item => {\n      if (item.UCConly) uccRoles += item.role + \":\";\n    });\n\n    let responses = await Promise.all([\n      this.helpTickets.getUserHelpTicketArray(\"?filter=personId|eq|\" + this.userObj._id + \"&order=modifiedDate:DSC\", true),\n      this.people.getUCCStaff(uccRoles),\n      this.helpTickets.getHelpTicketTypes('?order=category'),\n      this.products.getProductsArray('', true),\n      this.sessions.getSessionsArray('?order=startDate', true),\n      this.apps.getDownloadsArray(true, '?filter=helpTicketRelevant|eq|true&order=name'),\n      this.systems.getSystemsArray(),\n      this.config.getConfig()\n    ]);\n\n    if (this.helpTickets.helpTicketsArray && this.helpTickets.helpTicketsArray.length > 0) {\n      this.nohelpTickets = false;\n    }\n\n    this.people = this.people.uccPeople;\n\n    this.updateArray();\n\n    this.filterOutClosed();\n\n    this.sendEmail = this.config.SEND_EMAILS;;\n\n    this.helpTicketTypeLookupArray = new Array();\n    this.helpTickets.helpTicketTypesArray.forEach(item => {\n      item.subtypes.forEach(item2 => {\n        this.helpTicketTypeLookupArray.push({ helpTicketType: item2.type, description: item2.description });\n      })\n    })\n\n    this._setUpValidation();\n\n    if (this.utils.isMobile()) {\n      this.mobile = true;\n      this.toolbar = [['style', ['style', 'bold', 'clear']]];\n    }\n  }\n\n  async retrieveClosedHelpTickets() {\n    await this.helpTickets.getArchivedHelpTicketArray(\"?filter=personId|eq|\" + this.userObj._id + \"&order=modifiedDate:DSC\", true)\n  }\n\n  async refresh() {\n    this.spinnerHTML = \"<i class='fa fa-spinner fa-spin'></i>\";\n    await this.helpTickets.getUserHelpTicketArray(\"?filter=personId|eq|\" + this.userObj._id + \"&order=modifiedDate:DSC\", true);\n    this.updateArray();\n    this.spinnerHTML = \"\";\n  }\n\n  updateArray() {\n    this.dataTable.updateArray(this.helpTickets.helpTicketsArray);\n    this._cleanUpFilters();\n  }\n\n  async selectHelpTicket(el, index) {\n    this.editIndex = this.dataTable.displayArray[index + parseInt(this.dataTable.startRecord)].baseIndex;\n    this.helpTickets.selectHelpTicket(this.editIndex);\n\n    await this.getDetails();\n    this.categoryIndex = this.getCatIndex();\n    this.createOutputForm(this.helpTickets.helpTicketTypesArray[this.categoryIndex.categoryIndex].subtypes[this.categoryIndex.subTypeIndex].outputForm)\n\n    if (this.selectedRow) this.selectedRow.children().removeClass('info');\n    this.selectedRow = $(el.target).closest('tr');\n    this.selectedRow.children().addClass('info')\n    this.helpTicketSelected = true;\n\n    this.viewHelpTicketsHeading = \"Help Ticket \" + this.helpTickets.selectedHelpTicket.helpTicketNo;\n  }\n\n  getIndex(subtypes, type) {\n    for (let i = 0; i < subtypes.length; i++) {\n      if (subtypes[i].type === type) {\n        return i;\n      }\n    }\n    return null;\n  }\n\n  getCatIndex() {\n    for (var j = 0; j < this.helpTickets.helpTicketTypesArray.length; j++) {\n      for (var i = 0; i < this.helpTickets.helpTicketTypesArray[j].subtypes.length; i++) {\n        if (this.helpTickets.helpTicketTypesArray[j].subtypes[i].type === this.helpTickets.selectedHelpTicket.content[0].type ||\n          (this.helpTickets.helpTicketTypesArray[j].subtypes[i].type === 'OTHER_OTHER' && this.helpTickets.selectedHelpTicket.content[0].type === 'OTHER')) {\n          return { subTypeIndex: i, categoryIndex: j };\n        }\n      }\n    }\n  }\n\n  getCategoryIndex() {\n    for (var i = 0; i < this.helpTickets.helpTicketTypesArray.length; i++) {\n      if (this.helpTickets.helpTicketTypesArray[i] == this.helpTickets.selectedHelpTicket.helpTicketCategory) {\n\n        return i;\n      }\n    }\n  }\n\n  createOutputForm(html) {\n    let el = document.getElementById('container');\n    el.innerHTML = html;\n\n    if (el) {\n      if (!el.querySelectorAll('.au-target').length) {\n        this.templatingEngine.enhance({ element: el, bindingContext: this });\n      }\n    }\n  }\n\n  async getDetails() {\n    this.showRequestDetails = false;\n    if (this.helpTickets.selectedHelpTicket.requestId) {\n      if (this.helpTickets.selectedHelpTicket.requestId.assignments && this.helpTickets.selectedHelpTicket.requestId.assignments.length > 0) this.showRequestDetails = true;\n      this.showCourse = false;\n      this.course = \"\";\n      this.showCourse = true;\n      if (this.helpTickets.selectedHelpTicket.courseId) {\n        this.course = this.helpTickets.selectedHelpTicket.courseId.number + \" - \" + this.helpTickets.selectedHelpTicket.courseId.name;\n      } else {\n        this.course = this.config.SANDBOX_NAME\n      }\n    }\n  }\n\n  getName() {\n    for (var i = 0; i < this.people.uccPeople.length; i++) {\n      return this.people.uccPeople[i].fullName;\n    }\n    return \"someone\";\n  }\n\n  respond() {\n    if (!this.enterResponse) {\n      this.helpTickets.selectHelpTicketContent();\n      this.enterResponse = true;\n      this.enableButton = true;\n    }\n  }\n\n  cancelResponse() {\n    this.response = new Object();\n    this.isUnchanged = true;\n    this.enterResponse = false;\n  }\n\n  _createResponse() {\n    this.helpTickets.selectedHelpTicket.helpTicketStatus = this.config.REPLIED_HELPTICKET_STATUS;\n    this.helpTickets.selectedHelpTicketContent.personId = this.userObj._id;\n    this.helpTickets.selectedHelpTicketContent.type = this.config.HELP_TICKET_OTHER_TYPE;\n    this.helpTickets.selectedHelpTicketContent.emailSent = this.sendEmail;\n    // this.helpTickets.selectedHelpTicketContent.content.comments = this.responseMessage;\n    this.helpTickets.selectedHelpTicketContent.displayForm = this.config.HELP_TICKET_OTHER_TYPE;\n  }\n\n  async saveResponse() {\n    this._createResponse();\n    var email = new Object();\n    if (this.sendEmail) {\n      email.MESSAGE = this.config.HELP_TICKET_USER_UPDATE_MESSAGE.replace('[[No]]', this.helpTickets.selectedHelpTicket.helpTicketNo);\n      email.subject = this.config.HELP_TICKET_USER_UPDATE_SUBJECT.replace('[[No]]', this.helpTickets.selectedHelpTicket.helpTicketNo);\n      email.email = this.userObj.email;\n      email.cc = this.config.HELP_TICKET_EMAIL_LIST ? this.config.HELP_TICKET_EMAIL_LIST : \"\";\n    }\n    let serverResponse = await this.helpTickets.saveHelpTicketResponse(email);\n    if (!serverResponse.error) {\n      this.updateArray();\n      this.filterOutClosed();\n      this.utils.showNotification(\"The help ticket was updated\");\n      if (this.filesToUpload && this.filesToUpload.length > 0) this.helpTickets.uploadFile(this.filesToUpload, serverResponse.content[serverResponse.content.length - 1]._id);\n      if (this.helpTickets.selectedHelpTicket.owner[0].personId != null) {\n        let notice = {\n          personId: this.userObj._id,\n          uccStaffId: this.helpTickets.selectedHelpTicket.owner[0].personId._id,\n          notice: \"Help Ticket \" + this.helpTickets.selectedHelpTicket.helpTicketNo + \" was updated\"\n        }\n        this.helpTickets.saveNotification(notice);\n      }\n    }\n    this._cleanUp();\n  }\n\n  closeHelpTicket(helpTicket) {\n    return this.dialog.showCloseHelpTicket(\n      \"You have chosen to close this help ticket.\",\n      \"Close Help Ticket\",\n      ['Submit', 'Cancel']\n    ).whenClosed(response => {\n      if (!response.wasCancelled) {\n        this.helpTickets.selectHelpTicketByID(helpTicket._id);\n        this.helpTickets.selectHelpTicketContent();\n        this.responseMessage = \"Help Ticket closed by \" + this.userObj.fullName + \"<p>Reason: \" + this.config.HELP_TICKET_CLOSE_REASONS[response.output.selectedReason].reason + \"</p>\";\n        if (response.output.selectedReason == this.config.HELP_TICKET_CLOSE_REASON_OTHER) {\n          if (response.output.otherReason) {\n            this.responseMessage += \"<p>Other reason:  \" + response.output.otherReason + \"</p>\";\n          } else {\n            this.responseMessage += \"<p>No elboration provide for other reason for closing ticket.</p>\";\n          }\n        }\n        if (response.output.method) {\n          this.responseMessage += this.responseMessage = \"<p>Method for resolving: \" + response.output.method + \"</p>\";\n        } else {\n          this.responseMessage += \"<p>No method was provided for resolving the issue.</p>\"\n        }\n        this.helpTickets.selectedHelpTicketContent.content.comments = this.responseMessage\n        this._createResponse();\n        this.closeTicket(helpTicket);\n      } else {\n        this._cleanUp();\n      }\n    });\n  }\n\n  async closeTicket(helpTicket) {\n\n    var email = new Object();\n    if (this.sendEmail) {\n      email.reason = this.config.CLOSED_HELPTICKET_STATUS;\n      email.fullName = this.userObj.fullName;\n      email.email = this.userObj.email;\n      email.helpTicketNo = this.helpTickets.selectedHelpTicket.helpTicketNo;\n      email.cc = this.config.HELP_TICKET_EMAIL_LIST ? this.config.HELP_TICKET_EMAIL_LIST : \"\";\n      email.message = \"The help ticket was closed by \" + this.userObj.fullName\n    }\n    this.helpTickets.selectedHelpTicket.helpTicketStatus = this.config.CLOSED_HELPTICKET_STATUS;\n\n    let serverResponse = await this.helpTickets.closeHelpTicket();\n    if (!serverResponse.error) {\n      this.refresh()\n      this.utils.showNotification(\"The help ticket was updated\");\n    }\n    if (this.helpTickets.selectedHelpTicket.owner[0].personId != null) {\n      let notice = {\n        personId: this.userObj._id,\n        uccStaffId: this.helpTickets.selectedHelpTicket.owner[0].personId._id,\n        notice: \"Help Ticket \" + this.helpTickets.selectedHelpTicket.helpTicketNo + \" was closed\"\n      }\n      this.helpTickets.saveNotification(notice);\n    }\n    if (this.isChecked) this.filterOutClosed();\n    this._cleanUp();\n  }\n\n  async openHelpTicket(helpTicket) {\n    this.helpTickets.selectHelpTicketByID(helpTicket._id);\n    var email = new Object();\n    if (this.sendEmail) {\n      email.reason = 2;\n      email.fullName = this.userObj.fullName;\n      email.email = this.userObj.email;\n      email.helpTicketNo = this.helpTickets.selectedHelpTicket.helpTicketNo;\n      email.cc = this.config.HELP_TICKET_EMAIL_LIST ? this.config.HELP_TICKET_EMAIL_LIST : \"\";\n      email.message = \"The help ticket was reopened by \" + this.userObj.fullName;\n    }\n    this.helpTickets.selectedHelpTicket.helpTicketStatus = this.config.REVIEW_HELPTICKET_STATUS;\n    let serverResponse = await this.helpTickets.updateStatus(email);\n    if (!serverResponse.error) {\n      this.updateArray();\n      this.filterOutClosed();\n      this.utils.showNotification(\"The help ticket was updated\");\n    }\n    this._cleanUp();\n  }\n\n  /*****************************************************************************************\n * THe user selected files to upload to update the ineterface with the file names\n *****************************************************************************************/\n  changeFiles() {\n    this.filesSelected = \"\";\n    this.selectedFiles = new Array();\n    for (var i = 0; i < this.files.length; i++) {\n      this.selectedFiles.push(this.files[i].name);\n      this.filesSelected += this.files[i].name + \" \";\n    }\n\n  }\n\n  _cleanUp() {\n    this.enterResponse = false;\n    this.files = new Array();\n    this.filesSelected = \"\";\n    this.filesToUpload = new Array();\n  }\n\n  // _unLock(){\n  //    if(!this.showLockMessage){\n  //     if(this.helpTickets.selectedHelpTicket && this.helpTickets.selectedHelpTicket._id){\n  //       this.helpTickets.removeHelpTicketLock(this.helpTickets.selectedHelpTicket._id);\n  //     }    \n  //   }\n  // }\n\n  back() {\n    this.helpTicketSelected = false;\n    this._cleanUp();\n    // this._unLock();\n  }\n\n  filterOutClosed() {\n    if (this.isChecked) {\n      this.dataTable.filterList(this.config.CLOSED_HELPTICKET_STATUS, { type: 'value', filter: \"expiredFilter\", collectionProperty: 'helpTicketStatus', compare: 'not-match' });\n    } else {\n      this.updateArray();\n    }\n    this.toolTips();\n  }\n\n  async _cleanUpResponse() {\n    this.enterResponse = false;\n  }\n\n  _cleanUpFilters() {\n    $(\"#type\").val(\"\");\n    $(\"#status\").val(\"\");\n    $(\"#personStatus\").val(\"\");\n  }\n\n  changeFiles() {\n    this.filesToUpload = this.filesToUpload ? this.filesToUpload : new Array();\n    for (var i = 0; i < this.files.length; i++) {\n      let addFile = true;\n      this.filesToUpload.forEach(item => {\n        if (item.name === this.files[i].name) addFile = false;\n      })\n      if (addFile) this.filesToUpload.push(this.files[i]);\n    }\n  }\n\n  removeFile(index) {\n    this.filesToUpload.splice(index, 1);\n  }\n\n  toolTips() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  showComment(helpTicket, el) {\n    if (helpTicket.content[0].content) {\n      this.commentShown = helpTicket.content[0].content.comments;\n      $(\".hover\").css(\"top\", el.clientY - 100);\n      $(\".hover\").css(\"left\", el.clientX + 10);\n      $(\".hover\").css(\"display\", \"block\");\n    }\n  }\n\n  hideComment() {\n    $(\".hover\").css(\"display\", \"none\");\n  }\n\n  customHelpTicketTypeFilter(value, item, context) {\n    var foo = value.toUpperCase();\n    for (let i = 0; i < context.helpTickets.helpTicketTypesArray.length; i++) {\n      for (let j = 0; j < context.helpTickets.helpTicketTypesArray[i].subtypes.length; j++) {\n        if (context.helpTickets.helpTicketTypesArray[i].subtypes[j].type == item.helpTicketType) {\n          return context.helpTickets.helpTicketTypesArray[i].subtypes[j].description.toUpperCase().indexOf(foo) > -1;\n        }\n      }\n    }\n    return false\n  }\n\n  _setUpValidation() {\n    this.validation.addRule(\"00\", \"curriculumTitle\", [{ \"rule\": \"required\", \"message\": \"Curriculum Title is required\" }]);\n    this.validation.addRule(\"00\", \"client\", [{\n      \"rule\": \"custom\", \"message\": \"You must select a client\",\n      \"valFunction\": function (context) {\n        return (context.helpTicket.clientId !== undefined);\n      }\n    }]);\n    this.validation.addRule(\"01\", \"resetPasswordUserIDs\", [{ \"rule\": \"required\", \"message\": \"You must enter the passwords to reset\" }]);\n    this.validation.addRule(\"01\", \"client\", [{\n      \"rule\": \"custom\", \"message\": \"You must enter the passwords to reset\",\n      \"valFunction\": function (context) {\n        return (context.helpTicket.clientId !== undefined);\n      }\n    }]);\n    this.validation.addRule(\"02\", \"application\", [{\n      \"rule\": \"custom\", \"message\": \"You must select the application\",\n      \"valFunction\": function (context) {\n        return (context.content.application !== undefined);\n      }\n    }]);\n  }\n\n}\n","import { inject } from 'aurelia-framework';\nimport { Router } from \"aurelia-router\";\nimport { Utils } from '../../resources/utils/utils';\nimport { AppConfig } from '../../config/appConfig';\nimport { SiteInfo } from '../../resources/data/siteInfo';\nimport { Sessions } from '../../resources/data/sessions';\nimport { People } from '../../resources/data/people';\nimport { HelpTickets } from '../../resources/data/helpTickets';\nimport { ClientRequests } from '../../resources/data/clientRequests';\nimport { APJClientRequests } from '../../resources/data/apjClientRequests';\nimport { Events } from '../../resources/data/events';\nimport moment from 'moment';\n\n@inject(Router, Utils, AppConfig, SiteInfo, Sessions, HelpTickets, ClientRequests, People, APJClientRequests, Events)\nexport class User {\n\n  constructor(router, utils, config, siteinfo, sessions, helpTickets, requests, people, events, apjRequests) {\n    this.router = router;\n    this.utils = utils;\n    this.config = config;\n    this.siteinfo = siteinfo;\n    this.sessions = sessions;\n    this.helpTickets = helpTickets;\n    this.requests = requests;\n    this.people = people;\n    this.apjRequests = apjRequests;\n    this.events = events;\n\n    this.userObj = JSON.parse(sessionStorage.getItem('user'));\n  };\n\n  attached() {\n    $('.carousel').carousel({\n      interval: 10000\n    });\n\n    this.alertIndex = this.utils.arrayContainsValue(this.siteinfo.siteArray, \"itemType\", \"ALRT\");\n    if (!sessionStorage.getItem('alert')) {\n      if (this.alertIndex > -1) {\n        this.openAlert(this.siteinfo.siteArray[this.alertIndex]);\n      }\n    }\n\n    $(\"#notice\").fadeIn(100).fadeOut(100).fadeIn(100).fadeOut(100).fadeIn(100);\n  }\n\n  canActivate() {\n    if (!this.userObj) {\n      this.userObj = this.config.user;\n      if (!this.userObj) {\n        this.utils.showNotification(\"Couldn't find your user information.  Try logging in again or call the UCC.\");\n        this.router.navigate(\"home\");\n      }\n    }\n  }\n\n  async activate() {\n    await this.getData();\n    this.config.getConfig(true);\n  }\n\n  async getData() {\n    var currentDate = moment(new Date()).format(\"MM-DD-YYYY\");\n    var options = '?filter=expiredDate|gt|' + currentDate + '&order=sortOrder';\n    if (this.userObj.userRole >= this.config.UCC_ROLE) {\n      let responses = await Promise.all([\n        this.sessions.getSessionsArray('?order=startDate'),\n        this.siteinfo.getInfoArray(true, options),\n        this.config.getConfig()\n      ]);\n      this.showCarousel = this.siteinfo.showCarousel();\n    } else {\n      let responses = await Promise.all([\n        this.sessions.getSessionsArray('?order=startDate'),\n        this.siteinfo.getInfoArray(true, options),\n        this.config.getConfig()\n      ]);\n      this.showCarousel = this.siteinfo.showCarousel();\n    }\n\n    this.temp = undefined;\n\n    if (!sessionStorage.getItem('weather')) {\n      if (this.userObj.postalCode) {\n        let weather = await this.siteinfo.getWeather(this.userObj.institutionId.postalCode);\n        if (weather && weather.main) {\n          this.temp = (parseFloat(weather.main.temp) - 273.15);\n          if (this.config.TEMP_SCALE == 'C') {\n            this.temp = this.temp.toFixed(1) + \"\\u00b0 C\";\n          } else {\n            this.temp = (parseFloat(this.temp) * 1.8 + 32).toFixed(1) + \"\\u00b0 F\";\n          }\n          this.weatherIcon = this.config.IMG_DOWNLOAD_URL + \"icons/\" + weather.weather[0].icon + \".png\";\n          var weatherObj = { temp: this.temp, url: this.weatherIcon };\n          sessionStorage.setItem('weather', JSON.stringify(weatherObj));\n        }\n      }\n    } else {\n      let weather = JSON.parse(sessionStorage.getItem('weather'));\n      this.temp = weather.temp;\n      this.weatherIcon = weather.url;\n    }\n    if (sessionStorage.getItem('uccweather')) {\n      let uccweather = JSON.parse(sessionStorage.getItem('uccweather'));\n      this.ucctemp = (parseFloat(uccweather.temp) - 273.15);\n      if (this.config.TEMP_SCALE == 'C') {\n        this.ucctemp = this.ucctemp.toFixed(1) + \"\\u00b0 C\";\n      } else {\n        this.ucctemp = (parseFloat(this.ucctemp) * 1.8 + 32).toFixed(1) + \"\\u00b0 F\";\n      }\n      this.uccweatherIcon = this.config.IMG_DOWNLOAD_URL + 'icons/' + uccweather.icon + \".png\";\n    }\n\n  }\n\n  async getEvents() {\n    this.eventArray = new Array();\n    await this.events.getEventsArray('', true);\n    let today = moment(new Date()).format('YYYY-MM-DD');\n    this.events.eventArray.forEach(item => {\n      if (item.personId === this.userObj._id || item.scope === 'u') {\n        let start = moment(item.start).format('YYYY-MM-DD')\n        let end = moment(item.end).format('YYYY-MM-DD')\n        if (moment(today).isBetween(start, end)) {\n          this.eventArray.push(item);\n        } else if (moment(today).isSame(start)) {\n          this.eventArray.push(item);\n        }\n      }\n    })\n  }\n\n  moreInfoExists(item) {\n    return item.url && item.url.length > 0;\n  }\n\n}\n","// Module\nvar code = \"<template>\\r\\n    <compose view='../../../resources/elements/submenu.html'></compose>     \\r\\n    <div class=\\\"col-lg-12\\\">\\r\\n        <router-view></router-view>\\r\\n    </div>\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n    <div class=\\\"topMargin\\\">\\r\\n        <H4>Choose a Course</h4>\\r\\n        <table id=\\\"coursesTable\\\" class=\\\"table table-striped table-hover\\\">\\r\\n            <thead>\\r\\n                <tr>\\r\\n                    <td colspan='6'>\\r\\n                        <span click.delegate=\\\"refreshCourses()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\" title=\\\"\\\" data-original-title=\\\"Refresh\\\"><i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n                        <span click.delegate=\\\"newCourse()\\\" class=\\\"smallMarginRight\\\"  bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\" title=\\\"\\\" data-original-title=\\\"New Course\\\"><i class=\\\"fa fa-plus\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n                        <span style=\\\"margin-left:5px;\\\"  class=\\\"smallMarginRight\\\"  bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\" title=\\\"\\\" data-original-title=\\\"Save\\\" click.delegate=\\\"editACourse()\\\"><i class=\\\"fa fa-pencil\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n                        <span class=\\\"pull-right\\\" id=\\\"spinner\\\" innerhtml.bind=\\\"spinnerHTML\\\"></span>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <th style=\\\"width:20rem;\\\">Number </th>\\r\\n                    <th style=\\\"width:30rem;\\\">Name</th>\\r\\n                </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n                <tr id=\\\"selectCourse\\\" click.delegate=\\\"selectCourse($index, $event)\\\"  repeat.for=\\\"course of people.coursesArray\\\">\\r\\n                    <td data-title=\\\"nummber\\\">${course.number} </td>\\r\\n                    <td data-title=\\\"name\\\">${course.name}</td>\\r\\n                </tr>\\r\\n            </tbody>\\r\\n        </table>\\r\\n\\r\\n        <div class=\\\"row\\\" show.bind=\\\"editCourse\\\">\\r\\n            <div class=\\\"panel panel-default col-md-10 col-md-offset-1\\\" style=\\\"background-color:ghostwhite;\\\">\\r\\n                <div class=\\\"bottomMargin list-group-item leftMargin rightMargin topMargin\\\">\\r\\n                    <span click.trigger=\\\"saveCourse()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\" title=\\\"\\\" data-original-title=\\\"Save Course\\\"><i class=\\\"fa fa-floppy-o fa-lg fa-border\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n                    <span click.trigger=\\\"cancelEditCourse()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\" title=\\\"\\\" data-original-title=\\\"Cancel\\\"><i class=\\\"fa fa-ban fa-lg fa-border\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n                </div>\\r\\n                <div class=\\\"panel-body\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <input id=\\\"number\\\" value.bind=\\\"people.selectedCourse.number\\\" type=\\\"text\\\" placeholder=\\\"Course Number\\\"\\r\\n                            class=\\\"form-control\\\"/>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <input id=\\\"name\\\" value.bind=\\\"people.selectedCourse.name\\\" type=\\\"text\\\" placeholder=\\\"Course Name\\\"\\r\\n                            class=\\\"form-control\\\"/>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <span id=\\\"course\\\"></span>\\r\\n</template>\\r\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n    <div show.bind=\\\"requests.selectedRequestDetail.assignments.length > 0\\\">\\r\\n      <h4 class=\\\"topMargin\\\"><strong>Assignments</strong></h4>\\r\\n      <div show.bind=\\\"requests.selectedRequestDetail.requestStatus == config.ASSIGNED_REQUEST_CODE\\\" class=\\\"panel panel-primary topMargin\\\">\\r\\n        <div class=\\\"panel-body\\\">  \\r\\n          <ul style=\\\"padding-left:10px;\\\">\\r\\n\\t\\t\\t\\t\\t\\t<li class=\\\"list-group-item\\\" repeat.for=\\\"assign of requests.selectedRequestDetail.assignments\\\">\\r\\n              <compose if.bind=\\\"systems.selectedSystem.type === 'ERP' || !systems.selectedSystem.type\\\" view=\\\"./erp.html\\\"></compose>\\r\\n              <compose if.bind=\\\"systems.selectedSystem.type === 'HANA'\\\" view=\\\"./hana.html\\\"></compose>\\r\\n              <compose if.bind=\\\"systems.selectedSystem.type === 'BO'\\\" view=\\\"./bo.html\\\"></compose>\\r\\n\\t\\t\\t\\t\\t\\t</li>\\r\\n          </ul>\\r\\n\\r\\n          <label show.bind=\\\"products.selectedProduct.documents && products.selectedProduct.documents.length > 0\\\" class=\\\"topMargin\\\">Helpful Documents</label>\\r\\n          <div class=\\\"list-group\\\">\\r\\n            <a repeat.for=\\\"document of products.selectedProduct.documents\\\" href=\\\"${config.DOCUMENT_FILE_DOWNLOAD_URL}/${document.categoryCode}/${document.categoryName}/${document.fileName}\\\"  target=\\\"_blank\\\">${document.fileName}</a>\\r\\n          </div>\\r\\n          <label show.bind=\\\"requests.selectedRequestDetail.techComments && requests.selectedRequestDetail.techComments.length > 0\\\" class=\\\"topMargin\\\">Assignment Comments</label>\\r\\n          <div show.bind=\\\"requests.selectedRequestDetail.techComments && requests.selectedRequestDetail.techComments.length > 0\\\" class=\\\"col-lg-12 topMargin well overFlow\\\" innerhtml.bind=\\\"requests.selectedRequestDetail.techComments\\\"></div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</template>\\r\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n\\t\\t <div class=\\\"row leftMargin\\\">\\r\\n\\t\\t\\t<h4>URL</h4>\\r\\n\\t\\t\\t<h5 class=\\\"leftMargin\\\"><a href=\\\"${systems.selectedSystem.its}\\\" target=\\\"_blank\\\">${systems.selectedSystem.its}</a></h5>\\r\\n\\r\\n\\t\\t\\t<h4 class=\\\"topMargin\\\">Users</h4>\\r\\n\\t\\t\\t<h5 class=\\\"leftMargin\\\">Student IDs: <span class=\\\"bold\\\"> ${assign.studentUserIds}</span></h5>\\r\\n\\t\\t\\t<h5 class=\\\"leftMargin\\\">Student Password: <span class=\\\"bold\\\"> ${assign.studentPassword}</span></h5>\\r\\n\\t\\t\\t<span show.bind=\\\"requests.selectedRequest.courseId !== null\\\">\\r\\n\\t\\t\\t\\t<h5 class=\\\"leftMargin\\\" class=\\\"topMargin\\\">Faculty IDs <span class=\\\"bold\\\">: ${requests.selectedRequestDetail.assignments[selectedAssignmentIndex].facultyUserIds}</span></h5>\\r\\n\\t\\t\\t\\t<h5 class=\\\"leftMargin\\\">Faculty Password: <span class=\\\"bold\\\"> ${requests.selectedRequestDetail.assignments[selectedAssignmentIndex].facultyPassword}</span></h5>\\r\\n\\t\\t\\t</span>\\r\\n\\t\\t</div>\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\n  <!-- Term Select -->\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-12\\\">\\n      <div class=\\\"form-group leftJustify\\\">\\n        <select value.bind=\\\"sessionId\\\" class=\\\"form-control\\\" change.trigger=\\\"changeSession($event)\\\" id=\\\"session\\\">\\n          <option value=\\\"-1\\\">Select a session</option>\\n          <option repeat.for=\\\"session of sessions.sessionsArray | filterSessions:config.ACTIVE_REQUEST_OVERLAP:'Requests':config.SESSION_SORT_ORDER\\\"\\n                  value.bind=\\\"session._id\\\">Session ${session.session} - ${session.year}</option>\\n        </select>\\n      </div>\\n    </div>\\n  </div>\\n  \\n  <div class=\\\"row\\\">\\n    <div show.bind=\\\"sessionSelected && useSandbox\\\" class=\\\"col-sm-12\\\">\\n      <div class=\\\"form-group\\\">\\n        <select value.bind=\\\"requestType\\\" change.trigger=\\\"changeRequestType($event)\\\" id=\\\"requestType\\\" class=\\\"form-control\\\">\\n          <option value=\\\"-1\\\">Choose the Type of The Request</option>\\n           <option value=\\\"sandboxCourse\\\">${config.SANDBOX_NAME}</option>\\n           <option value=\\\"regularCourse\\\">Regular Course</option>\\n        </select>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <compose show.bind=\\\"regularClient && sessionSelected && typeSelected\\\" view='./Courses.html'></compose>\\n\\n  <!-- Number of students -->\\n  <div show.bind=\\\"requestReceived\\\">\\n    <div class=\\\"row\\\"  id=\\\"numStudents\\\" show.bind=\\\"courseSelected\\\">\\n      <div class=\\\"topMargin col-lg-10 leftMargin rightMargin\\\" innerhtml.bind=\\\"REGULAR_NUMBER_OF_STUDENTS.content\\\"></div>\\n      <div class=\\\"topMargin col-lg-5\\\">\\n        <div class=\\\"form-group\\\">\\n          <div show.bind=\\\"!existingRequest\\\">\\n            <label for=\\\"undergraduates\\\" class=\\\"col-sm-3 control-label\\\">Undergraduates</label>\\n            <div class=\\\"col-sm-8\\\">\\n              <input disabled.bind=\\\"existingRequest\\\" id=\\\"undergraduates\\\"  type=\\\"number\\\" placeholder=\\\"Number of Undergraduates\\\"\\n                      class=\\\"form-control\\\" value.bind=\\\"requests.selectedRequest.undergradIds\\\"/>\\n            </div>\\n          </div>\\n          <div show.bind=\\\"existingRequest\\\" class=\\\"col-lg-5\\\">\\n            <h5>Undergrads: <b>${requests.selectedRequest.undergradIds}</b></h5>\\n          </div>\\n                \\n        </div>\\n      </div>\\n      <div class=\\\"topMargin col-lg-5\\\">\\n        <div class=\\\"form-group\\\">\\n          <div show.bind=\\\"!existingRequest\\\">\\n              <label for=\\\"graduates\\\" class=\\\"col-sm-3 control-label\\\">Graduates</label>\\n              <div class=\\\"col-sm-8\\\">\\n                <input disabled.bind=\\\"existingRequest\\\" id=\\\"graduates\\\" type=\\\"number\\\" placeholder=\\\"Number of Graduates\\\"\\n                      class=\\\"form-control\\\" value.bind=\\\"requests.selectedRequest.graduateIds\\\"/>\\n              </div>\\n            </div>\\n              <div show.bind=\\\"existingRequest\\\" class=\\\"col-lg-5\\\">\\n                  <h5>Graduate: <b>${requests.selectedRequest.graduateIds}</b></h5>\\n              </div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"row col-lg-offset-3\\\" show.bind=\\\"courseSelected\\\">\\n        <span class=\\\"col-lg-8 \\\" id=\\\"numberOfStudentsError\\\"></span>\\n    </div>\\n\\n    <!-- Begin and End Date -->\\n    <div class=\\\"row\\\" show.bind=\\\"sandBoxClient || courseSelected\\\">\\n      <div class=\\\"topMargin col-lg-10 leftMargin rightMargin\\\" innerhtml.bind=\\\"START_END_DATES.content\\\"></div>\\n        <div class=\\\"col-lg-5\\\">\\n          <div class=\\\"form-group topMargin\\\">\\n            <div show.bind=\\\"!existingRequest\\\">\\n            <label class=\\\"col-sm-3 form-control-label \\\">Start Date</label>\\n            <div show.bind=\\\"!existingRequest\\\" class=\\\"col-sm-8\\\">\\n                <flat-picker  controlid=\\\"startDate\\\" config.bind=\\\"configDate\\\" change.delegate=\\\"changeBeginDate($event)\\\"  \\n                    value.bind=\\\"requests.selectedRequest.startDate\\\" startdate.bind=\\\"minStartDate\\\" enddate.bind=\\\"maxStartDate\\\"></flat-picker>\\n              <span id='startDateError'></span>\\n            </div>\\n            </div>\\n            <div show.bind=\\\"existingRequest\\\" class=\\\"col-sm-8\\\">\\n              <h5>Start Date:  <b>${requests.selectedRequest.startDate | dateFormat:config.DATE_FORMAT_TABLE}</b></h5>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"col-lg-5\\\">\\n          <div class=\\\"form-group topMargin\\\">\\n            <div show.bind=\\\"!existingRequest\\\">\\n              <label class=\\\"col-sm-3 form-control-label \\\">End Date</label>\\n              <div  class=\\\"col-sm-8\\\">\\n                <flat-picker controlid=\\\"endDate\\\" config.bind=\\\"configDate\\\" value.bind=\\\"requests.selectedRequest.endDate\\\" startdate.bind=\\\"minEndDate\\\" enddate.bind=\\\"maxEndDate\\\"></flat-picker>\\n              <span id='endDateError'></span>\\n              </div>\\n            </div>\\n            <div show.bind=\\\"existingRequest\\\" class=\\\"col-sm-8\\\">\\n              <h5>End Date:  <b>${requests.selectedRequest.endDate | dateFormat:config.DATE_FORMAT_TABLE}</b></h5>\\n            </div>\\n          </div>\\n        </div>\\n        \\n      </div>\\n    </div>\\n  <div show.bind=\\\"sessionId == -1 && requestType == -1\\\" innerhtml.bind=\\\"CLIENT_REQUEST_START.content\\\"></div>\\n  <div show.bind=\\\"sessionId != -1 && requestType == -1 && useSandbox\\\" innerhtml.bind=\\\"SESSION_SELECTED.content\\\"></div>\\n  \\n  <div show.bind=\\\"showInfoBox\\\" class=\\\"topMargin leftMargin\\\" style=\\\"display: none;\\\" id=\\\"infoBox\\\"></div>\\n</template>\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\"  >\\r\\n      <div  class=\\\"well well-sm col-md-10 col-sm-offset-1\\\" innerhtml.bind =\\\"siteInfo.selectMessageByKey('SELECT_PRODUCT_WELL').content.replace('REQUEST_LIMIT', config.REQUEST_LIMIT)\\\"></div>\\r\\n    </div>\\r\\n    \\r\\n    <div class=\\\"col-md-12\\\" >\\r\\n      <div class=\\\"col-md-5 topMargin\\\">\\r\\n        <label id=\\\"productList\\\">Available Products</label>\\r\\n        <div class=\\\"well well2 overFlow\\\" style=\\\"height:400px;\\\">\\r\\n          <input class=\\\"form-control\\\" value.bind=\\\"filter\\\" input.trigger=\\\"filterList()\\\" placeholder=\\\"Filter products\\\"/>\\r\\n          <ul class=\\\"list-group\\\">\\r\\n            <a  click.trigger=\\\"selectProduct($event)\\\" type=\\\"button\\\" repeat.for=\\\"product of filteredProductsArray\\\" id=\\\"${product._id}\\\"\\r\\n                    mouseover.delegate=\\\"showCurriculum(product, $event)\\\" mouseout.delegate=\\\"hideCurriculum()\\\"\\r\\n                    class=\\\"list-group-item dropbtn\\\">${product.name}</a>\\r\\n          </ul>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"col-md-5 col-md-offset-1 topMargin\\\">\\r\\n        <label id=\\\"requestProductsLabel\\\">Requested Products</label>\\r\\n        <div class=\\\"well well2 overflow\\\" style=\\\"height:400px;\\\">\\r\\n          <ul class=\\\"list-group\\\">\\r\\n            <a show.bind=\\\"!product.delete\\\" click.trigger=\\\"removeProduct($event)\\\" type=\\\"button\\\" repeat.for=\\\"product of requests.selectedRequest.requestDetails\\\" id=\\\"${product.productId}\\\"\\r\\n                    class=\\\"list-group-item dropbtn\\\">${product.productId | lookupValue:products.productsArray:\\\"_id\\\":\\\"name\\\"}</a>\\r\\n          </ul>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</template>\\r\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <div  class=\\\"well well-sm col-md-10 col-sm-offset-1\\\">${siteInfo.selectMessageByKey('CLIENT_REQUESTS_COMMENTS').content}</div>\\r\\n    </div>\\r\\n    <div show.bind=\\\"!existingRequest\\\" class=\\\"form-group col-md-12\\\">\\r\\n      <editor  disabled.bind=\\\"existingRequest\\\" value.bind=\\\"requests.selectedRequest.comments\\\" height=\\\"250\\\"></editor>\\r\\n    </div>\\r\\n    <div show.bind=\\\"existingRequest\\\" class=\\\"col-sm-8\\\" >\\r\\n      <h4>Comments</h4>\\r\\n      <div innerhtml.bind=\\\"requests.selectedRequest.comments\\\"></div>\\r\\n    </div>\\r\\n  </div>\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n\\r\\n  <div class=\\\"col-md-12\\\" >\\r\\n    <div  class=\\\"well well-sm col-md-10 col-sm-offset-1\\\" innerhtml.bind=\\\"siteInfo.selectMessageByKey('CLIENT_REQUESTS_SUMMARY').content\\\"></div>\\r\\n  </div>\\r\\n  <div class=\\\"form-group col-md-12\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <h4 show.bind=\\\"requestType != 'sandboxCourse'\\\" class=\\\"col-md-5 topMargin\\\">Course: <b>${courseId | courseName:people.coursesArray}</b></h4>\\r\\n      <h4 show.bind=\\\"requestType == 'sandboxCourse'\\\" class=\\\"col-md-5 topMargin\\\">Course: <b>Sandbox</b></h4>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <h4 class=\\\"col-md-5 topMargin\\\" show.bind=\\\"requestType != 'sandboxCourse'\\\">Undergraduates: <b>${requests.selectedRequest.undergradIds}</b></h4>\\r\\n      <h4 class=\\\"col-md-5 topMargin\\\" show.bind=\\\"requestType != 'sandboxCourse'\\\">Graduates: <b>${requests.selectedRequest.graduateIds}</b> </h4>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <h4 class=\\\"col-md-5 topMargin\\\">Course Begins: <b>${requests.selectedRequest.startDate | dateFormat:'YYYY-MM-DD'}</b></h4>\\r\\n      <h4 class=\\\"col-md-5 topMargin\\\">Course Ends: <b>${requests.selectedRequest.endDate | dateFormat:'YYYY-MM-DD'}</b></h4>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-12\\\"></div>\\r\\n    <div class=\\\"row\\\" id=\\\"productListTable\\\">\\r\\n      <table class=\\\"table table-striped table-bordered col-md-10 topMargin\\\">\\r\\n        <thead>\\r\\n        <tr>\\r\\n          <th>Requested Product</th>\\r\\n          <th>Date Required</th>\\r\\n        </tr>\\r\\n        <tbody id=\\\"requiredProductsTable\\\">\\r\\n        <tr repeat.for=\\\"request of requests.selectedRequest.requestDetails\\\">\\r\\n          <td>\\r\\n            ${request.productId | lookupValue:products.productsArray:\\\"_id\\\":\\\"name\\\"}\\r\\n            <span if.bind=\\\"request.delete\\\" class=\\\"label label-warning\\\">Delete this product</span>\\r\\n          </td>\\r\\n          <td> \\r\\n            <div show.bind=\\\"!existingRequest || !request.requiredDate || $index >= existingRequestLength\\\" class=\\\"form-group col-md-8\\\">\\r\\n               <flat-picker if.bind=\\\"!request.delete\\\" controlid=\\\"requiredDate-${$index}\\\" config.bind=\\\"configDate\\\" value.bind=\\\"request.requiredDate\\\" startdate.bind=\\\"minRequiredDate\\\" enddate.bind=\\\"maxRequiredDate\\\"></flat-picker>\\r\\n            </div>\\r\\n            <div show.bind=\\\"existingRequest && request.requiredDate && $index < existingRequestLength\\\" class=\\\"col-sm-8\\\">\\r\\n              <h5><b>${request.requiredDate | dateFormat:config.DATE_FORMAT_TABLE}</b></h5>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        </tbody>\\r\\n      </table>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-sm-12\\\">\\r\\n        <div class=\\\"form-group\\\" show.bind=\\\"comments !== ''\\\">\\r\\n          <label >Comments:</label>\\r\\n          <div class=\\\"topMargin\\\" rows=\\\"12\\\" innerhtml.bind=\\\"requests.selectedRequest.comments\\\"></div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n</template>\\r\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n  <div class=\\\"row\\\" style=\\\"word-wrap: break-word;\\\">\\r\\n      <span class=\\\"col-lg-4\\\">\\r\\n        <h5 class=\\\"leftMargin\\\">System: <span class=\\\"bold\\\">${assign.systemId | lookupValue:systems.systemsArray:\\\"_id\\\":\\\"sid\\\"}</span></h5>\\r\\n        <h5 class=\\\"leftMargin\\\">Client: <span class=\\\"bold\\\"> ${assign.client} </span></h5>\\r\\n        <h5 class=\\\"leftMargin\\\">Server: <span class=\\\"bold\\\"> ${assign.systemId | lookupValue:systems.systemsArray:\\\"_id\\\":\\\"server\\\"} </span></h5>\\r\\n        <h5 class=\\\"leftMargin\\\">System Number: <span class=\\\"bold\\\"> ${assign.systemId | lookupValue:systems.systemsArray:\\\"_id\\\":\\\"instance\\\"} </span></h5>\\r\\n      </span>\\r\\n      <span class=\\\"col-lg-6\\\">\\r\\n        <h5>Student IDs: <span class=\\\"bold\\\"> ${assign.studentUserIds ? assign.studentUserIds : 'N/A'}</span></h5>\\r\\n        <h5>Student Password: <span class=\\\"bold\\\"> ${assign.studentPassword ? assign.studentPassword : 'N/A'}</span></h5>\\r\\n        <span>\\r\\n          <h5  class=\\\"topMargin\\\">Faculty IDs <span class=\\\"bold\\\">: ${assign.facultyUserIds ? assign.facultyUserIds : 'N/A'}</span></h5>\\r\\n          <h5>Faculty Password: <span class=\\\"bold\\\"> ${assign.facultyPassword ? assign.facultyPassword : 'N/A'}</span></h5>\\r\\n        </span>\\r\\n      </span>\\r\\n      <span class=\\\"col-lg-12\\\">\\r\\n          <h5 show.bind=\\\"systems.selectedSystem.its && systems.selectedSystem.its.length > 0\\\" class=\\\"leftMargin bigTopMargin\\\">Web URL:</h5>\\r\\n          <h5 show.bind=\\\"systems.selectedSystem.its && systems.selectedSystem.its.length > 0\\\"><span class=\\\"bold\\\"> <a href=\\\"${systems.selectedSystem.its}\\\" target=\\\"_blank\\\">${systems.selectedSystem.its}</a> </span></h5>            \\r\\n      </span>\\r\\n  </div>\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n\\t\\t <div class=\\\"row leftMargin\\\">\\r\\n\\t\\t\\t<h4>SAP HANA Launchpad URL</h4>\\r\\n\\t\\t\\t<h5 class=\\\"leftMargin\\\"><a href=\\\"${systems.selectedSystem.its}\\\" target=\\\"_blank\\\">${systems.selectedSystem.its}</a></h5>\\r\\n\\r\\n\\t\\t\\t<h4 class=\\\"topMargin\\\">Users</h4>\\r\\n\\t\\t\\t<h5 class=\\\"leftMargin\\\">Student IDs: <span class=\\\"bold\\\"> ${assign.studentUserIds}</span></h5>\\r\\n\\t\\t\\t<h5 class=\\\"leftMargin\\\">Student Password: <span class=\\\"bold\\\"> ${assign.studentPassword}</span></h5>\\r\\n\\t\\t\\t<span show.bind=\\\"requests.selectedRequest.courseId !== null\\\">\\r\\n\\t\\t\\t\\t<h5 class=\\\"leftMargin\\\" class=\\\"topMargin\\\">Faculty IDs <span class=\\\"bold\\\">: ${requests.selectedRequestDetail.assignments[selectedAssignmentIndex].facultyUserIds}</span></h5>\\r\\n\\t\\t\\t\\t<h5 class=\\\"leftMargin\\\">Faculty Password: <span class=\\\"bold\\\"> ${requests.selectedRequestDetail.assignments[selectedAssignmentIndex].facultyPassword}</span></h5>\\r\\n\\t\\t\\t</span>\\r\\n\\r\\n\\t\\t\\t<h4 class=\\\"topMargin\\\">Lumira / Predictive Analytics Connection</h4>\\r\\n\\t\\t\\t<h5 class=\\\"leftMargin\\\">System: <span class=\\\"bold\\\">${assign.systemId | lookupValue:systems.systemsArray:\\\"_id\\\":\\\"sid\\\"}</span></h5>\\r\\n\\t\\t\\t<h5 class=\\\"leftMargin\\\">Server: <span class=\\\"bold\\\"> ${systems.selectedSystem.server} </span></h5>\\r\\n\\t\\t\\t<h5 class=\\\"leftMargin\\\">Port: <span class=\\\"bold\\\"> ${systems.selectedSystem.port} </span></h5>\\r\\n\\t\\t\\t<h5 class=\\\"leftMargin\\\">System Number: <span class=\\\"bold\\\"> ${systems.selectedSystem.instance} </span></h5> \\r\\n\\t\\t</div>\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-lg-12\\\">\\r\\n\\t\\t\\t<h4 class=\\\"topMargin\\\"><strong>Request Details</strong></h4>\\r\\n\\t\\t\\t<div class=\\\"panel panel-default topMargin\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"panel-body leftJustify\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"form-group bottomMargin\\\" show.bind=\\\"customerActionRequired\\\">\\r\\n\\t\\t\\t\\t\\t\\t<h5 for=\\\"message\\\">The UCC staff has asked you to provide additional information</h5>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"well col-lg-12\\\" id=\\\"message\\\" innerhtml.bind=\\\"customerMessage\\\" class=\\\"form-control\\\"></div>\\r\\n\\t\\t\\t\\t\\t\\t<h5>Enter your response in the comments box below and click save</h5>\\r\\n\\t\\t\\t\\t\\t\\t<editor value.bind=\\\"customerResponse\\\" height=\\\"250\\\"></editor>\\t\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div show.bind=\\\"showDetails\\\" class=\\\"form-horizontal topMargin\\\">\\r\\n\\t\\t\\t\\t\\t\\t<h4>Product: ${requests.selectedRequestDetail.productId | lookupValue:products.productsArray:\\\"_id\\\":\\\"name\\\"}</h4>\\r\\n\\t\\t\\t\\t\\t\\t<h5>Course: ${requests.selectedRequest.courseId | courseName:people.coursesArray}</h5>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"topMargin\\\" show.bind=\\\"requests.selectedRequest.courseId != config.SANDBOX_ID\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-5 leftMargin\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<h5>Undergrads: <b>${requests.selectedRequest.undergradIds}</b></h5>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-5\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<h5>Graduate: <b>${requests.selectedRequest.graduateIds}</b></h5>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div> \\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-5 leftMargin\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<h5>Start Date:  <b>${requests.selectedRequest.startDate | dateFormat:config.DATE_FORMAT_TABLE}</b></h5>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-lg-5\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<h5>End Date: <b>${requests.selectedRequest.endDate | dateFormat:config.DATE_FORMAT_TABLE}</b></h5>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div show.bind=\\\"requests.selectedRequest.customerMessage && requests.selectedRequest.customerMessage.length > 0\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"topMargin\\\">Requests from the UCC</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"well\\\" innerhtml.bind=\\\"requests.selectedRequest.customerMessage\\\"></div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<div show.bind=\\\"requests.selectedRequest.comments && requests.selectedRequest.comments.length > 0\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"topMargin\\\">Comments</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div innerhtml.bind=\\\"requests.selectedRequest.comments\\\"></div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div show.bind=\\\"products.selectedProduct.productDescription\\\">\\r\\n\\t\\t<h4>Product Information</h4>\\r\\n\\t\\t<div innerhtml.bind=\\\"products.selectedProduct.productDescription\\\"></div>\\r\\n\\t</div>\\r\\n\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n\\t<div class=\\\"fluid-container\\\">\\r\\n\\t\\t<!-- Buttons -->\\r\\n\\t\\t<div class=\\\"bottomMargin list-group-item\\\">\\r\\n\\t\\t\\t<span click.trigger=\\\"back()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\" title=\\\"\\\"\\r\\n\\t\\t\\t\\tdata-original-title=\\\"Back\\\"><i class=\\\"fa fa-arrow-left fa-lg fa-border\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n\\t\\t\\t<span show.bind=\\\"customerActionRequired\\\" click.trigger=\\\"save()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\" title=\\\"\\\"\\r\\n\\t\\t\\t\\tdata-original-title=\\\"Save\\\"><i class=\\\"fa fa-floppy-o fa-lg fa-border\\\" aria-hidden=\\\"true\\\" ></i></span>\\r\\n\\t\\t\\t<span show.bind=\\\"customerActionRequired\\\" click.trigger=\\\"cancel()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\"\\r\\n\\t\\t\\t\\tdata-title=\\\"Cancel\\\" title=\\\"Cancel\\\"><i class=\\\"fa fa-ban fa-lg fa-border\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n\\t\\t\\t<span show.bind=\\\"requests.selectedRequestDetail.assignments.length === 0\\\" click.trigger=\\\"delete()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\"\\r\\n                title=\\\"\\\" data-original-title=\\\"Delete\\\"><i class=\\\"fa fa-trash fa-lg fa-border text-danger\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-lg-6 col-md-12\\\">\\r\\n\\t\\t\\t<compose view=\\\"./requestDetails.html\\\"></compose>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-lg-6 col-md-12\\\">\\r\\n\\t\\t\\t<compose view=\\\"./assignmentDetails.html\\\"></compose>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n  <style>\\r\\n    .warning {\\r\\n      background-color: #fcf8e3;\\r\\n    }\\r\\n    .assign{\\r\\n      background-color: #d9edf7;\\r\\n    }\\r\\n  </style>\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class='row'>\\r\\n      <div show.bind=\\\"dataTable.displayArray.length > 0\\\" class='bottomMargin'>\\r\\n        <compose view=\\\"../../../../resources/elements/table-navigation-bar.html\\\"></compose>\\r\\n        <div id=\\\"no-more-tables\\\">\\r\\n          <table class=\\\"table table-striped table-hover cf\\\">\\r\\n            <thead class=\\\"cf\\\">\\r\\n              <tr>\\r\\n                <td colspan='6'>\\r\\n                  <span click.trigger=\\\"refresh()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\"\\r\\n                    title=\\\"\\\" data-original-title=\\\"Refresh\\\"><i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n                  <span class=\\\"pull-right\\\" id=\\\"spinner\\\" innerhtml.bind=\\\"spinnerHTML\\\"></span>\\r\\n                </td>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <th></th>\\r\\n                <th></th>\\r\\n                <th></th>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <th>\\r\\n                  Course <span click.trigger=\\\"dataTable.sortArray('courseId','id', people.coursesArray, '_id', 'name')\\\"><i class=\\\"fa fa-sort\\\"></i></span>\\r\\n                </th>\\r\\n                <th>\\r\\n                  Session <span click.trigger=\\\"dataTable.sortArray('sessionId','id',sessions.sessionsArray,'_id','startDate')\\\"><i class=\\\"fa fa-sort\\\"></i></span><br>\\r\\n                </th>\\r\\n                <th>\\r\\n                  Product Requests (Click to see the details)\\r\\n                </th>\\r\\n              </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n              <tr  repeat.for=\\\"request of dataTable.displayArray\\\">\\r\\n                <td click.trigger=\\\"customerActionResponse(request, $event)\\\" data-title=\\\"Course\\\">\\r\\n                  <h5>${request.courseId | courseName:people.coursesArray:config.SANDBOX_ID:config.SANDBOX_NAME}</h5>\\r\\n                  <h6>Undergraduates: ${request.undergradIds} Graduates: ${request.graduateIds}</h6>\\r\\n                  <h7>Request No: ${request.clientRequestNo}</h7>\\r\\n                  <h6 show.bind=\\\"request.requestStatus == config.CUSTOMER_ACTION_REQUEST_CODE\\\" ><b>CUSTOMER ACTION REQUIRED (click here to respond)</b></h6>\\r\\n                </td>\\r\\n                <td data-title=\\\"Session\\\">\\r\\n                  <h5>${request.sessionId | sessionName:sessions.sessionsArray}</h5>\\r\\n                </td>\\r\\n                <td>\\r\\n                  <ul>\\r\\n                    <li class=\\\"${detail.requestStatus | getArrayValue:config.REQUEST_STATUS:'status':-1} list-group-item\\\" click.trigger=\\\"edit(detail, $event, $index)\\\" repeat.for=\\\"detail of request.requestDetails\\\" >\\r\\n                      <h5>${detail.productId | lookupValue:products.productsArray:\\\"_id\\\":\\\"name\\\"}</h5>\\r\\n                      Status: ${detail.requestStatus | lookupValue:config.REQUEST_STATUS:\\\"code\\\":\\\"description\\\"}\\r\\n                      <h7 class=\\\"leftMargin\\\">Required: ${detail.requiredDate | dateFormat:config.DATE_FORMAT_TABLE}</h7>\\r\\n                      <h7 class=\\\"pull-right\\\" show.bind=\\\"detail.requestStatus == config.CUSTOMER_ACTION_REQUEST_CODE && request.requestStatus != config.CUSTOMER_ACTION_REQUEST_CODE\\\" ><b>CUSTOMER ACTION REQUIRED (click here to respond)</b></h7>\\r\\n                    </li>\\r\\n                  </ul>\\r\\n                </td>\\r\\n              </tr>\\r\\n            </tbody>\\r\\n          </table>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  </div>\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\n<!-- <require from=\\\"fuelux/css/fuelux.min.css\\\"></require>\\n<require from=\\\"flatpickr/flatpickr.css\\\"></require> -->\\n<div class=\\\"row\\\">\\n <span  show.bind=\\\"showLockMessage\\\" class=\\\"leftMargin bottomMargin\\\" >Request is currently locked by ${lockObject.personId | lookupValue:people.peopleArray:\\\"_id\\\":'fullName'}</span>\\n \\n</div>\\n  <div class=\\\"fuelux col-lg-7 blackText\\\" style=\\\"height:1000px;\\\">\\n    <div class=\\\"wizard\\\" data-initialize=\\\"wizard\\\" id=\\\"myWizard\\\">\\n      <div class=\\\"steps-container\\\">\\n        <ul class=\\\"steps\\\">\\n          <li data-step=\\\"1\\\"  data-target=\\\"#step1\\\" class=\\\"active\\\">\\n            <span class=\\\"badge badge-info\\\">1</span>Step 1<span class=\\\"chevron\\\"></span>\\n          </li>\\n          <li data-step=\\\"2\\\" data-target=\\\"#step2\\\">\\n            <span class=\\\"badge\\\">2</span>Step 2<span class=\\\"chevron\\\"></span>\\n          </li>\\n          <li data-step=\\\"3\\\" data-target=\\\"#step3\\\">\\n            <span class=\\\"badge\\\">3</span>Step 3<span class=\\\"chevron\\\"></span>\\n          </li>\\n          <li data-step=\\\"4\\\" data-target=\\\"#step4\\\">\\n            <span class=\\\"badge\\\">4</span>Step 4<span class=\\\"chevron\\\"></span>\\n          </li>\\n        </ul>\\n      </div>\\n      <div class=\\\"actions\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-default btn-prev btn-md\\\">\\n           <span><i class=\\\"fa fa-chevron-left\\\" aria-hidden=\\\"true\\\"></i></span>Prev</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary btn-next btn-md\\\" data-last=\\\"Complete\\\">Next\\n          <span><i class=\\\"fa fa-chevron-right\\\" aria-hidden=\\\"true\\\"></i></span>\\n        </button>\\n      </div>\\n      <div class=\\\"step-content\\\">\\n\\n        <div class=\\\"step-pane active\\\" id=\\\"step1\\\" data-step=\\\"1\\\">\\n          <h3><strong>Step 1 </strong> - Course Information</h3>\\n          <compose view=\\\"./components/client-request-step1.html\\\"></compose>\\n        </div>\\n\\n        <div class=\\\"step-pane\\\" id=\\\"step2\\\"  data-step=\\\"2\\\">\\n          <h3><strong>Step 2 </strong> - Products</h3>\\n\\n          <compose view=\\\"./components/client-request-step2.html\\\"></compose>\\n\\n        </div>\\n\\n        <div class=\\\"step-pane\\\" id=\\\"step3\\\"  data-step=\\\"3\\\">\\n          <h3><strong>Step 3 </strong> - Additional Comments</h3>\\n          <compose view=\\\"./components/client-request-step3.html\\\"></compose>\\n        </div>\\n\\n        <div class=\\\"step-pane\\\" id=\\\"step4\\\"  data-step=\\\"4\\\">\\n          <h3><strong>Step 4 </strong> - Requested Dates</h3>\\n          <compose view=\\\"./components/client-request-step4.html\\\"></compose>\\n        </div>\\n\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"col-lg-4 leftMargin\\\" id=\\\"SessionInfo\\\">\\n\\t\\t\\t<h2 class=\\\"underline\\\">Current Sessions</h2>\\n\\t\\t\\t<div class=\\\"list-group\\\">\\n\\t\\t\\t\\t<a class=\\\"list-group-item\\\" repeat.for=\\\"session of sessions.sessionsArray\\\">\\n\\t\\t\\t\\t\\t<h4 class=\\\"list-group-item-heading\\\">${session.sessionStatus}: Session ${session.session} - ${session.year}</h4>\\n\\t\\t\\t\\t\\t<p class=\\\"list-group-item-text\\\">Requests open: ${session.requestsOpenDate | dateFormat:config.DATE_FORMAT_TABLE}</p>\\n\\t\\t\\t\\t\\t<p class=\\\"list-group-item-text\\\">Clients available: ${session.startDate | dateFormat:config.DATE_FORMAT_TABLE}</p>\\n\\t\\t\\t\\t\\t<p class=\\\"list-group-item-text\\\">Session ends: ${session.endDate | dateFormat:config.DATE_FORMAT_TABLE}</p>\\n\\t\\t\\t\\t</a>\\n    </div>\\n  </div>\\n  <div show.bind=\\\"sessionSelected\\\" class=\\\"topMargin col-lg-4 leftMargin\\\"><h4>Session: ${sessions.selectedSession.session} - ${sessions.selectedSession.year}</h4></div> \\n  <div show.bind=\\\"sandBoxClient\\\" class=\\\"topMargin col-lg-4 leftMargin\\\"><h4>Course: ${config.SANDBOX_NAME}</h4></div> \\n  <div show.bind=\\\"courseSelected\\\" class=\\\"topMargin col-lg-4 leftMargin\\\"><h4>Course: ${people.selectedCourse.number} - ${people.selectedCourse.name}</h4></div> \\n  <div class=\\\"topMargin col-lg-4 leftMargin\\\" style=\\\"display: none;\\\" id=\\\"existingRequestInfo\\\"></div>\\n\\n  <div id=\\\"curriculumInfo\\\" class=\\\"topMargin col-lg-4 leftMargin\\\" >\\n    <div class=\\\"panel panel-default\\\" >\\n      <div class=\\\"panel-heading\\\">${productInfoObject.header}</div>\\n      <div class=\\\"panel-body\\\" innerhtml.bind=\\\"productInfoObject.info\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n  \\n</template>\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n  <div class=\\\"container\\\">\\r\\n   <div class=\\\"col-lg-5 topMargin\\\">\\r\\n        <label id=\\\"productList\\\">Available Products</label>\\r\\n        <div class=\\\"well well2 overFlow\\\">\\r\\n          <input class=\\\"form-control\\\" value.bind=\\\"filter\\\" input.trigger=\\\"filterList()\\\" placeholder=\\\"Filter products\\\"/>\\r\\n          <ul class=\\\"list-group\\\">\\r\\n            <a  click.trigger=\\\"selectProduct($event)\\\" type=\\\"button\\\" repeat.for=\\\"product of filteredProductsArray\\\" id=\\\"${product._id}\\\"\\r\\n                    mouseover.delegate=\\\"showCurriculum(product, $event)\\\" mouseout.delegate=\\\"hideCurriculum()\\\"\\r\\n                    class=\\\"list-group-item dropbtn\\\">${product.name}</a>\\r\\n          </ul>\\r\\n        </div>\\r\\n\\t</div>\\r\\n\\t <div id=\\\"curriculumInfo\\\" class=\\\"topMargin col-lg-6 leftMargin\\\">\\r\\n\\t\\t<div class=\\\"col-lg-6\\\" style=\\\"position:fixed;\\\">\\r\\n\\t\\t\\t<h2>${productInfoObject.header}</h2>\\r\\n\\t\\t\\t<div class=\\\"panel-body\\\" innerhtml.bind=\\\"productInfoObject.info\\\"></div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n  </div>\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n    <div class=\\\"panel panel-default\\\">\\r\\n      <div class=\\\"panel-body\\\">\\r\\n        <div class=\\\"col-lg-4\\\">\\r\\n            <div class=\\\"form-group topMargin leftMargin\\\">\\r\\n                <select show.bind=\\\"!requestSelected\\\" value.bind=\\\"selectedSession\\\" change.delegate=\\\"getRequests()\\\" id=\\\"session\\\" class=\\\"form-control\\\">\\r\\n                <option repeat.for=\\\"session of sessions.sessionsArray\\\"\\r\\n                        value.bind=\\\"session._id\\\">Session ${session.session} - ${session.year}</option>\\r\\n                </select>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div show.bind=\\\"!requestSelected\\\" class=\\\"col-lg-12\\\">\\r\\n            <div show.bind=\\\"noRequests\\\" class=\\\"bottomMargin leftMargin\\\">\\r\\n                <h4>You have no existing requests for this session</h4>\\r\\n            </div>\\r\\n            <compose  show.bind=\\\"!noRequests\\\"view=\\\"./components/viewRequestsTable.html\\\"></compose>\\r\\n        </div> \\r\\n        <div show.bind=\\\"requestSelected\\\" class=\\\"col-lg-12\\\">\\r\\n            <compose view=\\\"./components/viewRequestsForm.html\\\"></compose>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div> \\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n      <h5>These are your current product requests.  If the issue you are having is related to a specific product, please select it.</h5>\\r\\n      <div class=\\\"topMargin\\\">\\r\\n        <span id=\\\"selectProductRequestError\\\"></span>\\r\\n        <h5 show.bind=\\\"clientRequestsArray.length === 0\\\">You have no product requests that apply to this type of help ticket.</h5>\\r\\n        <table id=\\\"clientTable\\\" show.bind=\\\"clientRequestsArray.length > 0\\\" class=\\\"table table-bordered table-responsive\\\" style=\\\"background:white;\\\">\\r\\n          <thead>\\r\\n          <tr class=\\\"header\\\">\\r\\n            <th>Course</th>\\r\\n            <th>Session</th>\\r\\n            <th>Product</th>\\r\\n            <th>System</th>\\r\\n            <th>Client</th>\\r\\n            <th>Status</th>\\r\\n          </tr>\\r\\n          </thead>\\r\\n          <tbody>\\r\\n            <tr class=\\\"sortable\\\" id=\\\"${product.id}\\\" productId=\\\"${product.productId}\\\" \\r\\n                repeat.for=\\\"product of clientRequestsArray\\\"\\r\\n                click.trigger=\\\"requestChosen($event, $index)\\\">\\r\\n              <td>${product.courseName}</td>\\r\\n              <td>${product.sessionId | session:sessions.sessionsArray}</td>\\r\\n              <td>${product.productName}</td> \\r\\n              <td>${product.systemId | lookupValue:systems.systemsArray:\\\"_id\\\":\\\"sid\\\"}</td>\\r\\n              <td>${product.client}</td>\\r\\n              <td>${product.requestStatus | lookupValue:config.REQUEST_STATUS:\\\"code\\\":\\\"description\\\"}</td>\\r\\n            </tr>\\r\\n          </tbody>\\r\\n        </table>\\r\\n        <span id=\\\"client\\\"></span>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n  <div class=\\\"smart-timeline-icon bottomMarginLg\\\" innerhtml.bind=\\\"comment.authorEmail | gravatarUrl:100:1\\\">\\r\\n\\r\\n  </div>\\r\\n  <div class=\\\"smart-timeline-time\\\">\\r\\n    <small>${comment.dateCreated | dateFormat:'YYYY-MM-DD':true}</small>\\r\\n  </div>\\r\\n  <div class=\\\"smart-timeline-content borderTop leftJustify\\\">\\r\\n\\t<div class=\\\"form-group\\\">\\r\\n     \\t<div innerhtml.bind=\\\"comment.comment\\\"></div>\\r\\n    </div>\\r\\n</div>\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n    <div class='topMargin bottomMargin'>\\r\\n        <label for=\\\"prioritySelect\\\" class='class=\\\"bigLabel topMargin'>Priority</label>\\r\\n        <select class=\\\"form-control\\\"\\r\\n            id=\\\"prioritySelect\\\" value.bind=\\\"helpTickets.selectedHelpTicket.priority\\\">\\r\\n            <option repeat.for=\\\"priority of config.HELP_TICKET_PRIORITIES\\\" value.bind=\\\"$index\\\">${priority.priority}</option>\\r\\n        </select>\\r\\n        <span>${config.HELP_TICKET_PRIORITIES[helpTickets.selectedHelpTicket.priority].message}</span>\\r\\n    </div>\\r\\n\\r\\n    <!-- Category Select -->\\r\\n    <div class=\\\"form-group\\\" show.bind=\\\"helpTickets.selectedHelpTicket.priority\\\">\\r\\n        <Label class=\\\"bigLabel topMargin\\\">To help us define your issue, select the category.</Label>\\r\\n        <select value.bind=\\\"helpTickets.selectedHelpTicket.helpTicketCategory\\\" change.delegate=\\\"categoryChanged()\\\" id=\\\"helpTicketCategory\\\"\\r\\n            class=\\\"form-control\\\">\\r\\n            <option value=\\\"-1\\\">Select the help ticket category</option>\\r\\n            <option repeat.for=\\\"types of helpTickets.helpTicketTypesArray | sortArray:'category':'ASC'\\\" model.bind=\\\"types.category\\\">${types.description}</option>\\r\\n        </select>\\r\\n    </div>\\r\\n\\r\\n    <!-- Type Select -->\\r\\n    <div show.bind=\\\"showTypes\\\" class=\\\"form-group\\\">\\r\\n        <Label class=\\\"bigLabel topMargin\\\">To help us further define your issue, select the type.</Label>\\r\\n        <select value.bind=\\\"helpTickets.selectedHelpTicket.helpTicketType\\\" change.delegate=\\\"typeChanged()\\\" id=\\\"helpTicketType\\\" class=\\\"form-control\\\">\\r\\n            <option value=\\\"-1\\\">Select the help ticket type</option>\\r\\n            <option repeat.for=\\\"types of helpTickets.helpTicketTypesArray[catIndex].subtypes\\\" model.bind=\\\"types.type\\\">${types.description}</option>\\r\\n        </select>\\r\\n    </div>\\r\\n\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n    <compose view=\\\"./Requests.html\\\"></compose>\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div id=\\\"container\\\"></div>\\r\\n      <!--   <compose if.bind=\\\"showForm\\\" view=\\\"./inputForm-${catIndex}-${selectedHelpTicketType}.html\\\"></compose>  -->\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"leftMargin rightMargin topMargin panel panel-default\\\" style=\\\"padding:5px;\\\">\\r\\n        <div class='panel-body'>\\r\\n            <div class=\\\"row\\\">\\r\\n                <div>\\r\\n                    <label>Upload screenshots or other files that will help us solve you problem.</lable></br>\\r\\n                        <label>If you want to upload multiple files, hold the control key while selecting files</label>\\r\\n                </div>\\r\\n\\r\\n\\r\\n                <div class=\\\"col-lg-2\\\">\\r\\n                    <label class=\\\"btn btn-primary\\\">\\r\\n                        Browse for files&hellip; <input type=\\\"file\\\" style=\\\"display: none;\\\" change.delegate=\\\"changeFiles()\\\"\\r\\n                            files.bind=\\\"files\\\" multiple>\\r\\n                    </label>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6 col-lg-offset-2\\\">\\r\\n                    <ul>\\r\\n                        <li repeat.for=\\\"file of filesToUpload\\\" class=\\\"list-group-item\\\" style=\\\"background-color:cyan;\\\">${file.name}<span click.delegate=\\\"removeFile($index)\\\"\\r\\n                                class=\\\"pull-right\\\" ><i class=\\\"fa fa-trash\\\" aria-hidden=\\\"true\\\"></i></span></li>\\r\\n                    </ul>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\n    <div class=\\\"row topMargin leftMargin rightMargin\\\" id=\\\"descriptionGroup\\\">\\n        <span id=\\\"descriptionErrorMessage\\\"></span>\\n        <div class=\\\"form-group\\\">\\n            <div innerhtml.bind=\\\"editorMessage\\\"></div>\\n            <p>&nbsp;</p>\\n            <editor id=\\\"comments\\\" value.bind=\\\"helpTickets.selectedHelpTicketContent.content.comments\\\" height=\\\"250\\\"></editor>\\n        </div>\\n\\n        <div class=\\\"form-group topMargin\\\">\\n            <div innerhtml.bind=\\\"stepsMessage\\\"></div>\\n            <p>&nbsp;</p>\\n            <editor id=\\\"steps\\\" value.bind=\\\"helpTickets.selectedHelpTicketContent.content.steps\\\" height=\\\"250\\\"></editor>\\n        </div>\\n    </div>\\n</template>\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n    <div class=\\\"leftMargin rightMargin\\\">\\r\\n        <div show.bind=\\\"outputForm\\\">\\r\\n            <h3 class=\\\"topMargin\\\">Details:</h3>\\r\\n            <div class=\\\"card-title\\\" style=\\\"padding:20px;\\\" id=\\\"outputContainer\\\"></div>\\r\\n        </div>\\r\\n        <div show.bind=\\\"SelectedClientRequest\\\">\\r\\n            <h3 class=\\\"topMargin\\\">Product Request</h3>\\r\\n            <div class=\\\"card-title\\\">\\r\\n                <h4>Session: ${SelectedClientRequest.sessionId | session:sessions.sessionsArray}</h4>\\r\\n                <h4>Product: ${SelectedClientRequest.productName}</h4>\\r\\n                <h4>System: ${SelectedClientRequest.systemId | lookupValue:systems.systemsArray:\\\"_id\\\":\\\"sid\\\"}</h4>\\r\\n                <h4>Client: ${SelectedClientRequest.client}</h4>\\r\\n                <h4>Course: ${SelectedClientRequest.courseName}</h4>\\r\\n            </div>\\r\\n        </div>\\r\\n        <h3 class=\\\"topMargin\\\">Attachments:</h3>\\r\\n        <div show.bind=\\\"filesToUpload.length\\\" class=\\\"topMargin card-title\\\">\\r\\n            <ul>\\r\\n                <li repeat.for=\\\"file of filesToUpload\\\" class=\\\"list-group-item\\\">${file.name}<span click.delegate=\\\"removeFile($index)\\\"\\r\\n                        class=\\\"pull-right\\\"><i class=\\\"fa fa-trash\\\" aria-hidden=\\\"true\\\"></i></span></li>\\r\\n            </ul>\\r\\n        </div>\\r\\n        <div show.bind=\\\"!filesToUpload.length\\\" class=\\\"topMargin card-title\\\">Are you sure you don't want to add an\\r\\n            attachement?</div>\\r\\n        <h3 class=\\\"topMargin\\\">Description:</h3>\\r\\n        <div show.bind=\\\"helpTickets.selectedHelpTicketContent.content.comments\\\" class=\\\"topMargin card-title\\\"\\r\\n            innerhtml.bind=\\\"helpTickets.selectedHelpTicketContent.content.comments\\\"></div>\\r\\n        <div show.bind=\\\"!helpTickets.selectedHelpTicketContent.content.comments\\\" class=\\\"topMargin card-title\\\">Are you\\r\\n            sure you don't wish to provide a description?</div>\\r\\n        <h3 class=\\\"topMargin\\\">Steps to Reproduce:</h3>\\r\\n        <div show.bind=\\\"helpTickets.selectedHelpTicketContent.content.steps\\\" class=\\\"topMargin card-title\\\"\\r\\n            innerhtml.bind=\\\"helpTickets.selectedHelpTicketContent.content.steps\\\"></div>\\r\\n        <div show.bind=\\\"!helpTickets.selectedHelpTicketContent.content.steps\\\" class=\\\"topMargin card-title\\\">Are you sure\\r\\n            you don't wish to provide the steps to reproduce the problem?</div>\\r\\n    </div>\\r\\n\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\n    <!-- <require from=\\\"fuelux/css/fuelux.min.css\\\"></require>\\n    <require from=\\\"flatpickr/flatpickr.css\\\"></require> -->\\n\\n    <div class=\\\"fuelux col-lg-7 blackText\\\" style=\\\"height:1000px;\\\">\\n        <div class=\\\"wizard\\\" data-initialize=\\\"wizard\\\" id=\\\"myWizard\\\">\\n            <div class=\\\"steps-container\\\">\\n                <ul class=\\\"steps\\\">\\n                    <li data-step=\\\"1\\\" data-bs-target=\\\"#step1\\\" class=\\\"active\\\">\\n                        <span class=\\\"badge badge-info\\\">1</span>Step 1<span class=\\\"chevron\\\"></span>\\n                    </li>\\n                    <li data-step=\\\"2\\\" data-bs-target=\\\"#step2\\\">\\n                        <span class=\\\"badge\\\">2</span>Step 2<span class=\\\"chevron\\\"></span>\\n                    </li>\\n                    <li data-step=\\\"3\\\" data-bs-target=\\\"#step3\\\">\\n                        <span class=\\\"badge\\\">3</span>Step 3<span class=\\\"chevron\\\"></span>\\n                    </li>\\n                    <li data-step=\\\"4\\\" data-bs-target=\\\"#step4\\\">\\n                        <span class=\\\"badge\\\">4</span>Step 4<span class=\\\"chevron\\\"></span>\\n                    </li>\\n                    <li data-step=\\\"5\\\" data-bs-target=\\\"#step5\\\">\\n                        <span class=\\\"badge\\\">5</span>Step 5<span class=\\\"chevron\\\"></span>\\n                    </li>\\n                </ul>\\n            </div>\\n            <div class=\\\"actions\\\">\\n                <button type=\\\"button\\\" class=\\\"btn btn-default btn-prev btn-md\\\">\\n                    <span><i class=\\\"fa fa-chevron-left\\\" aria-hidden=\\\"true\\\"></i></span>Prev</button>\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary btn-next btn-md\\\" data-last=\\\"Complete\\\">Next\\n                    <span><i class=\\\"fa fa-chevron-right\\\" aria-hidden=\\\"true\\\"></i></span>\\n                </button>\\n            </div>\\n            <div class=\\\"step-content\\\">\\n\\n                 <div class=\\\"step-pane active\\\" id=\\\"step1\\\" data-step=\\\"1\\\">\\n                    <h3><strong>Step 1 </strong> - Help Ticket Type</h3>\\n                    <compose view=\\\"./help-ticket-step1.html\\\"></compose>\\n                </div>\\n\\n              <div class=\\\"step-pane\\\" id=\\\"step2\\\" data-step=\\\"2\\\">\\n                    <h3><strong>Step 2 </strong> - Which product request does this apply to</h3>\\n\\n                    <compose view=\\\"./help-ticket-step2.html\\\"></compose>\\n\\n                </div>\\n\\n                <div class=\\\"step-pane\\\" id=\\\"step3\\\" data-step=\\\"3\\\">\\n                    <h3><strong>Step 3 </strong> - Give us some details and add attachments</h3>\\n                    <compose view=\\\"./help-ticket-step3.html\\\"></compose>\\n                </div>\\n\\n                 <div class=\\\"step-pane\\\" id=\\\"step4\\\" data-step=\\\"4\\\">\\n                    <h3><strong>Step 4 </strong> - Describe the problem and tell us how to reproduce it</h3>\\n                    <compose view=\\\"./help-ticket-step4.html\\\"></compose>\\n                </div>\\n\\n                <div class=\\\"step-pane\\\" id=\\\"step5\\\" data-step=\\\"5\\\">\\n                    <h3><strong>Step 5 </strong> - Review and Confirm</h3>\\n                    <compose view=\\\"./help-ticket-step5.html\\\"></compose>\\n                </div>\\n\\n            </div>\\n        </div>\\n    </div>\\n</template>\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n    <div class=\\\"panel panel-default\\\" style=\\\"padding:5px;\\\">\\r\\n        <div class=\\\"panel-body\\\" >\\r\\n          <div class=\\\"row\\\">\\r\\n\\r\\n  <div class=\\\"fluid-container\\\">\\r\\n\\r\\n    <!-- Buttons -->\\r\\n    <div class=\\\"bottomMargin list-group-item\\\" style=\\\"position:fixed;z-index:1000;width:100%;top:91px;left:0;background-color:ghostwhite;\\\">\\r\\n      <span click.trigger=\\\"back()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\" title=\\\"\\\"\\r\\n        data-original-title=\\\"Back\\\"><i class=\\\"fa fa-arrow-left fa-lg fa-border\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n      <span show.bind=\\\"helpTickets.selectedHelpTicket.helpTicketStatus !== config.CLOSED_HELPTICKET_STATUS\\\" click.trigger=\\\"respond()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\"\\r\\n        title=\\\"\\\" data-original-title=\\\"Respond\\\"><i class=\\\"fa fa-paper-plane fa-lg fa-border\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n        <span class=\\\"leftMargin largeFont\\\">${viewHelpTicketsHeading}</span>\\r\\n    </div>\\r\\n\\r\\n    <!-- Help Ticket Header -->\\r\\n    <div class=\\\"topMargin\\\">\\r\\n      <!-- Enter Response -->\\r\\n      <div show.bind=\\\"enterResponse\\\" class=\\\"topMargin bottomMargin\\\">\\r\\n\\r\\n        <div class=\\\"panel panel-default leftMargin rightMargin\\\" style=\\\"background-color:ghostwhite;\\\">\\r\\n          <div class=\\\"panel-body\\\">\\r\\n    \\r\\n \\r\\n            <div class=\\\"bottomMargin list-group-item leftMargin rightMargin\\\">\\r\\n              <span click.trigger=\\\"saveResponse()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\"\\r\\n                title=\\\"\\\" data-original-title=\\\"Send Response\\\"><i class=\\\"fa fa-floppy-o fa-lg fa-border\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n              <span click.trigger=\\\"cancelResponse()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\"\\r\\n                title=\\\"\\\" data-original-title=\\\"Cancel\\\"><i class=\\\"fa fa-ban fa-lg fa-border\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row leftMargin rightMargin\\\">\\r\\n              <editor toolbar.bind=\\\"toolbar\\\" value.bind=\\\"helpTickets.selectedHelpTicketContent.content.comments\\\" height=\\\"250\\\"></editor>\\r\\n      \\r\\n              <p>&nbsp;</p>\\r\\n              <div class=\\\"row hidden-xs hidden-sm\\\">\\r\\n                <h4>Upload screenshots or other files that will help us solve you problem</h4>\\r\\n                  <div class=\\\"col-lg-2\\\">\\r\\n                      <label class=\\\"btn btn-primary\\\">\\r\\n                          Browse for files&hellip; <input type=\\\"file\\\" style=\\\"display: none;\\\" change.delegate=\\\"changeFiles()\\\"files.bind=\\\"files\\\" multiple>\\r\\n                      </label>\\r\\n                  </div>\\r\\n                  <div class=\\\"col-lg-6\\\">\\r\\n                      <ul>\\r\\n                          <li repeat.for = \\\"file of filesToUpload\\\" class=\\\"list-group-item\\\">${file.name}<span click.delegate=\\\"removeFile($index)\\\" class=\\\"pull-right\\\"><i class=\\\"fa fa-trash\\\" aria-hidden=\\\"true\\\"></i></span></li>\\r\\n                      </ul>\\r\\n                  </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"list-group-item leftMargin rightMargin\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-md-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <h4 class=\\\"col-md-offset-1\\\">Created: ${helpTickets.selectedHelpTicket.createdDate | dateFormat:'YYYY-MM-DD'} ${helpTickets.selectedHelpTicket.createdDate\\r\\n                    | dateFormat:'h:mm A'}</h4>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"col-md-5\\\">\\r\\n                <div class=\\\"form-group col-md-10\\\">\\r\\n                  <h4>Type: ${helpTickets.selectedHelpTicket.helpTicketType | lookupValue:config.HELP_TICKET_TYPES:\\\"code\\\":\\\"description\\\"}</h4>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-md-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <h4 class=\\\"col-md-offset-1\\\">Session: ${helpTickets.selectedHelpTicket.sessionId | session:sessions.sessionsArray}</h4>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"col-md-5\\\">\\r\\n                <div class=\\\"form-group col-md-10\\\">\\r\\n                  <h4>Status: ${helpTickets.selectedHelpTicket.helpTicketStatus | lookupValue:config.HELP_TICKET_STATUSES:\\\"code\\\":\\\"description\\\"}</h4>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-md-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label class=\\\"col-md-offset-1\\\">Owner: ${helpTickets.selectedHelpTicket.owner[0].personId |  lookupValue:people:\\\"_id\\\":'fullName'}</label>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"col-md-5\\\">\\r\\n                <div class=\\\"form-group col-md-10\\\">\\r\\n                  <label>Keywords: ${helpTickets.selectedHelpTicket.keyWords}</label>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <compose view=\\\"../../../../resources/htTimeline/timeline.html\\\"></compose>\\r\\n</div>\\r\\n\\r\\n</div>\\r\\n</div>\\r\\n</div>\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\n\\n    <div class=\\\"panel panel-default\\\">\\n        <div class=\\\"panel-body\\\">\\n          <div class=\\\"row\\\">\\n              <div show.bind=\\\"!helpTicketSelected\\\" class=\\\"col-lg-12\\\">\\n                  <div show.bind=\\\"nohelpTickets\\\" class=\\\"bottomMargin leftMargin\\\">\\n                      <h4>You have no open help tickets</h4>\\n                      <span class=\\\"checkbox marginLeft\\\" style=\\\"white-space: nowrap;display:inline;\\\">\\n              <label>\\n                <input checked.bind=\\\"isCheckedCurrent\\\" change.trigger=\\\"retrieveClosedHelpTickets()\\\" type=\\\"checkbox\\\"> View closed help tickets\\n              </label>\\n            </span>\\n                  </div>\\n\\n    <div class=\\\"hover\\\" innerhtml.bind=\\\"commentShown\\\"></div>\\n\\n  <div class=\\\"container\\\">\\n      <div id='no-more-tables'>\\n        <table class=\\\"table table-striped table-hover cf marginRight\\\">\\n            <thead class=\\\"cf\\\">\\n              <tr colspan=\\\"7\\\">\\n                <compose view=\\\"../../../../resources/elements/table-navigation-bar.html\\\"></compose> \\n              </tr>\\n              <tr>\\n                <td colspan='7'>\\n                    <div class=\\\"checkbox\\\">\\n                        <label>\\n                            <input checked.bind=\\\"isChecked\\\" change.trigger=\\\"filterOutClosed()\\\" type=\\\"checkbox\\\"> Hide closed help tickets\\n                        </label>\\n                    </div>\\n                </td>\\n              </tr>\\n              <tr>\\n                <td colspan='7'>\\n                  <span click.delegate=\\\"refresh()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\"\\n                    title=\\\"\\\" data-original-title=\\\"Refresh\\\"><i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i></span>\\n                  <span class=\\\"pull-right\\\" id=\\\"spinner\\\" innerhtml.bind=\\\"spinnerHTML\\\"></span>\\n                </td>\\n              </tr>\\n              <tr> \\n                <th><span  class=\\\"sortable\\\" click.trigger=\\\"dataTable.sortArray($event, {propertyName: 'helpTicketNo'})\\\">Number </span><i class=\\\"fa fa-sort\\\"></i></th>\\n                <th><span  class=\\\"sortable\\\" click.trigger=\\\"dataTable.sortArray($event, {propertyName: 'helpTicketType'})\\\">Type </span><i class=\\\"fa fa-sort\\\"></i></th>\\n                 <th>Owner</th>\\n                <th  class=\\\"hidden-xs hidden-sm\\\"></th>\\n                <th><span  class=\\\"sortable\\\" click.trigger=\\\"dataTable.sortArray($event, {propertyName: 'helpTicketStatus'})\\\">Status </span><i class=\\\"fa fa-sort\\\"></i></th>\\n                <th><span  class=\\\"sortable\\\" click.trigger=\\\"dataTable.sortArray($event, {propertyName: 'createdDate'})\\\">Date Created </span><i class=\\\"fa fa-sort\\\"></i></th>\\n                <th><span  class=\\\"sortable\\\" click.trigger=\\\"dataTable.sortArray($event, {propertyName: 'modifiedDate'})\\\">Date Modified </span><i class=\\\"fa fa-sort\\\"></i></th>\\n              </tr>\\n               <tr>\\n                <th></th>\\n                <th>\\n                  <input value.bind=\\\"helpTicketTypeFilterValue\\\" input.delegate=\\\"dataTable.filterList(helpTicketTypeFilterValue, { type: 'custom',  filter: customHelpTicketTypeFilter, collectionProperty: 'helpTicketType', displayProperty: 'helpTicketType',  compare:'custom'} )\\\"  class=\\\"form-control\\\" />\\n                </th>\\n                <th></th>\\n                <th class=\\\"hidden-xs hidden-sm\\\"></th>\\n                <th> \\n                  <select value.bind=\\\"helpTicketStatusFilter\\\" input.delegate=\\\"dataTable.filterList($event, { type: 'value',  filter: 'helpTicketStatusFilter',  collectionProperty: 'helpTicketStatus', displayProperty: 'helpTicketStatus',  compare:'match'} )\\\" class=\\\"form-control\\\">\\n                        <option value=\\\"\\\"></option>\\n                        <option repeat.for=\\\"status of config.HELP_TICKET_STATUSES\\\" value.bind=\\\"status.code\\\">${status.description}</option>\\n                  </select>\\n                </th>\\n                <th>\\n                  <input type=\\\"date\\\" value.bind=\\\"createdDateFilterValue\\\" input.delegate=\\\"dataTable.filterList(createdDateFilterValue, {type: 'date', filter: 'createdDate',  collectionProperty: 'createdDate', compare: 'after'} )\\\"  class=\\\"form-control\\\" />\\n                </th>\\n                 <th>\\n                  <input type=\\\"date\\\" value.bind=\\\"modifiedDateFilterValue\\\" input.delegate=\\\"dataTable.filterList(modifiedDateFilterValue, {type: 'date', filter: 'modifiedDate',  collectionProperty: 'modifiedDate', compare: 'after'} )\\\"  class=\\\"form-control\\\" />\\n                </th>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <tr class=\\\"sortable\\\" repeat.for=\\\"helpTicket of dataTable.displayArray\\\">\\n                <td click.trigger=\\\"selectHelpTicket($event, $index)\\\" data-title=\\\"Number\\\">${helpTicket.helpTicketNo}</td>\\n                <td  mouseover.delegate=\\\"showComment(helpTicket, $event)\\\" mouseout.delegate=\\\"hideComment()\\\" click.trigger=\\\"selectHelpTicket($event, $index)\\\"\\n                data-title=\\\"Type\\\">${helpTicket.helpTicketType | helpTicketType:helpTickets.helpTicketTypesArray}\\n              </td>\\n                <td style=\\\"width:12rem;\\\" data-tile=\\\"Owner\\\">${helpTicket.owner[0].personId.fullName}</td> \\n                <td style=\\\"width:2rem;\\\"  class=\\\"hidden-xs hidden-sm\\\" data-title=\\\"Close\\\">\\n                  <span click.trigger=\\\"closeHelpTicket(helpTicket)\\\" show.bind=\\\"helpTicket.helpTicketStatus != config.CLOSED_HELPTICKET_STATUS\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\" title=\\\"\\\" data-original-title=\\\"Close Help Ticket\\\"><i class=\\\"fa fa-window-close-o fa-lg\\\" aria-hidden=\\\"true\\\"></i></span>\\n                </td>  \\n                <td click.trigger=\\\"selectHelpTicket($event, $index)\\\" data-title=\\\"Status\\\">${helpTicket.helpTicketStatus | lookupHTStatus:config.HELP_TICKET_STATUSES}</td>             \\n                <td click.trigger=\\\"selectHelpTicket($event, $index)\\\" data-title=\\\"Created Date\\\">${helpTicket.createdDate | dateFormat:config.DATE_FORMAT_TABLE:false}</td>\\n                <td data-title=\\\"Modified Date\\\" click.delegate=\\\"selectHelpTicket($event, $index)\\\">${helpTicket.modifiedDate | dateFormat:config.DATE_FORMAT_TABLE:false}</td>\\n              </tr>\\n            </tbody>\\n          </table>\\n        </div>\\n      </div>\\n  </div>\\n\\n       \\n</div> \\n</div> \\n</div>\\n</template>\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\n    <div class=\\\"panel panel-default\\\">\\n        <div class=\\\"panel-body\\\">\\n\\n            <compose view='./components/helpTicketWizard.html'></compose>\\n\\n        </div>\\n    </div> <!-- Panel Body -->\\n</template>\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n\\t<style>\\r\\n        .menuButtons {\\r\\n\\t\\t\\tcolor: ${config.ACTIVE_SUBMENU_COLOR};\\r\\n\\t\\t\\tbackground-color:${config.BUTTONS_BACKGROUND}\\r\\n        }\\r\\n    </style>\\r\\n\\t<div class=\\\"col-lg-3\\\">\\r\\n\\t\\t<h4>Curriculum Categories</h4>\\r\\n\\t\\t<div>\\r\\n\\t\\t\\t<ul id=\\\"buttonGroup\\\" class=\\\"list-group\\\">\\r\\n\\t\\t\\t\\t<button click.trigger=\\\"typeChanged($index, $event)\\\" type=\\\"button\\\" repeat.for=\\\"category of curriculum.curriculumCatArray\\\"\\r\\n\\t\\t\\t\\t\\tid=\\\"${category.name}\\\" class=\\\"${ $first ? 'list-group-item menuButtons' : 'list-group-item'}\\\">${category.name}</button>\\r\\n\\t\\t\\t</ul>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-lg-9\\\">\\r\\n\\t\\t<div show.bind=\\\"typeSelected != '' && !curriculumSelected\\\" style='padding:15px;'>\\r\\n\\t\\t\\t<div class='row'>\\r\\n\\t\\t\\t\\t<div class='col-lg-12 bottomMargin'>\\r\\n\\t\\t\\t\\t\\t<table id=\\\"newsTable\\\" class=\\\"table table-striped table-hover\\\">\\r\\n\\t\\t\\t\\t\\t\\t<thead>\\r\\n\\t\\t\\t\\t\\t\\t\\t<tr>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<td colspan='4'>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<compose view=\\\"../../../resources/elements/table-navigation-bar.html\\\"></compose>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t</tr>\\r\\n\\t\\t\\t\\t\\t\\t\\t<tr>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<th>Title </th>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<th>Products</th>\\r\\n\\t\\t\\t\\t\\t\\t\\t</tr>\\r\\n\\t\\t\\t\\t\\t\\t</thead>\\r\\n\\t\\t\\t\\t\\t\\t<tbody>\\r\\n\\t\\t\\t\\t\\t\\t\\t<tr repeat.for=\\\"curriculum of curriculumArray\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<td click.delegate=\\\"selectCurriculum(curriculum)\\\" data-title=\\\"Title\\\" class=\\\"col-lg-6\\\">${curriculum.title}</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<td data-title=\\\"Products\\\" class=\\\"col-lg-4\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<ul class=\\\"list-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<li repeat.for=\\\"product of curriculum.products\\\" class=\\\"list-group-item\\\">${product | lookupValue:products.productsArray:\\\"_id\\\":\\\"name\\\"}</li>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</ul>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t</tr>\\r\\n\\t\\t\\t\\t\\t\\t</tbody>\\r\\n\\t\\t\\t\\t\\t</table>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div show.bind=\\\"curriculumSelected\\\">\\r\\n\\t\\t\\t<div class=\\\"bottomMargin list-group-item leftMargin rightMargin\\\">\\r\\n\\t\\t\\t\\t<span click.delegate=\\\"back()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\" title=\\\"\\\"\\r\\n\\t\\t\\t\\t\\tdata-original-title=\\\"Back\\\"><i class=\\\"fa fa-arrow-left fa-lg fa-border\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n\\t\\t\\t\\t<span click.delegate=\\\"add()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\" title=\\\"\\\"\\r\\n\\t\\t\\t\\t\\tdata-original-title=\\\"Add Comment\\\"><i class=\\\"fa fa-plus fa-lg fa-border\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n\\t\\t\\t\\t<span show.bind=\\\"addComment\\\" click.delegate=\\\"save()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\" title=\\\"\\\"\\r\\n\\t\\t\\t\\t\\tdata-original-title=\\\"Save\\\"><i class=\\\"fa fa-floppy-o fa-lg fa-border\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n\\t\\t\\t\\t<span show.bind=\\\"addComment\\\" click.delegate=\\\"cancel()\\\" class=\\\"smallMarginRight\\\" bootstrap-tooltip data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\"\\r\\n\\t\\t\\t\\t\\ttitle=\\\"\\\" data-original-title=\\\"Cancel Changes\\\"><i class=\\\"fa fa-ban fa-lg fa-border\\\" aria-hidden=\\\"true\\\"></i></span>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<div class=\\\"panel panel-default leftMargin rightMargin\\\">\\r\\n\\t\\t\\t\\t <div class=\\\"panel-heading\\\">\\r\\n\\t\\t\\t\\t\\t<h3 class=\\\"panel-title\\\">${curriculum.selectedCurriculum.title}</h3>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div show.bind=\\\"curriculum.selectedCurriculum.description.length > 0\\\" class=\\\"panel-body\\\" innerhtml.bind=\\\"curriculum.selectedCurriculum.description\\\">\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"topMargin bigLeftMargin\\\" show.bind=\\\"curriculum.selectedCurriculum.file.fileName != undefined\\\">\\r\\n\\t\\t\\t\\t\\t<a href=\\\"${config.DOWNLOAD_URL}/curriculum/${curriculum.selectedCurriculum.category}/${curriculum.selectedCurriculum.file.fileName}\\\" innerhtml.bind='curriculum.selectedCurriculum.file.fileName' target='_blank'></a>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<div show.bind=\\\"addComment\\\">\\r\\n\\t\\t\\t\\t<h3>Comments are not anonymous</h3>\\r\\n\\t\\t\\t\\t <editor value.bind=\\\"comment\\\" height=\\\"250\\\"></editor>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<div class=\\\"well well-sm topMargin leftMargin rightMargin\\\" show.bind=\\\"curriculum.selectedCurriculum.customerComments.length > 0\\\">\\r\\n\\t\\t\\t\\t<!-- Timeline Content -->\\r\\n\\t\\t\\t\\t<div class=\\\"smart-timeline\\\">\\r\\n\\t\\t\\t\\t\\t<ul class=\\\"smart-timeline-list\\\">\\r\\n\\t\\t\\t\\t\\t\\t<li  repeat.for=\\\"comment of curriculum.selectedCurriculum.customerComments\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<compose view=\\\"./components/comment.html\\\"></compose>\\r\\n\\t\\t\\t\\t\\t\\t</li>\\r\\n\\t\\t\\t\\t\\t</ul>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\r\\n</template>\\r\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n    <style>\\r\\n        .menuButtons {\\r\\n\\t\\t\\tcolor: ${config.ACTIVE_SUBMENU_COLOR};\\r\\n\\t\\t\\tbackground-color:${config.SUBMENU_BACKGROUND}\\r\\n        }\\r\\n    </style>\\r\\n    <div class=\\\"panel panel-default\\\">\\r\\n      <div class=\\\"panel-body\\\">\\r\\n          <div class=\\\"col-lg-3\\\">\\r\\n\\t\\t<h4>Download Categories</h4>\\r\\n\\t\\t<div>\\r\\n\\t\\t\\t<ul class=\\\"list-group\\\" id=\\\"buttonGroup\\\">\\r\\n\\t\\t\\t\\t<button click.trigger=\\\"typeChanged($event, $index)\\\" type=\\\"button\\\" repeat.for=\\\"type of downloads.appCatsArray\\\" id=\\\"${type.downCatcode}\\\"\\r\\n\\t\\t\\t\\t\\tclass=\\\"${ $first ? 'menuButtons list-group-item' : 'list-group-item'}\\\">${type.description}</button>\\r\\n\\t\\t\\t</ul>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n       \\r\\n\\r\\n        <div show.bind=\\\"typeSelected != ''\\\" class=\\\"col-lg-9\\\" style='padding:15px;'>\\r\\n            <div class='row'>\\r\\n                <div class='col-lg-12 bottomMargin'>\\r\\n                    <table id=\\\"newsTable\\\" class=\\\"table table-striped table-hover\\\">\\r\\n                        <thead>\\r\\n                            <tr>\\r\\n                                <td colspan='4'>\\r\\n                                    <compose view=\\\"../../../resources/elements/table-navigation-bar.html\\\"></compose> \\r\\n                                </td>\\r\\n                            </tr>\\r\\n                            <tr>\\r\\n                                <th><span  class=\\\"sortable\\\" click.trigger=\\\"dataTable.sortArray($event, {propertyName: 'name'})\\\"> Name  </span><i class=\\\"fa fa-sort\\\"></i></th>\\r\\n                                <th>File</th>\\r\\n                                <th>Decription</th>\\r\\n                                <th><span  class=\\\"sortable\\\" click.trigger=\\\"dataTable.sortArray($event, {propertyName: 'file.dateUploaded'})\\\"> Date </span><i class=\\\"fa fa-sort\\\"></i></th>\\r\\n                            </tr>\\r\\n                        </thead>\\r\\n                        <tbody>\\r\\n                            <tr repeat.for=\\\"item of dataTable.displayArray\\\">\\r\\n                                <td data-title=\\\"name\\\" class=\\\"col-md-2\\\">${item.name}</td>\\r\\n                                <td data-title=\\\"originalFilename\\\" class=\\\"col-md-2\\\">\\r\\n                                    <a href=\\\"${config.DOWNLOAD_URL}/downloads/${typeSelected}/${item.file.originalFilename}\\\" target=\\\"_blank\\\">${item.file.originalFilename}</a>\\r\\n                                </td>\\r\\n                                <td data-title=\\\"description\\\" class=\\\"col-md-6\\\">\\r\\n                                    <div>${item.description}</div>\\r\\n                                </td>\\r\\n                                <td class=\\\"col-md-2\\\">${item.file.dateUploaded | dateFormat}</td>\\r\\n                            </tr>\\r\\n                        </tbody>\\r\\n                    </table>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n   </div>\\r\\n</template>\\r\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div repeat.for=\\\"category of linkArray\\\" class=\\\"col-lg-3\\\">\\r\\n        <h2>${category.category}</h2>\\r\\n        <div>\\r\\n          <a repeat.for=\\\"link of category.links\\\" href=\\\"${link.url}\\\" class=\\\"list-group-item link-shadow topMargin\\\" target=\\\"_blank\\\">\\r\\n            <h4 class=\\\"list-group-item-heading\\\">${link.title}</h4>\\r\\n            <p class=\\\"list-group-item-text\\\">${link.content}</p>\\r\\n          </a>\\r\\n        </div>\\r\\n      </div>\\r\\n  </div>\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n    <compose view='../../../resources/elements/submenu.html'></compose>   \\r\\n    <div class=\\\"col-lg-12\\\">\\r\\n        <router-view></router-view>\\r\\n    </div>\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n<!--\\r\\n    <div class=\\\"panel panel-default\\\">\\r\\n      <div class=\\\"panel-body\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n   \\r\\n            <div show.bind=\\\"!helpTicketSelected\\\" class=\\\"col-lg-12\\\">\\r\\n                <div show.bind=\\\"nohelpTickets\\\" class=\\\"bottomMargin leftMargin\\\">\\r\\n                    <h4>You have no open help tickets</h4>\\r\\n                    <span class=\\\"checkbox marginLeft\\\" style=\\\"white-space: nowrap;display:inline;\\\">\\r\\n\\t\\t\\t\\t\\t\\t<label>\\r\\n\\t\\t\\t\\t\\t\\t  <input checked.bind=\\\"isCheckedCurrent\\\" change.trigger=\\\"retrieveClosedHelpTickets()\\\" type=\\\"checkbox\\\"> View closed help tickets\\r\\n\\t\\t\\t\\t\\t\\t</label>\\r\\n\\t\\t\\t\\t\\t</span>\\r\\n                </div>\\r\\n            --><div>\\r\\n                <compose show.bind=\\\"!nohelpTickets\\\" view=\\\"./components/viewHTTable.html\\\"></compose>\\r\\n            </div> \\r\\n           \\r\\n            <div show.bind=\\\"helpTicketSelected\\\" class=\\\"col-lg-12\\\">\\r\\n                <compose view=\\\"./components/viewHTForm.html\\\"></compose>\\r\\n            </div> \\r\\n     <!--\\r\\n        </div> \\r\\n      </div> \\r\\n    -->\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\n    <compose view=\\\"./components/banner.html\\\"></compose>\\n\\n    <div class=\\\"fluid-container\\\">\\n\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-lg-3 col-lg-offset-1\\\">\\n                <div class=\\\"bigMarginTop leftMargin\\\">\\n                    <compose view=\\\"./components/uccInformation.html\\\"></compose>\\n                </div>\\n            </div>\\n           \\n            <div class=\\\"col-lg-3 col-md-11 col-sm-11 bigLeftMargin\\\">\\n                <h2 show.bind=\\\"siteinfo.siteArray | infoFilter:'NEWS':true\\\" class=\\\"underline topMargin\\\">UCC and UA News</h2>\\n                <img style=\\\"height: 150px; width: 100%; display: block;\\\" src=\\\"${config.IMG_DOWNLOAD_URL}img/uaucc.png\\\" alt=\\\"Card image\\\">\\n                <div repeat.for=\\\"item of siteinfo.siteArray | infoFilter:'NEWS'\\\">\\n                    <compose view=\\\"./components/newsItem.html\\\"></compose>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"col-lg-3 col-md-11 col-sm-11  bigLeftMargin\\\">\\n                <h2 class=\\\"underline bottomMargin\\\">Useful Links</h2>\\n                <img style=\\\"height: 150px; width: 100%; display: block;\\\" src=\\\"${config.IMG_DOWNLOAD_URL}img/ua2.jpg\\\" alt=\\\"Card image\\\">\\n                <div repeat.for=\\\"item of siteinfo.siteArray | infoFilter:'OLNK'\\\">\\n                    <compose view=\\\"./components/homePageLinks.html\\\"></compose>\\n                </div>\\n            </div>\\n\\n        </div>\\n\\n    </div>\\n</template>\\n\";\n// Exports\nexport default code;"],"names":[],"sourceRoot":""}