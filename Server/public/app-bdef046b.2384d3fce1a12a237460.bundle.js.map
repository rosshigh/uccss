{"version":3,"file":"app-bdef046b.2384d3fce1a12a237460.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AASA;AAAA;AAPA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;ACrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAOA;AAAA;AALA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAUA;AAAA;AARA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;AC7kDA;AACA;AACA;AACA;;;;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;;;;ACHA;AACA;AACA;AACA","sources":["webpack://uccss-old-new/./src/modules/tech/requests/apjRequests.js","webpack://uccss-old-new/./src/modules/tech/requests/archiveClientRequests.js","webpack://uccss-old-new/./src/modules/tech/requests/assignments.js","webpack://uccss-old-new/./src/modules/tech/requests/apjRequests.html","webpack://uccss-old-new/./src/modules/tech/requests/archiveClientRequests.html","webpack://uccss-old-new/./src/modules/tech/requests/assignments.html"],"sourcesContent":["import { inject } from 'aurelia-framework';\r\nimport { CommonDialogs } from '../../../resources/dialogs/common-dialogs';\r\nimport { DataTable } from '../../../resources/utils/dataTable';\r\nimport { Systems } from '../../../resources/data/systems';\r\nimport { Products } from '../../../resources/data/products';\r\nimport { APJClientRequests } from '../../../resources/data/apjClientRequests';\r\nimport { AppConfig } from '../../../config/appConfig';\r\nimport { Utils } from '../../../resources/utils/utils';\r\nimport { People } from '../../../resources/data/people';\r\nimport Validation from '../../../resources/utils/validation';\r\n\r\nimport moment from 'moment';\r\n\r\n@inject(AppConfig, Validation, CommonDialogs, DataTable, Utils, Products, Systems, People, APJClientRequests)\r\nexport class APJRequests {\r\n    requestSelected = 'table';\r\n    title = \"Tech Staff APJ Client Assignments\";\r\n    isCheckedAssigned = true;\r\n    noRequests = true;\r\n    sortProperty = '';\r\n    sortDirection;\r\n\r\n    constructor(config, validation, dialog, datatable, utils, products, systems, people, requests) {\r\n        this.config = config;\r\n        this.validation = validation;\r\n        this.validation.initialize(this);\r\n        this._setUpValidation();\r\n        this.dataTable = datatable;\r\n        this.dataTable.initialize(this);\r\n        this.utils = utils;\r\n        this.products = products;\r\n        this.clientRequests = requests;\r\n        this.systems = systems;\r\n        this.people = people;\r\n        this.dialog = dialog;\r\n\r\n        this.userObj = JSON.parse(sessionStorage.getItem('user'));\r\n    };\r\n\r\n    async attached() {\r\n        $('[data-toggle=\"tooltip\"]').tooltip();\r\n        this.initialLoaded = true;\r\n\r\n        await this.getRequests();\r\n        $('#loading').hide();\r\n        setInterval(() => {\r\n            if (this.requestSelected == 'table') this.getRequests();\r\n        }, this.refreshInterval * 60 * 1000);\r\n    }\r\n\r\n    async activate() {\r\n        let responses = await Promise.all([\r\n            this.products.getProductsArray('?filter=[and]active|eq|true:apj|eq|true&order=name', true),\r\n            this.systems.getSystemsArray('?filter=apj|eq|true', true),\r\n            this.config.getConfig(true)\r\n        ]);\r\n        let uccRoles = \"\";\r\n        this.config.ROLES.forEach(item => {\r\n            if (item.UCConly) uccRoles += item.role + \":\";\r\n        });\r\n        this.people.getUCCStaff(uccRoles);\r\n        this.initialLoaded = false;\r\n        this.refreshInterval = this.config.CLIENT_REQUEST_REFRESH_INTERVAL;\r\n    }\r\n\r\n    async getRequests() {\r\n        this.isCheckedAssigned = true;\r\n        await this.filterInAssigned();\r\n        this.clearFilters();\r\n    }\r\n\r\n    async refresh() {\r\n        $('#loading').show();\r\n        await this.getRequests();\r\n        $('#loading').hide();\r\n        this.spinnerHTML = \"\";\r\n    }\r\n\r\n    async filterInAssigned() {\r\n\r\n        this.requiredDateFilterValue = \"\";\r\n        this.createdDateFilterValue = \"\";\r\n        this.requestStatusFilter = \"\";\r\n        this.productFilterValue = \"\";\r\n        this.courseFilterValue = \"\";\r\n        this.helpTicketTypeFilterValue = \"\";\r\n        this.institutionFilterValue = \"\";\r\n        if (this.isCheckedAssigned) {\r\n            $('#loading').show();\r\n            await this.clientRequests.getClientRequestsDetailsArray('?filter=[and]sessionId|eq|' + this.selectedSession \r\n                + ':requestStatus|in|' + this.config.UNASSIGNED_REQUEST_CODE + '$' + this.config.UPDATED_REQUEST_CODE + '$' + this.config.CUSTOMER_ACTION_REQUEST_CODE, true);\r\n            $('#loading').hide();\r\n            if (this.clientRequests.requestsDetailsArray && this.clientRequests.requestsDetailsArray.length) {\r\n                this.noRequests = false;\r\n                this.clientRequests.requestsDetailsArray.forEach(item => {\r\n                    if (item.requestId && item.requestId.courseId === null) item.requestId.courseId = { _id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME };\r\n                })\r\n                this.dataTable.updateArray(this.clientRequests.requestsDetailsArray, 'requiredDate', -1);\r\n            } else {\r\n                this.noRequests = true;\r\n                this.displayArray = new Array();\r\n            }\r\n\r\n        } else {\r\n            $('#loading').show();\r\n            await this.clientRequests.getClientRequestsDetailsArray('?filter=sessionId|eq|' + this.selectedSession, true);\r\n            $('#loading').hide();\r\n            this.clientRequests.requestsDetailsArray.forEach(item => {\r\n                if (item.requestId && item.requestId.courseId === null) item.requestId.courseId = { _id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME };\r\n            })\r\n            this.dataTable.updateArray(this.clientRequests.requestsDetailsArray, 'requiredDate', -1);\r\n            if(this.clientRequests.requestsDetailsArray.length) this.noRequests = false;\r\n        }\r\n\r\n    }\r\n\r\n\r\n}","import {inject} from 'aurelia-framework';\r\nimport {DataTable} from '../../../resources/utils/dataTable';\r\nimport {Sessions} from '../../../resources/data/sessions';\r\nimport {Systems} from '../../../resources/data/systems';\r\nimport {Products} from '../../../resources/data/products';\r\nimport {ClientRequests} from '../../../resources/data/clientRequests';\r\nimport {AppConfig} from '../../../config/appConfig';\r\nimport {Utils} from '../../../resources/utils/utils';\r\nimport {People} from '../../../resources/data/people';\r\n\r\nimport moment from 'moment';\r\n\r\n@inject( AppConfig,   DataTable, Utils, Sessions, Products, Systems, People, ClientRequests)\r\nexport class ArchiveRequests {\r\n\trequestSelected = false;\r\n\ttitle=\"Tech Staff Client Assignments\";\r\n\tspinnerHTML = \"\";\r\n\tisCheckedAssigned = true;\r\n\r\n    constructor( config, datatable, utils, sessions, products, systems, people, requests) {\r\n        this.config = config;\r\n\r\n        this.dataTable = datatable;\r\n        this.dataTable.initialize(this);\r\n        this.utils = utils;\r\n        this.sessions = sessions;\r\n        this.products = products;\r\n        this.clientRequests = requests;\r\n        this.systems = systems;\r\n        this.people = people;\r\n\r\n         this.userObj = JSON.parse(sessionStorage.getItem('user'));\r\n\t};\r\n\t\t\r\n\tattached(){\r\n        $('[data-toggle=\"tooltip\"]').tooltip();\r\n    }\r\n    //?order=startDate:DSC',\r\n    \r\n    async activate() { \r\n        let responses = await Promise.all([\r\n            this.sessions.getSessionsArray('?filter=sessionStatus|eq|Closed&order=startDate:DSC', true),\r\n            this.products.getProductsArray('?order=name'),\r\n            this.systems.getSystemsArray(),\r\n            this.config.getConfig()\r\n        ]);\r\n         let uccRoles = \"\";\r\n\t\tthis.config.ROLES.forEach(item => {\r\n\t\t\tif(item.UCConly) uccRoles += item.role + \":\";\r\n        });\r\n        this.people.getUCCStaff(uccRoles);\r\n        \r\n        this.selectedSession = this.sessions.sessionsArray[0]._id;\r\n        this.getRequests();\r\n\t}\r\n\t\r\n\tasync getRequests() {\r\n        if (this.selectedSession) {\r\n            this.sessions.selectSessionById(this.selectedSession);\r\n            await this.clientRequests.getClientRequestsDetailsArray('?filter=sessionId|eq|' + this.selectedSession, true);\r\n            if(this.clientRequests.requestsDetailsArray && this.clientRequests.requestsDetailsArray.length){\r\n                this.clientRequests.requestsDetailsArray.forEach(item => {\r\n                    if(item.requestId && item.requestId.courseId === null) item.requestId.courseId = {_id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME};\r\n                })\r\n                this.dataTable.updateArray(this.clientRequests.requestsDetailsArray);\r\n            } else {\r\n                this.displayArray = new Array();\r\n            }\r\n        } else {\r\n            this.displayArray = new Array();\r\n        }\r\n        // this.clearFilters();\r\n\t}\r\n\r\n\tasync refresh() {\r\n        this.spinnerHTML = \"<i class='fa fa-spinner fa-spin'></i>\";\r\n        await this.getRequests();\r\n        this.spinnerHTML = \"\";\r\n    }\r\n\r\n    async selectARequest(index,el, request){\r\n      let response = await this.clientRequests.getRequestDetail(request._id);\r\n      if (!response.error) {\r\n          this.selectedRequestDetail = response;\r\n          if (this.selectedRequestDetail.requestId && this.selectedRequestDetail.requestId.courseId === null) this.selectedRequestDetail.requestId.courseId = { _id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME };\r\n          this.originalRequestDetail = this.utils.copyObject(this.selectedRequestDetail);\r\n      }\r\n\r\n    //     this.editIndex = this.dataTable.getOriginalIndex(index);\r\n    //     this.selectedRequestDetail = this.utils.copyObject(request);\r\n\t\t// this.productId = this.selectedRequestDetail.productId._id;\r\n    //     this.products.selectedProductFromId(this.productId);\r\n    //     if(this.selectedRequestDetail.assignments && this.selectedRequestDetail.assignments.length > 0) this.systems.selectedSystemFromId(this.selectedRequestDetail.assignments[0].systemId);\r\n    //     this.idsRequired = parseInt(this.selectedRequestDetail.requestId.graduateIds) + parseInt(this.selectedRequestDetail.requestId.undergradIds);\r\n    //     this.totalIdsAssigned = 0;\r\n    //     if(this.selectedRequestDetail.assignments && this.selectedRequestDetail.assignments.length > 0){\r\n    //         this.selectedRequestDetail.assignments.forEach(item => {\r\n    //             this.totalIdsAssigned += item.idsAssigned;\r\n    //         })\r\n    //     }\r\n    //     this.idsRemaining = this.idsRequired - this.totalIdsAssigned > 0 ?  this.idsRequired - this.totalIdsAssigned : 0;\r\n        this.requestSelected = true;\r\n\r\n        if (this.selectedRow) this.selectedRow.children().removeClass('info');\r\n        this.selectedRow = $(el.target).closest('tr');\r\n        this.selectedRow.children().addClass('info')\r\n    }\r\n\r\n    back(){\r\n        this.requestSelected = false;\r\n    }\r\n    \r\n    customNameFilter(value, item, context){\r\n        return item.requestId && item.requestId.personId.fullName.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    }\r\n\r\n    statusCustomFilter(value, item, context){\r\n        if(item.requestStatus == value) return false;\r\n        return true;\r\n    }\r\n\r\n    institutionCustomFilter(value, item, context){\r\n        return item.requestId && item.requestId.institutionId.name.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    }\r\n\r\n    courseCustomFilter(value, item, context){\r\n        return item.requestId && item.requestId.courseId.name.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    }\r\n\r\n    customProductNameFilter(value, item, context){\r\n        for(let i = 0; i < context.products.productsArray.length; i++){\r\n            if(item.productId._id == context.products.productsArray[i]._id) {\r\n                return context.products.productsArray[i].name.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    customCourseSorter(sortProperty, sortDirection, sortArray, context){ \r\n        return sortArray.sort((a, b) => {\r\n            if(a['requestId']['courseId']['name'] && b['requestId']['courseId']['name']) {\r\n                var result = (a['requestId']['courseId']['name'] < b['requestId']['courseId']['name']) ? -1 : (a['requestId']['courseId']['name'] > b['requestId']['courseId']['name']) ? 1 : 0;\r\n            } else {\r\n                var result = -1;\r\n            }\r\n            return result * sortDirection;\r\n        });\r\n    }\r\n\r\n    customInstitutionsSorter(sortProperty, sortDirection, sortArray, context){ \r\n        return sortArray.sort((a, b) => {\r\n            if(a['requestId']['institutionId']['name'] && b['requestId']['institutionId']['name']) {\r\n                var result = (a['requestId']['institutionId']['name'] < b['requestId']['institutionId']['name']) ? -1 : (a['requestId']['institutionId']['name'] > b['requestId']['institutionId']['name']) ? 1 : 0;\r\n            } else {\r\n                 var result = -1;\r\n            }\r\n            return result * sortDirection;\r\n        });\r\n    }\r\n\r\n    customPersonSorter(sortProperty, sortDirection, sortArray, context){ \r\n        return sortArray.sort((a, b) => {\r\n            if(a['requestId']['personId']['lastName'] && b['requestId']['personId']['lastName']){\r\n                var result = (a['requestId']['personId']['lastName'] < b['requestId']['personId']['lastName']) ? -1 : (a['requestId']['personId']['lastName'] > b['requestId']['personId']['lastName']) ? 1 : 0;\r\n            } else {\r\n                var result = -1;\r\n            }\r\n            return result * sortDirection;\r\n        });\r\n    }\r\n\r\n    customRequestStatusSorter(sortProperty, sortDirection, sortArray, context){ \r\n        return sortArray.sort((a, b) => {\r\n\t\t\tvar result = (a[sortProperty] < b[sortProperty]) ? -1 : (a[sortProperty] > b[sortProperty]) ? 1 : 0;\r\n\t\t\treturn result * sortDirection;\r\n\t\t});\r\n    }\r\n\r\n    downloadExcel(){ \r\n      let csvContent = \"data:text/csv;charset=utf-8;,Due,Created,IDs,Product,Course,Faculty,Institution\";\r\n      csvContent += \"\\r\\n\";\r\n      this.dataTable.baseArray.forEach(item => {\r\n        let graduateIds = item.requestId.graduateIds === null ? 0 : item.requestId.graduateIds;\r\n        let undergradIds = item.requestId.undergradIds === null ? 0 : item.requestId.undergradIds; \r\n        let ids =  parseInt(graduateIds) + parseInt(undergradIds);\r\n\r\n          csvContent += item.requiredDate + ',';\r\n          csvContent += item.createdDate + ',';\r\n          csvContent += ids + ',';\r\n          csvContent += item.productId.name + ',';\r\n          csvContent += item.requestId.courseId.name + ',';\r\n          csvContent += item.requestId.personId.fullName + ',';\r\n          csvContent += item.requestId.institutionId.name + ',';\r\n\r\n          csvContent +=  \"\\r\\n\";\r\n      })\r\n      var encodedUri = encodeURI(csvContent);\r\n      var link = document.createElement(\"a\");\r\n      link.setAttribute(\"href\", encodedUri);\r\n      link.setAttribute(\"download\", \"requestsArchive.csv\");\r\n      document.body.appendChild(link); \r\n\r\n      link.click();\r\n  }\r\n\r\n\t\r\n}\r\n","import { inject } from 'aurelia-framework';\r\nimport { CommonDialogs } from '../../../resources/dialogs/common-dialogs';\r\nimport { DataTable } from '../../../resources/utils/dataTable';\r\nimport { Sessions } from '../../../resources/data/sessions';\r\nimport { Systems } from '../../../resources/data/systems';\r\nimport { Products } from '../../../resources/data/products';\r\nimport { ClientRequests } from '../../../resources/data/clientRequests';\r\nimport { AppConfig } from '../../../config/appConfig';\r\nimport { Utils } from '../../../resources/utils/utils';\r\nimport { People } from '../../../resources/data/people';\r\nimport Validation from '../../../resources/utils/validation';\r\n\r\nimport moment from 'moment';\r\n\r\n@inject(AppConfig, Validation, CommonDialogs, DataTable, Utils, Sessions, Products, Systems, People, ClientRequests)\r\nexport class Assignments {\r\n    requestSelected = 'table';\r\n    title = \"Tech Staff Client Assignments\";\r\n    spinnerHTML = \"\";\r\n    isCheckedAssigned = true;\r\n    noRequests = true;\r\n    sortProperty = '';\r\n    sortDirection;\r\n\r\n    constructor(config, validation, dialog, datatable, utils, sessions, products, systems, people, requests) {\r\n        this.config = config;\r\n        this.validation = validation;\r\n        this.validation.initialize(this);\r\n        this._setUpValidation();\r\n        this.dataTable = datatable;\r\n        this.dataTable.initialize(this);\r\n        this.utils = utils;\r\n        this.sessions = sessions;\r\n        this.products = products;\r\n        this.clientRequests = requests;\r\n        this.systems = systems;\r\n        this.people = people;\r\n        this.dialog = dialog;\r\n\r\n        this.userObj = JSON.parse(sessionStorage.getItem('user'));\r\n    };\r\n\r\n    async attached() {\r\n        $('[data-toggle=\"tooltip\"]').tooltip();\r\n        this.initialLoaded = true;\r\n\r\n        await this.getRequests();\r\n        $('#loading').hide();\r\n        setInterval(() => {\r\n            if( this.requestSelected == 'table') this.getRequests();\r\n        }, this.refreshInterval * 60 * 1000);\r\n    }\r\n\r\n    async activate() {\r\n        let responses = await Promise.all([\r\n            this.sessions.getSessionsArray('?filter=[in]sessionStatus[list]Active:Requests&order=sortOrder', true),\r\n            this.products.getProductsArray('?filter=active|eq|true&order=name', true),\r\n            this.systems.getSystemsArray('', true),\r\n            this.config.getConfig(true)\r\n        ]);\r\n        let uccRoles = \"\";\r\n        this.config.ROLES.forEach(item => {\r\n            if (item.UCConly) uccRoles += item.role + \":\";\r\n        });\r\n        this.people.getUCCStaff(uccRoles);\r\n        this.manualMode = localStorage.getItem('manualMode') ? localStorage.getItem('manualMode') == \"true\" : false;\r\n        this.unassignedOnly = localStorage.getItem('unassignedOnly') ? localStorage.getItem('unassignedOnly') == \"true\" : false;\r\n        this.facultyDetails = localStorage.getItem(\"facultyDetails\") ? localStorage.getItem(\"facultyDetails\") == \"true\" : false;;\r\n        this.numFacultyIDs = this.config.DEFAULT_FACULTY_IDS;\r\n        this.selectedSession = this.sessions.sessionsArray[0]._id;\r\n        this.initialLoaded = false;\r\n        this.refreshInterval = this.config.CLIENT_REQUEST_REFRESH_INTERVAL;\r\n    }\r\n\r\n    async getRequests() {\r\n        if (this.selectedSession) {\r\n            this.isCheckedAssigned = true;\r\n            this.sessions.selectSessionById(this.selectedSession);\r\n            await this.filterInAssigned();\r\n        } else {\r\n            this.displayArray = new Array();\r\n        }\r\n        this.clearFilters();\r\n    }\r\n\r\n    async refresh() {\r\n        $('#loading').show();\r\n        await this.getRequests();\r\n        $('#loading').hide();\r\n        this.spinnerHTML = \"\";\r\n    }\r\n\r\n    async editRequest(index, request) {\r\n        this.editIndex = index;\r\n        this.selectedRequestDetail = this.utils.copyObject(request);\r\n        await this.products.selectedProductFromId(this.selectedRequestDetail.productId._id);\r\n        await this.people.getCoursesArray(true, '?filter=personId|eq|' + this.selectedRequestDetail.requestId.personId._id);\r\n        this.editStartDate = this.selectedRequestDetail.requestId.startDate;\r\n        this.originalRequestDetail = this.utils.copyObject(this.selectedRequestDetail);\r\n\r\n        this.requestSelected = 'edit';\r\n    }\r\n\r\n    backEdit() {\r\n        this.requestSelected = 'table';\r\n    }\r\n\r\n    async saveEdit() {\r\n        var email = {};\r\n        // this.buildAuditDetail();\r\n        this.clientRequests.setTheSelectedRequestDetail(this.selectedRequestDetail);\r\n        let serverResponse = await this.clientRequests.saveRequestDetail();\r\n        if (!serverResponse.error) {\r\n          // this.clientRequests.setSelectedRequest(this.electedRequestDetail.requestId);\r\n          // let serverResponse = await this.clientRequests.saveRequest();\r\n            this.utils.showNotification(\"The request was updated\");\r\n            this.dataTable.updateArrayMaintainFilters(this.clientRequests.requestsDetailsArray);\r\n            this.reSort();\r\n            // this.dataTable.applyFilters();\r\n            // await this.filterInAssigned();\r\n            this._cleanUp();\r\n        }\r\n\r\n    }\r\n\r\n    // buildAuditDetail(){\r\n    //     var obj = this.selectedRequestDetail;\r\n    //     if(obj.productId != this.originalRequestDetail.productId._id){\r\n    //         this.selectedRequestDetail.requestId.audit.push({\r\n    //             property: \"productId\",\r\n    //             eventDate: new Date(),\r\n    //             oldValue: this.originalRequestDetail.productId._id,\r\n    //             newValue: obj.productId._id,\r\n    //             personId: this.userObj._id\r\n    //         })\r\n    //     }\r\n    //     if(obj.requestStatus != this.originalRequestDetail.requestStatus){\r\n    //         this.selectedRequestDetail.requestId.audit.push({\r\n    //             property: 'requestStatus',\r\n    //             eventDate: new Date(),\r\n    //             oldValue: this.originalRequestDetail.requestStatus,\r\n    //             newValue: obj.requestStatus,\r\n    //             personId: this.userObj._id\r\n    //         })\r\n    //     }\r\n    //     if(obj.requestId.undergradIds != this.originalRequestDetail.requestId.undergradIds){\r\n    //         this.selectedRequestDetail.requestId.audit.push({\r\n    //             property: \"undergradIds\",\r\n    //             eventDate: new Date(),\r\n    //             oldValue: this.originalRequestDetail.requestId.undergradIds,\r\n    //             newValue: obj.requestId.undergradIds,\r\n    //             personId: this.userObj._id\r\n    //         })\r\n    //     }\r\n    //     if(obj.requestId.graduateIds != this.originalRequestDetail.requestId.graduateIds){\r\n    //         this.selectedRequestDetail.requestId.audit.push({\r\n    //             property: \"graduateIds\",\r\n    //             eventDate: new Date(),\r\n    //             oldValue: this.originalRequestDetail.requestId.graduateIds,\r\n    //             newValue: obj.requestId.graduateIds,\r\n    //             personId: this.userObj._id\r\n    //         })\r\n    //     }\r\n    //     if(obj.requestId.startDate != this.originalRequestDetail.requestId.startDate){\r\n    //         this.selectedRequestDetail.requestId.audit.push({\r\n    //             property: 'startDate',\r\n    //             eventDate: new Date(),\r\n    //             oldValue: this.originalRequestDetailrequestId.startDate,\r\n    //             newValue: obj.requestId.startDate,\r\n    //             personId: this.userObj._id\r\n    //         })\r\n    //     }\r\n    //     if(obj.requestId.endDate != this.originalRequestDetail.requestId.endDate){\r\n    //         this.selectedRequestDetail.requestId.audit.push({\r\n    //             property: 'endDate',\r\n    //             eventDate: new Date(),\r\n    //             oldValue: this.originalRequestDetail.requestId.endDate,\r\n    //             newValue: obj.requestId.endDate,\r\n    //             personId: this.userObj._id\r\n    //         })\r\n    //     }\r\n    //     if(obj.requiredDate != this.originalRequestDetail.requiredDate){\r\n    //         this.selectedRequestDetail.requestId.audit.push({\r\n    //             property: \"requiredDate\",\r\n    //             eventDate: new Date(),\r\n    //             oldValue: this.originalRequestDetail.requiredDate,\r\n    //             newValue: obj.requiredDate,\r\n    //             personId: this.userObj._id\r\n    //         })\r\n    //     }\r\n    //      if(obj.requestId.courseId != this.originalRequestDetail.requestId.courseId){\r\n    //         this.selectedRequestDetail.requestId.audit.push({\r\n    //             property: 'courseId',\r\n    //             eventDate: new Date(),\r\n    //             oldValue: this.originalRequestDetail.requestId.courseId,\r\n    //             newValue: obj.requestId.courseId,\r\n    //             personId: this.userObj._id\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // /*****************************************************************************************************\r\n    //  * User selected a requests table\r\n    //  * index - index of the item selected\r\n    //  * el - event object\r\n    //  * request - the selected request object\r\n    //  ****************************************************************************************************/\r\n    async selectARequest(index, el, request) {\r\n        this.sendEmail = this.config.SEND_EMAILS;\r\n        this.selectedRequestDetail = {};\r\n        let response = await this.clientRequests.getRequestDetail(request._id);\r\n        if (!response.error) {\r\n            this.selectedRequestDetail = response;\r\n            if (this.selectedRequestDetail.requestId && this.selectedRequestDetail.requestId.courseId === null) this.selectedRequestDetail.requestId.courseId = { _id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME };\r\n            this.originalRequestDetail = this.utils.copyObject(this.selectedRequestDetail);\r\n        }\r\n        //Initiate temp arrays to hold selected clients and assignment details\r\n        this.profileRequest = undefined;\r\n        this.forceManual = false;\r\n        this.manualMode = localStorage.getItem('manualMode') ? localStorage.getItem('manualMode') == \"true\" : false;\r\n\r\n        //Initiate interface flags\r\n        this.requestSelected = 'form';\r\n        if (this.manualMode) $(this.proposedIDRange).focus();\r\n\r\n        //Retrieve relevant data\r\n        this.editIndex = this.dataTable.getOriginalIndex(index);\r\n        this.productId = this.selectedRequestDetail.productId._id;\r\n        this.products.selectedProductFromId(this.productId);\r\n\r\n        this.provisionalAssignment = this.selectedRequestDetail.requestStatus == this.config.PROVISIONAL_REQUEST_CODE;\r\n        this.oldRequest = this.utils.copyObject(this.selectedRequestDetail);\r\n        this.productSystems = new Array();\r\n        if (!this.products.selectedProduct.systems[0]) {\r\n            this.utils.showNotification(\"You need to assign a system to this product before you can assign this request\",'warning');\r\n        } else {\r\n            await this.getProductSystems();\r\n        }\r\n\r\n        if (this.systemConfigured) {\r\n            this.selectedSystemIndex = 0;\r\n            setTimeout(() => { this.systemSelected(); }, 100);\r\n        }\r\n\r\n        this.clientRequired();\r\n\r\n        if (this.selectedRow) this.selectedRow.children().removeClass('info');\r\n        this.selectedRow = $(el.target).closest('tr');\r\n        this.selectedRow.children().addClass('info');\r\n    }\r\n\r\n    async getProductSystems() {\r\n        this.systemConfigured = false;\r\n        this.productSystems = new Array();\r\n        var productSystemsSIDs = \"\";\r\n        this.products.selectedProduct.systems.forEach(item => {\r\n            let delimiterChar = productSystemsSIDs.length ? \":\" : \"\";\r\n            productSystemsSIDs += delimiterChar + item.sid;\r\n        });\r\n        let response = await this.systems.getConfiguredProductSystems(productSystemsSIDs);\r\n        if (!response.error) {\r\n            response.forEach(item => {\r\n                if (item.sessions.indexOf(this.sessions.selectedSession.session) > -1 && item.active) this.productSystems.push(item);\r\n            });\r\n        }\r\n        if (this.productSystems != null && this.productSystems.length) this.systemConfigured = true;\r\n        this.productSystems = this.productSystems.sort((a, b) => {\r\n            return (a['sid'] < b['sid']) ? -1 : (a['sid'] > b['sid']) ? 1 : 0;\r\n        });\r\n    }\r\n\r\n    clientRequired() {\r\n        //Parse id templates into an array\r\n        this.studentIDTemplates = this.products.selectedProduct.defaultStudentIdPrefix ? this.products.selectedProduct.defaultStudentIdPrefix.split(\":\") : new Array();\r\n        this.facultyIDTemplates = this.products.selectedProduct.defaultFacultyIdPrefix ? this.products.selectedProduct.defaultFacultyIdPrefix.split(\":\") : new Array();\r\n\r\n        if (this.studentIDTemplates.length === 0) {\r\n            this.forceManual = true;\r\n            this.manualMode = true;\r\n        }\r\n\r\n        //Booleans to determine whether the id templates exist: they are present, contain a wildcard and, for faculty ids, the request isn't a sandbox\r\n        this.studentIDTemplateAvailable = this.studentIDTemplates.length > 0 && this.products.selectedProduct.defaultStudentIdPrefix.indexOf(this.config.ID_WILDCARD) != -1;\r\n        this.facultyIDTemplateAvailable = this.facultyIDTemplates.length > 0\r\n            && this.products.selectedProduct.defaultFacultyIdPrefix.indexOf(this.config.ID_WILDCARD) != -1\r\n            && this.selectedRequestDetail.requestId.courseId._id !== this.config.SANDBOX_ID;\r\n\r\n        //Check if the request is a sandbox request\r\n        if (this.selectedRequestDetail.requestId.courseId._id === this.config.SANDBOX_ID) {\r\n            this.idBuffer = localStorage.getItem('idSandboxBuffer') ? localStorage.getItem('idSandboxBuffer') : this.config.SANDBOX_ID_BUFFER;\r\n            this.numberOfIds = localStorage.getItem('sandBoxIDs') ? localStorage.getItem('sandBoxIDs') : this.config.SANDBOX_ID_COUNT;\r\n            this.sandBoxOnly = false;\r\n        } else {\r\n            this.idBuffer = localStorage.getItem('idBuffer') ? localStorage.getItem('idBuffer') : this.config.REGULAR_ID_BUFFER;\r\n            this.selectedRequestDetail.requestId.graduateIds = this.selectedRequestDetail.requestId.graduateIds === null ? 0 : this.selectedRequestDetail.requestId.graduateIds;\r\n            this.selectedRequestDetail.requestId.undergradIds = this.selectedRequestDetail.requestId.undergradIds === null ? 0 : this.selectedRequestDetail.requestId.undergradIds;\r\n            this.numberOfIds = parseInt(this.selectedRequestDetail.requestId.graduateIds)\r\n                + parseInt(this.selectedRequestDetail.requestId.undergradIds);\r\n            this.sandBoxOnly = false;\r\n        }\r\n\r\n        //Check to see if an assignment has already been made\r\n        if (!this.selectedRequestDetail.assignments || this.selectedRequestDetail.assignments.length == 0) {\r\n            //No assignment has been made\r\n            this.selectedRequestDetail.techComments = this.products.selectedProduct.productInfo ? this.products.selectedProduct.productInfo : \"\";\r\n            this.idsRequired = parseInt(this.numberOfIds) + parseInt(this.idBuffer);\r\n            this.idsRemaining = this.idsRequired;\r\n            this.existingRequest = false;\r\n            this.totalIdsAssigned = 0;\r\n            this.idsAssigned = 0;\r\n            // this.assignmentDetails = new Array();\r\n        } else {\r\n            //An assignment has already been made\r\n            this.existingRequest = true;\r\n            this.unassignedOnly = false;\r\n            this.idsAssigned = this.selectedRequestDetail.idsAssigned;\r\n            this.idsRequired = parseInt(this.numberOfIds)\r\n            this.numberOfIds = this.numberOfIds - this.idsAssigned > 0 ? this.numberOfIds - this.idsAssigned : 0;\r\n            this.totalIdsAssigned = this.idsAssigned;\r\n            this.idsRemaining = this.idsRequired - this.idsAssigned > 0 ? this.idsRequired - this.idsAssigned : 0;\r\n            // this.assignmentDetails = this.selectedRequestDetail.assignments;\r\n            // this.findAssignedClients(); \r\n        }\r\n\r\n        this.assignmentDetailIndex = -1;\r\n\r\n        this.calcLastID();\r\n    }\r\n\r\n    // /*****************************************************************************************************\r\n    //  * Calculate the last id when a client is selected\r\n    //  ****************************************************************************************************/\r\n    calcLastID() {\r\n        //If the requested ids are more than the product supprts\r\n        if (this.firstID + this.idsRemaining > this.lastIDAvailable) {\r\n            //set the last id to the last id supported by the product\r\n            this.lastID = this.lastIDAvailable;\r\n        } else {\r\n            //set the last id to the first id plus the ids requested\r\n            this.lastID = parseInt(this.firstID) + parseInt(this.idsRemaining);\r\n        }\r\n        //Save the last id\r\n        this.oldLastID = this.lastID;\r\n        //   if(this.firstID > this.lastIDAvailable) return\r\n    }\r\n\r\n    // /*****************************************************************************************************\r\n    //  * User selected a client in the client list\r\n    //  * index - index of the item selected\r\n    //  * el - event object\r\n    //  * client - the selected client object\r\n    //  ****************************************************************************************************/\r\n    selectClient(index, client, el) {\r\n        if (this.deleteClicked) {\r\n            this.deleteProposedClient(this.assignmentDetailIndex);\r\n            this.deleteClicked = false;\r\n            return;\r\n        }\r\n\r\n        for (let k = 0; k < this.selectedRequestDetail.assignments.length; k++) {\r\n            if (this.selectedRequestDetail.assignments[k].client == client.client \r\n              && this.selectedRequestDetail.assignments[k].systemId == client.systemId) return;\r\n        }\r\n\r\n        let message, okToProcess = true;\r\n        //Don't allow a client to be selected if there are no ids to be assigned\r\n        // if (!this.idsRemaining > 0) {\r\n        //     this.utils.showNotification(\"There are no more ids required for this request\");\r\n        //     return;\r\n        // }\r\n        //Make sure the selected client is compatible with the selected request\r\n        if (this.selectedRequestDetail.requestId.courseId._id === this.config.SANDBOX_ID && client.clientStatus != this.config.SANDBOX_CLIENT_CODE) {\r\n            message = \"The request is for a sandbox and the client isn't a sandbox client.  Are you sure you want to assign it?\";\r\n        }\r\n        if (this.selectedRequestDetail.requestId.courseId._id != this.config.SANDBOX_ID && client.clientStatus == this.config.SANDBOX_CLIENT_CODE) {\r\n            message = \"The request is for a regular course and the client is a sandbox client.  Are you sure you want to assign it?\";\r\n        }\r\n\r\n        if (message) {\r\n            return this.dialog.showMessage(\r\n                message,\r\n                \"Confirm Assignment\",\r\n                ['Yes', 'No']\r\n            ).whenClosed(response => {\r\n                if (response.wasCancelled) {\r\n                    okToProcess = false;\r\n                } else {\r\n                    this.processClient(index, client, el);\r\n                }\r\n            });\r\n        } else {\r\n            this.processClient(index, client, el);\r\n        }\r\n    }\r\n\r\n    updateClientAssignments() {\r\n        this.selectedSystem.clients[this.selectedClientIndex].assignments[this.clientSelectedIndex].studentIDRange = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].studentUserIds;\r\n    }\r\n\r\n    updateClientFacultyAssignments() {\r\n        this.selectedSystem.clients[this.selectedClientIndex].assignments[this.clientSelectedIndex].facultyIDRange = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].facultyUserIds;\r\n    }\r\n\r\n    processClient(index, client, el) {\r\n        if (client.manual) {\r\n            this.manualMode = true;\r\n            this.forceManual = true;\r\n        } else {\r\n            this.forceManual = false;\r\n            this.manualMode = localStorage.getItem('manualMode') ? localStorage.getItem('manualMode') == \"true\" : false;\r\n        }\r\n\r\n        this.selectedClient = client;\r\n        this.setClientIndex(client.client);\r\n\r\n        if (this.manualMode) $(this.proposedIDRange).focus();\r\n        this.lastIDAvailable = this.products.selectedProduct.lastAllowableId ? parseInt(this.products.selectedProduct.lastAllowableId) : parseInt(this.products.selectedProduct.idsAvailable)\r\n\r\n        if (client.firstAllowableID && client.firstAllowableID > 0) {\r\n            this.firstID = client.firstAllowableID ? parseInt(client.firstAllowableID) : this.config.FIRST_DEFAULT_ID;\r\n        } else {\r\n            this.firstID = this.products.selectedProduct.firstAllowableId ? parseInt(this.products.selectedProduct.firstAllowableId) : this.config.FIRST_DEFAULT_ID;\r\n        }\r\n        this.lastFirstID = this.firstID;\r\n        this.firstAllowableID = this.firstID;\r\n        this.firstNumericFacID = this.firstID;\r\n        this.lastNumericFacID = this.firstNumericFacID + this.numFacultyIDs - 1;\r\n\r\n        //Look for the highest assigned id and set the first id equal to that plus the id buffer\r\n        if (client.assignments.length > 0) {\r\n            let maxId = 0;\r\n            client.assignments.forEach(item => {\r\n                if (parseInt(item.lastID) > parseInt(maxId)) maxId = parseInt(item.lastID);\r\n            });\r\n            this.firstID = parseInt(maxId) + parseInt(this.idBuffer);\r\n        }\r\n\r\n        if (this.firstID > this.lastIDAvailable) return;\r\n\r\n        //Save the first id \r\n        this.lastFirstID = this.firstID;\r\n        this.firstNumericFacID = client.lastFacIdAssigned == 0 ? parseInt(client.lastFacIdAssigned) : parseInt(client.lastFacIdAssigned) + parseInt(this.numFacultyIDs);//FACULTY_ID_BUFFER);\r\n        this.lastNumericFacID = this.firstNumericFacID + this.numFacultyIDs\r\n        //config.DEFAULT_FACULTY_IDS;\r\n\r\n        this.calcLastID();\r\n\r\n        this.selectedRequestDetail.assignments.push({\r\n            staffId: this.userObj._id,\r\n            client: client.client,\r\n            systemId: client.systemId,\r\n            firstID: this.firstID,\r\n            lastID: this.lastID,\r\n            firstFacID: this.firstNumericFacID,\r\n            lastFacID: this.lastNumericFacID,\r\n            firstFacIdAssigned: this.firstNumericFacID,\r\n            lastFacIdAssigned: this.lastNumericFacID,\r\n            idsAssigned: parseInt(this.lastID) - parseInt(this.firstID)\r\n        });\r\n\r\n        //Calculate the total ids assigned so far\r\n        this.totalIdsAssigned = parseInt(this.totalIdsAssigned) + parseInt(this.lastID) - parseInt(this.firstID);\r\n        this.assignmentDetailIndex = this.selectedRequestDetail.assignments.length - 1;\r\n\r\n        //Calculate the user ids and passwords\r\n        if (this.studentIDTemplates.length) {\r\n            this.calcAssignment();\r\n            this.idsRemaining = parseInt(this.idsRemaining) - this.selectedRequestDetail.assignments[this.assignmentDetailIndex].idsAssigned;\r\n        }\r\n\r\n        this.insertAssignmentIntoSystem(client, this.selectedRequestDetail.assignments[this.assignmentDetailIndex]);\r\n        this.assignClientStatus();\r\n\r\n        this.clientSelected = true;\r\n        this.enableButton = true;\r\n\r\n        if (this.selectedRow) this.selectedRow.children().removeClass('info');\r\n        this.selectedRow = $(el.target).closest('tr');\r\n        this.selectedRow.children().addClass('info')\r\n    }\r\n\r\n    assignClientStatus() {\r\n        if (this.selectedSystem.clients[this.selectedClientIndex].clientStatus !== this.config.SANDBOX_CLIENT_CODE) {\r\n            if (this.selectedSystem.clients[this.selectedClientIndex].assignments && this.selectedSystem.clients[this.selectedClientIndex].assignments.length === 0) {\r\n                this.selectedSystem.clients[this.selectedClientIndex].clientStatus = this.config.UNASSIGNED_CLIENT_CODE;\r\n                // this.productSystems[this.selectedSystemIndex].clients[this.selectedClientIndex].clientStatus = this.config.UNASSIGNED_CLIENT_CODE;\r\n            } else if (this.selectedSystem.clients[this.selectedClientIndex].assignments.length === 1) {\r\n                this.selectedSystem.clients[this.selectedClientIndex].clientStatus = this.config.ASSIGNED_CLIENT_CODE;\r\n                // this.productSystems[this.selectedSystemIndex].clients[this.selectedClientIndex].clientStatus = this.config.ASSIGNED_CLIENT_CODE;\r\n            } else {\r\n                this.selectedSystem.clients[this.selectedClientIndex].clientStatus = this.config.SHARED_CLIENT_CODE;\r\n                // this.productSystems[this.selectedSystemIndex].clients[this.selectedClientIndex].clientStatus = this.config.SHARED_CLIENT_CODE;\r\n            }\r\n        }\r\n    }\r\n\r\n    insertAssignmentIntoSystem(client, details) {\r\n        client.idsAvailable = client.idsAvailable - (parseInt(details.lastID) - parseInt(details.firstID));\r\n        let clientCopy = this.utils.copyObject(client);\r\n\r\n        clientCopy.assignments.push({\r\n            assignment: this.selectedRequestDetail._id,\r\n            studentIDRange: details.studentUserIds,\r\n            facultyIDRange: details.facultyUserIds,\r\n            institutionId: this.selectedRequestDetail.requestId.institutionId,\r\n            personId: this.selectedRequestDetail.requestId.personId,\r\n            firstID: details.firstID,\r\n            lastID: details.lastID,\r\n            provisional: true\r\n        });\r\n        this.updateProductSystemsClient(clientCopy, clientCopy.systemId)\r\n    }\r\n\r\n    calcAssignment() {\r\n        this.calcIDRangeFromTemplate();\r\n        this.calculatePasswords();\r\n    }\r\n\r\n    // /*****************************************************************************************************\r\n    //  * Calculates the student and faculty id ranges from the configured id template\r\n    //  ****************************************************************************************************/\r\n    calcIDRangeFromTemplate() {\r\n        //If the user has selected manual mode or no assignment is selected, skip the calculation\r\n        if (this.manualMode || this.assignmentDetailIndex == -1) {\r\n            return;\r\n        }\r\n        //If there is no template, set the range to empty string\r\n        if (!this.studentIDTemplateAvailable) {\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].studentUserIds = this.products.selectedProduct.defaultStudentIdPrefix ? this.products.selectedProduct.defaultStudentIdPrefix : \"\";\r\n        } else {\r\n            //Determine if user has selected a template and if not, select the first one\r\n            var selectedStudentIDTemplates = new Array();\r\n            if (this.selectedStudentIDTemplate.length == 0) {\r\n                selectedStudentIDTemplates.push(this.studentIDTemplates[0]);\r\n            } else {\r\n                for (var k = 0; k < this.selectedStudentIDTemplate.length; k++) {\r\n                    selectedStudentIDTemplates.push(this.studentIDTemplates[parseInt(this.selectedStudentIDTemplate[k])]);\r\n                }\r\n            }\r\n            //For each selected template, calculate the id range and add them to the ids allocated\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].studentUserIds = \"\";\r\n            for (var i = 0; i < selectedStudentIDTemplates.length; i++) {\r\n                var firstStudentId = this.getID(selectedStudentIDTemplates[i], this.firstID);\r\n                var lastStudentId = this.getID(selectedStudentIDTemplates[i], this.lastID);\r\n                this.selectedRequestDetail.assignments[this.assignmentDetailIndex].studentUserIds += firstStudentId + \" to \" + lastStudentId + \":\";\r\n            }\r\n            //Strip off the last colon\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].studentUserIds = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].studentUserIds.substring(0, this.selectedRequestDetail.assignments[this.assignmentDetailIndex].studentUserIds.length - 1);\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].notValid = this.validateIDRange(this.selectedSystem.clients[this.selectedClientIndex], this.selectedRequestDetail.assignments[this.assignmentDetailIndex], this.selectedRequestDetail._id) ? '' : 'danger';\r\n            if (this.selectedRequestDetail.assignments[this.assignmentDetailIndex].notValid != 'danger') this.validation.makeValid($(\"#errorRange\"));\r\n        }\r\n\r\n        this.calcFacIDRangeFromTemplate();\r\n\r\n    }\r\n\r\n    calcFacIDRangeFromTemplate() {\r\n        //If there is no template configured for faculty ids or if this is a sandbox request set the faculty ids to empty string\r\n        if (this.products.selectedProduct.defaultFacultyIdPrefix && this.products.selectedProduct.defaultFacultyIdPrefix.indexOf(this.config.ID_WILDCARD) == -1\r\n            || this.selectedRequestDetail.requestId.courseId._id === this.config.SANDBOX_ID\r\n            || this.facultyIDTemplates.length == 0) {\r\n\r\n            if (this.selectedRequestDetail.requestId.courseId._id !== this.config.SANDBOX_ID) this.selectedRequestDetail.assignments[this.assignmentDetailIndex].facultyUserIds = this.products.selectedProduct.defaultFacultyIdPrefix;\r\n        } else {\r\n            var selectedFacultyIDTemplates = new Array();\r\n            if (this.selectedStudentIDTemplate.length == 0) {\r\n                selectedFacultyIDTemplates.push(this.facultyIDTemplates[0]);\r\n            } else {\r\n                for (var k = 0; k < this.selectedStudentIDTemplate.length; k++) {\r\n                    selectedFacultyIDTemplate.push(this.facultyIDTemplates[parseInt(this.selectedFacultyIDTemplate[k])]);\r\n                }\r\n            }\r\n\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].facultyUserIds = \"\";\r\n            for (var i = 0; i < selectedFacultyIDTemplates.length; i++) {\r\n                var firstFacID = this.getID(selectedFacultyIDTemplates[i], this.selectedRequestDetail.assignments[this.assignmentDetailIndex].firstFacID);\r\n                var lastFacID = this.getID(selectedFacultyIDTemplates[i], this.selectedRequestDetail.assignments[this.assignmentDetailIndex].lastFacID);\r\n                this.selectedRequestDetail.assignments[this.assignmentDetailIndex].facultyUserIds += firstFacID + \" to \" + lastFacID + \":\";\r\n            }\r\n            //Strip off the last colon\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].facultyUserIds = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].facultyUserIds.substring(0, this.selectedRequestDetail.assignments[this.assignmentDetailIndex].facultyUserIds.length - 1);\r\n        }\r\n    }\r\n\r\n    //  /*****************************************************************************************************\r\n    //  * Calculate a user id from a template\r\n    //  * idPrefix -an id template.  Templates are defined for products.\r\n    //  * id - an integer\r\n    //  ****************************************************************************************************/\r\n    getID(idPrefix, id) {\r\n        if (idPrefix) {\r\n            var len = idPrefix.lastIndexOf(this.config.ID_WILDCARD) - idPrefix.indexOf(this.config.ID_WILDCARD) + 1;\r\n            var prefix = \"000\".substr(0, len - id.toString().length)\r\n            return idPrefix.substr(0, idPrefix.indexOf(this.config.ID_WILDCARD)) + prefix + id;\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    // /*****************************************************************************************************\r\n    //  * Calculate a password from a template\r\n    //  ****************************************************************************************************/\r\n    calculatePasswords() {\r\n        //If the user selected manual mode or if no assignment is selected, return\r\n        if (this.manualMode || this.assignmentDetailIndex == -1) {\r\n            return;\r\n        }\r\n\r\n        if (this.selectedRequestDetail.assignments.length > 0) {\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].facultyPassword = this.selectedRequestDetail.assignments[0].facultyPassword;\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].studentPassword = this.selectedRequestDetail.assignments[0].studentPassword;\r\n        }\r\n        var random;\r\n        var prefix;\r\n        var len;\r\n        //If the product student password template is defined with a wildcard calculate the password \r\n        if (this.products.selectedProduct.defaultStudentPassword && this.products.selectedProduct.defaultStudentPassword.indexOf(this.config.ID_WILDCARD) != -1) {\r\n            len = this.products.selectedProduct.defaultStudentPassword.lastIndexOf(this.config.ID_WILDCARD) - this.products.selectedProduct.defaultStudentPassword.indexOf(this.config.ID_WILDCARD) + 1;\r\n            prefix = \"9\" + \"000\".substr(0, len - 1);\r\n            random = Math.floor(Math.random() * parseInt(prefix));\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].studentPassword = this.products.selectedProduct.defaultStudentPassword.substr(0, this.products.selectedProduct.defaultStudentPassword.indexOf(this.config.ID_WILDCARD)) + random;\r\n        } else {\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].studentPassword = this.products.selectedProduct.defaultStudentPassword;\r\n        }\r\n        //Sandbox assignments don't have faculty ids so set the password to empty string\r\n        if (this.selectedRequestDetail.requestId.courseId._id === this.config.SANDBOX_ID) {\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].facultyPassword = \"\";\r\n        } else {\r\n            //If the product faculty password template is defined with a wildcard calculate the password\r\n            if (this.products.selectedProduct.defaultFacultyPassword && this.products.selectedProduct.defaultFacultyPassword.indexOf(this.config.ID_WILDCARD) != -1) {\r\n                len = this.products.selectedProduct.defaultFacultyPassword.lastIndexOf(this.config.ID_WILDCARD) - this.products.selectedProduct.defaultFacultyPassword.indexOf(this.config.ID_WILDCARD) + 1;\r\n                prefix = \"9\" + \"000\".substr(0, len - 1);\r\n                random = Math.floor(Math.random() * parseInt(prefix));\r\n                this.selectedRequestDetail.assignments[this.assignmentDetailIndex].facultyPassword = this.products.selectedProduct.defaultFacultyPassword.substr(0, this.products.selectedProduct.defaultFacultyPassword.indexOf(this.config.ID_WILDCARD)) + random;\r\n            } else {\r\n                this.selectedRequestDetail.assignments[this.assignmentDetailIndex].facultyPassword = this.products.selectedProduct.defaultFacultyPassword;\r\n            }\r\n        }\r\n    }\r\n\r\n    // /*****************************************************************************************************\r\n    //  * The user changed the first id field\r\n    //  ****************************************************************************************************/\r\n    firstIDChanged() {\r\n        this.firstID = $(\"#firstID\").val();\r\n        //Make sure the id isn't lower than the first allowable id for the product\r\n        if (this.firstID < this.firstAllowableID) this.firstID = this.firstAllowableID;\r\n        if (parseInt(this.lastID) + parseInt(this.firstID) - parseInt(this.lastFirstID) > this.lastIDAvailable) {\r\n            this.firstID = this.lastFirstID;\r\n            return;\r\n        }\r\n\r\n        //Calculate the last id using the difference between the previous firstID and the current firstID\r\n        this.lastID = parseInt(this.lastID) + parseInt(this.firstID) - parseInt(this.lastFirstID);\r\n\r\n        //If a client has been selected, update the assignment firstID then recalculate the id range\r\n        if (this.assignmentDetailIndex > -1) {\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].firstID = this.firstID;\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].lastID = this.lastID;\r\n            this.calcIDRangeFromTemplate();\r\n        }\r\n        //Save the new firstID\r\n        this.selectedSystem.clients[this.selectedClientIndex].idsAvailable = this.selectedSystem.clients[this.selectedClientIndex].idsAvailable + (parseInt(this.firstID) - parseInt(this.lastFirstID));\r\n        this.lastFirstID = this.firstID;\r\n\r\n        this.selectedSystem.clients[this.selectedClientIndex].assignments[this.clientSelectedIndex].studentIDRange = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].studentUserIds;\r\n        // this.productSystems[this.selectedSystemIndex].clients[this.selectedClientIndex].studentIDRange = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].studentUserIds;\r\n        setTimeout(() => { $(\"#lastID\").focus(); $(\"#firstID\").focus() }, 100);\r\n    }\r\n\r\n    // /*****************************************************************************************************\r\n    //  * The user changed the last id field\r\n    //  ****************************************************************************************************/\r\n    lastIDChanged() {\r\n        this.lastID = $(\"#lastID\").val();\r\n        //Make sure the lastID isn't higher than the last ID available for the product\r\n        if (this.lastID > this.lastIDAvailable) {\r\n            this.lastID = this.lastIDAvailable;\r\n        }\r\n        //Adjust the required ids \r\n        this.idsRequired = parseInt(this.idsRequired) + parseInt(this.lastID) - parseInt(this.oldLastID);\r\n        //If a client is selected and the assignment has already been saved\r\n        if (this.assignmentDetailIndex > -1) {\r\n            //Adjust the ids assigned\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].idsAssigned = parseInt(this.selectedRequestDetail.assignments[this.assignmentDetailIndex].idsAssigned) + parseInt(this.lastID) - parseInt(this.oldLastID);\r\n            this.totalIdsAssigned = parseInt(this.totalIdsAssigned) + parseInt(this.lastID) - parseInt(this.oldLastID);\r\n            //Set the lastID in the assignment\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].lastID = this.lastID;\r\n            this.selectedSystem.clients[this.selectedClientIndex].lastIdAssigned = this.lastID;\r\n            // this.productSystems[this.selectedSystemIndex].clients[this.selectedClientIndex].lastIdAssigned = this.lastID;\r\n            //Recalculate the id range\r\n            this.calcIDRangeFromTemplate();\r\n        } else {\r\n            //No client selected and no assignment, adjus the ids remaining\r\n            this.idsRemaining = parseInt(this.idsRemaining) + parseInt(this.lastID) - parseInt(this.oldLastID);\r\n        }\r\n        this.selectedSystem.clients[this.selectedClientIndex].idsAvailable = this.selectedSystem.clients[this.selectedClientIndex].idsAvailable + (parseInt(this.oldLastID) - parseInt(this.lastID));\r\n        this.oldLastID = this.lastID;\r\n        this.selectedSystem.clients[this.selectedClientIndex].assignments[this.clientSelectedIndex].studentIDRange = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].studentUserIds;\r\n        // this.productSystems[this.selectedSystemIndex].clients[this.selectedClientIndex].studentIDRange = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].studentUserIds;\r\n        setTimeout(() => { $(\"#firstID\").focus(); $(\"#lastID\").focus() }, 100);\r\n    }\r\n\r\n    lastFacIDChanged() {\r\n        this.numFacultyIDs = parseInt(this.lastNumericFacID) - parseInt(this.firstNumericFacID) + 1;\r\n        if (this.assignmentDetailIndex > -1) {\r\n            this.selectedSystem.clients[this.selectedClientIndex].lastFacIdAssigned = parseInt(this.lastNumericFacID);\r\n            // this.productSystems[this.selectedSystemIndex].clients[this.selectedClientIndex].lastFacIdAssigned = parseInt(this.lastNumericFacID);\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].lastFacID = parseInt(this.lastNumericFacID);\r\n            this.calcFacIDRangeFromTemplate();\r\n        }\r\n\r\n        //NEED TO UPDATE PROPOSED CLIENT ASSIGNMENT\r\n        this.selectedSystem.clients[this.selectedClientIndex].assignments[this.clientSelectedIndex].facultyIDRange = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].facultyUserIds;\r\n        // this.productSystems[this.selectedSystemIndex].clients[this.selectedClientIndex].facultyIDRange = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].facultyUserIds;\r\n        setTimeout(() => { $(\"#firstFacID\").focus(); $(\"#lastFacID\").focus() }, 100);\r\n    }\r\n\r\n    firstFacIDChanged() {\r\n        this.lastNumericFacID = parseInt($(\"#firstFacID\").val()) + parseInt(this.numFacultyIDs) - 1;\r\n        if (this.assignmentDetailIndex > -1) {\r\n            this.selectedSystem.clients[this.selectedClientIndex].firstFacIdAssigned = this.firstNumericFacID;\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].firstFacID = this.firstNumericFacID;\r\n            this.selectedSystem.clients[this.selectedClientIndex].lastFacIdAssigned = this.lastNumericFacID;\r\n            this.selectedRequestDetail.assignments[this.assignmentDetailIndex].lastFacID = this.lastNumericFacID;\r\n            this.calcFacIDRangeFromTemplate();\r\n        }\r\n\r\n        this.selectedSystem.clients[this.selectedClientIndex].assignments[this.clientSelectedIndex].facultyIDRange = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].facultyUserIds;\r\n        // this.productSystems[this.selectedSystemIndex].clients[this.selectedClientIndex].facultyIDRange = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].facultyUserIds;\r\n        setTimeout(() => { $(\"#lastFacID\").focus(); $(\"#firstFacID\").focus() }, 100);\r\n    }\r\n\r\n    /*****************************************************************************************************\r\n     * Check to see if an id range overlaps other assignments in the same client\r\n     ****************************************************************************************************/\r\n    validateIDRange(client, assignment, id) {\r\n\r\n        if (!client.assignments || client.assignments.length == 1) return true;\r\n        client.assignments.forEach(item => {\r\n            if (item.firstID === null || item.firstID == \"\" || item.lastID === null || item.lastID === \"\") {\r\n                return this.dialog.showMessage(\r\n                    \"You must enter the ID range manually with this client.\",\r\n                    \"Manual Assignment\",\r\n                    ['OK']\r\n                ).whenClosed(response => {\r\n                    return true;\r\n                });\r\n            }\r\n        })\r\n        var valid = true;\r\n        var x1 = parseInt(assignment.firstID);\r\n        var x2 = parseInt(assignment.lastID);\r\n        for (var i = 0; i < client.assignments.length - 1; i++) {\r\n            // if(this.existingRequest  && client.assignments[i].assignment == id){\r\n            var y1 = parseInt(client.assignments[i].firstID);\r\n            var y2 = parseInt(client.assignments[i].lastID);\r\n            if (x1 === y1 && x2 === y2) {\r\n                continue;\r\n            } else {\r\n                if (!(x2 < y1 || x1 > y2)) valid = false;\r\n            }\r\n        }\r\n        return valid;\r\n    }\r\n\r\n\t/*****************************************************************************************************\r\n     * The user selects an assignment \r\n     * index - the index of the selected assignment\r\n     * el - the event object\r\n     ****************************************************************************************************/\r\n    selectProposedClient(index, el) {\r\n        //Save the index \r\n        this.assignmentDetailIndex = index;\r\n        this.setClientIndex(this.selectedRequestDetail.assignments[this.assignmentDetailIndex].client);\r\n        this.setClientAssignmentIndex(this.selectedSystem.clients[this.selectedClientIndex]);\r\n\r\n        if (this.assignmentDetailIndex == -1) {\r\n            this.selectedAssignedClient = \"\";\r\n            if (this.selectedRow) this.selectedRow.children().removeClass('info');\r\n        } else {\r\n            this.selectedAssignedClient = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].client;\r\n\r\n            //Update the firstID and lastID fileds with the assignment firstID and lastID\r\n            this.firstID = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].firstID;\r\n            this.lastID = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].lastID;\r\n            this.selectedSystem.clients[this.selectedClientIndex].lastIdAssigned = this.lastID;\r\n            // this.productSystems[this.selectedSystemIndex].clients[this.selectedClientIndex].lastIdAssigned = this.lastID;\r\n            this.firstNumericFacID = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].firstFacID;\r\n            this.lastNumericFacID = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].lastFacID;\r\n            this.selectedSystem.clients[this.selectedClientIndex].lastFacIdAssigned = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].lastFacID;\r\n\r\n            // this.productSystems[this.selectedSystemIndex].clients[this.selectedClientIndex].lastFacIdAssigned = this.selectedRequestDetail.assignments[this.assignmentDetailIndex].lastFacID;\r\n            this.oldIdsAssigned = parseInt(this.lastID) - parseInt(this.lastID);\r\n            this.oldLastID = this.lastID;\r\n            this.lastFirstID = this.firstID;\r\n            this.forceManual = this.selectedSystem.clients[this.selectedClientIndex].manual;\r\n            this.manualMode = this.selectedSystem.clients[this.selectedClientIndex].manual;\r\n\r\n            //Highlight the table row\r\n            if (this.selectedAssignmentRow) this.selectedAssignmentRow.children().removeClass('info');\r\n            this.selectedAssignmentRow = $(el.target).closest('tr');\r\n            this.selectedAssignmentRow.children().addClass('info')\r\n        }\r\n\r\n    }\r\n\r\n    deleteTest(assignment, index) {\r\n        this.setAssignmentIndex(assignment.client);\r\n        this.setClientIndex(assignment.client);\r\n        this.clientSelectedIndex = index;\r\n        this.deleteClicked = true;\r\n    }\r\n\r\n    deleteTable(assignment) {\r\n        this.setAssignmentIndex(assignment.client);\r\n        this.setClientIndex(assignment.client);\r\n        this.setClientAssignmentIndex(this.selectedSystem.clients[this.selectedClientIndex]);\r\n        this.deleteProposedClient(assignment);\r\n    }\r\n\r\n    /*****************************************************************************************************\r\n     * The user deletes an assignment \r\n     * index - the index of the selected assignment\r\n     ****************************************************************************************************/\r\n    async deleteProposedClient() {\r\n        //Is this a saved assignment\r\n        if (this.selectedRequestDetail.assignments[this.assignmentDetailIndex].assignedDate) {\r\n            return this.dialog.showMessage(\r\n                \"This will delete the assignment.  Are you sure you want to do that?\",\r\n                \"Delete Assignment\",\r\n                ['Yes', 'No']\r\n            ).whenClosed(response => {\r\n                if (!response.wasCancelled) {\r\n                    this.deleteSaved(this.assignmentDetailIndex);\r\n                }\r\n            });\r\n        } else {\r\n            if (this.forceManual) this.manualMode = false;\r\n            this.forceManual = false;\r\n            //Undo the changes made by the assignment\r\n            this.idsRemaining = parseInt(this.idsRemaining) + parseInt(this.selectedRequestDetail.assignments[this.assignmentDetailIndex].idsAssigned);\r\n            this.selectedSystem.clients[this.selectedClientIndex].idsAvailable = parseInt(this.selectedSystem.clients[this.selectedClientIndex].idsAvailable) + parseInt(this.selectedRequestDetail.assignments[this.assignmentDetailIndex].idsAssigned);\r\n            this.totalIdsAssigned = parseInt(this.totalIdsAssigned) - parseInt(this.selectedRequestDetail.assignments[this.assignmentDetailIndex].idsAssigned);\r\n\r\n            //Delete the assignment and the client\r\n            this.deleteProvisinoalClientAssignment();\r\n            this.assignClientStatus()\r\n            this.assignmentDetailIndex = -1;\r\n            if (this.selectedRow) this.selectedRow.children().removeClass('info');\r\n        }\r\n    }\r\n\r\n    //Find index of client in selected system\r\n    setClientIndex(client) {\r\n        for (let k = 0; k < this.selectedSystem.clients.length; k++) {\r\n            if (this.selectedSystem.clients[k].client == client) {\r\n                this.selectedClientIndex = k;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Find index of assignment in request detail\r\n    setAssignmentIndex(client) {\r\n        for (let k = 0; k < this.selectedRequestDetail.assignments.length; k++) {\r\n            if (this.selectedRequestDetail.assignments[k].client == client) {\r\n                this.assignmentDetailIndex = k;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    setClientAssignmentIndex(client) {\r\n        for (let k = 0; k < client.assignments.length; k++) {\r\n            if (client.assignments[k].assignment._id) {\r\n                if (client.assignments[k].assignment._id === this.selectedRequestDetail._id) {\r\n                    this.clientSelectedIndex = k;\r\n                    return;\r\n                }\r\n            } else if (client.assignments[k].assignment === this.selectedRequestDetail._id) {\r\n                this.clientSelectedIndex = k;\r\n                return;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    deleteProvisinoalClientAssignment() {\r\n        this.setClientIndex(this.selectedRequestDetail.assignments[this.assignmentDetailIndex].client);\r\n        // this.productSystems[this.selectedSystemIndex].clients[this.selectedClientIndex].assignments.splice(this.clientSelectedIndex, 1);\r\n        this.selectedSystem.clients[this.selectedClientIndex].assignments.splice(this.clientSelectedIndex, 1);\r\n        this.selectedRequestDetail.assignments.splice(this.assignmentDetailIndex, 1);\r\n    }\r\n\r\n    /*****************************************************************************************************\r\n     * Delete the assignment in the database\r\n     ****************************************************************************************************/\r\n    async deleteSaved(index) {\r\n        //Update the client\r\n        this.selectedSystem.clients[this.selectedClientIndex].idsAvailable = parseInt(this.selectedSystem.clients[this.selectedClientIndex].idsAvailable) + parseInt(this.selectedRequestDetail.assignments[this.assignmentDetailIndex].idsAssigned);\r\n        this.idsRemaining = parseInt(this.idsRemaining) + parseInt(this.selectedRequestDetail.assignments[this.assignmentDetailIndex].idsAssigned);\r\n        this.totalIdsAssigned = parseInt(this.totalIdsAssigned) - parseInt(this.selectedRequestDetail.assignments[this.assignmentDetailIndex].idsAssigned);\r\n\r\n        //Construct the object to submit to the server\r\n        this.selectedRequestDetail.idsAssigned = parseInt(this.selectedRequestDetail.idsAssigned) - parseInt(this.selectedRequestDetail.assignments[this.assignmentDetailIndex].idsAssigned);\r\n        this.deleteProvisinoalClientAssignment()\r\n        this.assignClientStatus();\r\n        this.selectedRequestDetail.requestStatus = this.selectedRequestDetail.assignments && this.selectedRequestDetail.assignments.length > 0 ? this.config.ASSIGNED_REQUEST_CODE : this.config.UNASSIGNED_REQUEST_CODE;\r\n        this.requestToSave = this.utils.copyObject(this.selectedRequestDetail.requestId);\r\n        // this.requestToSave.audit.push({\r\n        //     property: 'Delete Assignment',\r\n        //     newValue: JSON.stringify(this.assignment),\r\n        //     oldValue: this.selectedRequestDetail.productId.name,\r\n        //     eventDate: new  Date(),\r\n        //     personId: this.userObj.fullName\r\n        // })\r\n        this.requestToSave.requestDetailsToSave = new Array();\r\n        var request = this.utils.copyObject(this.selectedRequestDetail);\r\n        delete request['requestId'];\r\n        this.requestToSave.requestDetailsToSave.push(request);\r\n        this.requestToSave.systemsToSave = [this.selectedSystem];\r\n\r\n        this.clientRequests.setSelectedRequest(this.requestToSave);\r\n        let serverResponse = await this.clientRequests.assignRequest(this.editIndex);\r\n        if (!serverResponse.status) {\r\n            this.dataTable.updateArrayMaintainFilters(this.clientRequests.requestsDetailsArray);\r\n            this.reSort();\r\n            await this.filterInAssigned();\r\n            this.utils.showNotification(\"The assignment was deleted\")\r\n        }\r\n\r\n        this.selectedAssignedClient = \"\";\r\n\r\n    }\r\n\r\n    /**\r\n* Delete the request\r\n*/\r\n    delete() {\r\n        if (this.selectedRequestDetail.assignments && this.selectedRequestDetail.assignments.length > 0) {\r\n            return this.dialog.showMessage(\r\n                \"Please delete the assignments before deleting the request\",\r\n                \"Delete Request\",\r\n                ['OK']\r\n            ).whenClosed(response => {\r\n                if (!response.wasCancelled) {\r\n                    return;\r\n                }\r\n            });\r\n        } else {\r\n            return this.dialog.showMessage(\r\n                \"Are you sure you want to delete the request?\",\r\n                \"Delete Request\",\r\n                ['Yes', 'No']\r\n            ).whenClosed(response => {\r\n                if (!response.wasCancelled) {\r\n                    this.deleteRequest();\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    async deleteRequest() {\r\n        this.clientRequests.setTheSelectedRequestDetail(this.selectedRequestDetail);\r\n        let serverResponse = await this.clientRequests.deleteRequest();\r\n        if (!serverResponse.error) {\r\n            await this.filterInAssigned()\r\n            this.utils.showNotification(\"The request was deleted\");\r\n            this.dataTable.updateArray(this.clientRequests.requestsDetailsArray);\r\n        }\r\n        this.requestSelected = 'table';\r\n    }\r\n\r\n\t/*****************************************************************************************************\r\n     * Save the request \r\n     ****************************************************************************************************/\r\n    async save() {\r\n        if (this.validation.validate(1)) {\r\n            if (this._buildRequest()) {\r\n                this.clientRequests.setSelectedRequest(this.requestToSave);\r\n                var email = this._buildEmailObject();\r\n                let serverResponse = await this.clientRequests.assignRequest(this.editIndex, email);\r\n                if (!serverResponse.status) {\r\n                    this.utils.showNotification(\"The request was updated\");\r\n                    this.dataTable.updateArrayMaintainFilters(this.clientRequests.requestsDetailsArray);\r\n                    this.reSort();\r\n                    // await this.filterInAssigned();\r\n                    this._cleanUp();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _buildEmailObject() {\r\n        let mailObject = {};\r\n        if (!this.sendEmail) return mailObject;\r\n        var date = new Date(this.selectedRequestDetail.requiredDate);\r\n        var day = date.getDate();\r\n        var month = date.getMonth() + 1;\r\n        var year = date.getFullYear();\r\n        if (this.selectedRequestDetail.requestStatus !== this.config.PROVISIONAL_REQUEST_CODE) {\r\n            mailObject.reason = 2;\r\n            mailObject.email = this.selectedRequestDetail.requestId.personId.email;\r\n            mailObject.subject = \"Your product request has been assigned\"\r\n            mailObject.MESSAGE = this.config.CLIENT_REQUEST_ASSIGNED_MESSAGE\r\n                .replace('[CUSTOMER]', this.selectedRequestDetail.requestId.personId.fullName)\r\n                .replace('[SESSION]', this.sessions.selectedSession.session)\r\n                .replace('[PRODUCT]', this.selectedRequestDetail.productId.name)\r\n                .replace('[COURSE_NAME]', this.selectedRequestDetail.requestId.courseId.name)\r\n                .replace('[COURSE_NUMBER]', this.selectedRequestDetail.requestId.courseId.number)\r\n            mailObject.cc = this.config.PRODUCT_REQUESTS_EMAIL_LIST ? this.config.PRODUCT_REQUESTS_EMAIL_LIST : \"\";\r\n        }\r\n\r\n        return mailObject;\r\n    }\r\n\r\n    /*****************************************************************************************************\r\n    * Build the data objects to send to the server \r\n    ****************************************************************************************************/\r\n    _buildRequest() {\r\n        this.productSystems.forEach(system => {\r\n            system.clients.forEach(client => {\r\n                client.assignments.forEach(assignment => {\r\n                    assignment.provisional = false;\r\n                });\r\n            });\r\n        });\r\n        this.systemQueue = new Array();\r\n        this.selectedRequestDetail.assignments.forEach((item, index) => {\r\n            let saveSystem = true;\r\n            this.systemQueue.forEach(system => {\r\n                if (item.systemId === system._id) saveSystem = false;\r\n            })\r\n            if (saveSystem) this.systemQueue.push(this._getSystem(item.systemId));\r\n            delete item['provisional'];\r\n\r\n            item.assignedDate = item.assignedDate ? item.assignedDate : new Date();\r\n        });\r\n\r\n        this.systemQueue.forEach(server => {\r\n            server.clients.forEach(client => {\r\n                client.assignments.forEach(assignment => {\r\n                    assignment.assignment = assignment.assignment != null && assignment.assignment._id ? assignment.assignment._id : assignment.assignment;\r\n                })\r\n            })\r\n        });\r\n\r\n        this.selectedRequestDetail.idsAssigned = parseInt(this.totalIdsAssigned);\r\n        this.selectedRequestDetail.requestStatus = this.selectedRequestDetail.assignments && this.selectedRequestDetail.assignments.length > 0 ? this.config.ASSIGNED_REQUEST_CODE : this.config.UNASSIGNED_REQUEST_CODE;\r\n        // this.selectedRequestDetail.requestStatus = this.config.ASSIGNED_REQUEST_CODE;\r\n        this.requestToSave = this.utils.copyObject(this.selectedRequestDetail.requestId);\r\n        // this.requestToSave.audit.push({\r\n        //    property: 'Assigned',\r\n        //    newValue: JSON.stringify(this.selectedRequestDetail.assignments),\r\n        //    oldValue: this.selectedRequestDetail.productId.name,\r\n        //    eventDate: new  Date(),\r\n        //    personId: this.userObj.fullName\r\n        // })\r\n        this.requestToSave.requestDetailsToSave = new Array();\r\n        var request = this.utils.copyObject(this.selectedRequestDetail);\r\n        delete request['requestId'];\r\n        this.requestToSave.requestDetailsToSave.push(request);\r\n        this.requestToSave.systemsToSave = this.systemQueue;\r\n\r\n        return true;\r\n    }\r\n\r\n    _getSystem(id) {\r\n        for (let k = 0; k < this.productSystems.length; k++) {\r\n            if (this.productSystems[k]._id === id) return this.productSystems[k];\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    // buildSystemToSave(client){\r\n    //     let system = this.originalProductSystems[this.selectedSystemIndex].clients[this.selectedClientIndex] = this.utils.copyObject(client);\r\n    //     return system;\r\n    // }\r\n\r\n\r\n    updateProductSystemsClient(client) {\r\n        this.selectedSystem.clients[this.selectedClientIndex].assignments = client.assignments;\r\n        this.clientSelectedIndex = client.assignments.length - 1;\r\n    }\r\n\r\n    back() {\r\n        this.clientRequests.setTheSelectedRequestDetail(this.selectedRequestDetail);\r\n        let changes = this.clientRequests.isRequestDetailDirty(this.originalRequestDetail, ['requestId', 'productId', 'techComments']);\r\n\r\n        var newAssignment = false;\r\n        if (this.selectedRequestDetail.assignments) {\r\n            this.selectedRequestDetail.assignments.forEach(item => {\r\n                if (!item.assignedDate) newAssignment = true;\r\n            })\r\n        }\r\n\r\n        if (this.selectedRequestDetail.assignments.length > 0 && (changes.length > 0 || newAssignment)) {\r\n            return this.dialog.showMessage(\r\n                \"There is an unsaved assignment. Are you sure you want to leave this page?\",\r\n                \"Confirm Back\",\r\n                ['Yes', 'No']\r\n            ).whenClosed(response => {\r\n                if (response.wasCancelled) {\r\n                    return;\r\n                } else {\r\n                    this._cleanUp();\r\n                }\r\n            });\r\n        }\r\n        this._cleanUp();\r\n    }\r\n\r\n    async viewAssignment(index, request) {\r\n        this.editIndex = index;\r\n        // this.selectedRequestDetail = this.utils.copyObject(request);\r\n        let response = await this.clientRequests.getRequestDetail(request._id);\r\n        if (!response.error) {\r\n            this.selectedRequestDetail = response;\r\n            if (this.selectedRequestDetail.requestId && this.selectedRequestDetail.requestId.courseId === null) this.selectedRequestDetail.requestId.courseId = { _id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME };\r\n            this.products.selectedProductFromId(this.selectedRequestDetail.productId._id);\r\n            if (this.selectedRequestDetail.assignments && this.selectedRequestDetail.assignments.length > 0) this.systems.selectedSystemFromId(this.selectedRequestDetail.assignments[0].systemId);\r\n            this.requestSelected = 'view';\r\n        }\r\n\r\n    }\r\n\r\n    backView() {\r\n        this.requestSelected = 'table';\r\n    }\r\n\r\n    systemSelected() {\r\n        this.selectProductSystem(this.selectedSystemId)\r\n        if (!this.products.selectedProduct.clientRelevant) {\r\n            this.calcAssignment();\r\n        }\r\n    }\r\n\r\n    selectProductSystem(id) {\r\n        this.selectedSystemId = id;\r\n        this.productSystems.forEach((item, index) => {\r\n            if (item._id === id) {\r\n                this.selectedSystem = item;\r\n                this.selectedSystemIndex = index;\r\n            }\r\n        });\r\n        this.checkClientConfigured();\r\n    }\r\n\r\n    checkClientConfigured() {\r\n        this.clientsConfigured = false;\r\n        for (let i = 0; i < this.selectedSystem.clients.length; i++) {\r\n            if (this.selectedSystem.clients[i].productId === this.products.selectedProduct._id) {\r\n                this.clientsConfigured = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    async customerActionDialog() {\r\n        if (this.profileRequest) {\r\n            await this.clientRequests.getRequest(this.profileRequest.requestId._id);\r\n            this.model = 'header';\r\n            this.hideProfile();\r\n        } else {\r\n            await this.clientRequests.getRequest(this.selectedRequestDetail.requestId._id);\r\n        }\r\n\r\n        this.selectedRequestNo = this.clientRequests.selectedRequest.clientRequestNo;\r\n        this.requestId = this.clientRequests.selectedRequest._id;\r\n        this.course = this.clientRequests.selectedRequest.courseId !== null ? this.clientRequests.selectedRequest.courseId.name : this.config.SANDBOX_NAME;\r\n        this.email = this.clientRequests.selectedRequest.personId.email;\r\n        this.personId = this.clientRequests.selectedRequest.personId._id;\r\n        this.emailProducts = this.clientRequests.selectedRequest.requestDetails;\r\n        this.productsSelected = new Array();\r\n\r\n        let subject = \"Question about product request \" + this.selectedRequestNo;\r\n        let email = { emailBody: \"\", emailSubject: subject, emailId: this.email, products: this.clientRequests.selectedRequest.requestDetails, productsSelected: this.productsSelected };\r\n        return this.dialog.showEmail(\r\n            \"Enter Email\",\r\n            email,\r\n            ['Submit', 'Cancel']\r\n        ).whenClosed(response => {\r\n            if (!response.wasCancelled) {\r\n                this.sendTheEmail(response.output);\r\n            } else {\r\n                console.log(\"Cancelled\");\r\n            }\r\n        });\r\n    }\r\n\r\n    async sendTheEmail(email) {\r\n        if (email) {\r\n\r\n            this.clientRequests.selectedRequest.requestStatus = this.config.CUSTOMER_ACTION_REQUEST_CODE;\r\n            var updateIds = new Array();\r\n            this.productsSelected.forEach(item => {\r\n                // this.clientRequests.selectedRequest.requestDetails[item.index].audit.push({\r\n                //         property: 'Customer Action',\r\n                //         newValue: this.config.CUSTOMER_ACTION_REQUEST_CODE,\r\n                //         oldValue: item.requestStatus,\r\n                //         eventDate: new  Date(),\r\n                //         personId: this.userObj._id\r\n                //     });\r\n                this.clientRequests.selectedRequest.requestDetails[item.index].requestStatus = this.config.CUSTOMER_ACTION_REQUEST_CODE;\r\n                updateIds.push(item._id);\r\n            })\r\n\r\n            await this.filterInAssigned();\r\n            var date = new Date(this.requiredDate);\r\n            var day = date.getDate();\r\n            var month = date.getMonth() + 1;\r\n            var year = date.getFullYear();\r\n            this.message = {\r\n                reason: 3,\r\n                personId: this.personId,\r\n                from: this.userObj._id,\r\n                id: this.requestId,\r\n                customerMessage: email.email.emailBody,\r\n                email: email.email.emailId,\r\n                subject: email.email.emailSubject,\r\n                clientRequestNo: this.selectedRequestNo,\r\n                // product: [{name: this.productName, requiredDate: month + \"/\" + day + \"/\" + year}],\r\n                session: this.sessions.selectedSession.session + ' ' + this.sessions.selectedSession.year,\r\n                course: this.course,\r\n                requestStatus: this.config.CUSTOMER_ACTION_REQUEST_CODE,\r\n                model: this.model,\r\n            };\r\n\r\n            // this.clientRequests.selectedRequest.audit.push({\r\n            //     property: 'Send Message',\r\n            //     eventDate: new Date(),\r\n            //     newValue: email.email.emailBody,\r\n            //     personId: this.userObj._id\r\n            // });\r\n            this.clientRequests.selectedRequest.customerMessage = email.email.emailBody;\r\n            let response = await this.clientRequests.saveRequestWithId();\r\n            if (!response.error) {\r\n                this.clientRequests.updateStatuses(updateIds, this.config.CUSTOMER_ACTION_REQUEST_CODE);\r\n                this.dataTable.updateArray(this.clientRequests.requestsDetailsArray);\r\n                let serverResponse = await this.clientRequests.sendCustomerMessage(this.message);\r\n                if (!serverResponse.error) {\r\n                    this.utils.showNotification(\"The message was sent\");\r\n                }\r\n                await this.filterInAssigned();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    showProfile(request, el) {\r\n        this.profileRequest = request;\r\n        $(\".hoverProfile\").css(\"top\", window.pageYOffset + el.clientY - 175);\r\n        $(\".hoverProfile\").css(\"left\", el.clientX - 200);\r\n        $(\".hoverProfile\").css(\"display\", \"block\");\r\n    }\r\n\r\n    hideProfile() {\r\n        $(\".hoverProfile\").css(\"display\", \"none\");\r\n    }\r\n\r\n    showComment(request, el) {\r\n        if (request.requestStatus == this.config.REPLIED_REQUEST_CODE) {\r\n            this.commentShown = request.requestId.comments;\r\n            $(\".hover\").css(\"top\", el.clientY - 200);\r\n            $(\".hover\").css(\"left\", el.clientX - 10);\r\n            $(\".hover\").css(\"display\", \"block\");\r\n        }\r\n    }\r\n\r\n    hideComment() {\r\n        $(\".hover\").css(\"display\", \"none\");\r\n    }\r\n\r\n    // openAudit(){\r\n    //     this.showAudit = !this.showAudit;\r\n    // }\r\n\r\n    openEditStudentTemplate() {\r\n        this.showAddStudentTemplate = !this.showAddStudentTemplate;\r\n    }\r\n\r\n    openStudentTemplate() {\r\n        this.showTemplates = !this.showTemplates;\r\n    }\r\n\r\n    cancelEditStudentTemplate() {\r\n        this.showAddStudentTemplate = false;\r\n    }\r\n\r\n    async saveStudentTemplate() {\r\n        await this.products.saveProduct();\r\n        this.studentIDTemplates = this.products.selectedProduct.defaultStudentIdPrefix.split(\":\");\r\n        if (this.studentIDTemplates.length > 0 && (!this.selectedAssignedClient || !this.selectedAssignedClient.manual)) {\r\n            this.forceManual = false;\r\n            this.manualMode = false;\r\n        }\r\n        this.showAddStudentTemplate = false;\r\n    }\r\n\r\n    openSettings() {\r\n        this.showSettings = !this.showSettings;\r\n        if (this.showSettings) {\r\n            this.idSandboxBuffer = localStorage.getItem('idSandboxBuffer') ? localStorage.getItem('idBuffer') : this.config.SANDBOX_ID_BUFFER;\r\n            this.idBuffer = localStorage.getItem('idBuffer') ? localStorage.getItem('idBuffer') : this.config.REGULAR_ID_BUFFER;\r\n            this.sandBoxIDs = localStorage.getItem('sandBoxIDs') ? localStorage.getItem('sandBoxIDs') : this.config.SANDBOX_ID_COUNT;\r\n            this.numFacultyIDs = localStorage.getItem('numFacultyIDs') ? localStorage.getItem('numFacultyIDs') : this.config.DEFAULT_FACULTY_IDS;\r\n        }\r\n    }\r\n\r\n    saveSettings() {\r\n        localStorage.setItem('idSandboxBuffer', this.idSandboxBuffer);\r\n        localStorage.setItem('idBuffer', this.idBuffer);\r\n        localStorage.setItem('sandBoxIDs', this.sandBoxIDs);\r\n        localStorage.setItem('numFacultyIDs', this.numFacultyIDs);\r\n        this.showSettings = false;\r\n    }\r\n\r\n    restoreDefaults() {\r\n        this.idBuffer = this.config.REGULAR_ID_BUFFER;\r\n        this.sandBoxIDs = this.config.SANDBOX_ID_COUNT;\r\n        localStorage.setItem('idBuffer', this.config.REGULAR_ID_BUFFER);\r\n        localStorage.setItem('sandBoxIDs', this.config.SANDBOX_ID_BUFFER);\r\n        localStorage.setItem('numFacultyIDs', this.config.DEFAULT_FACULTY_IDS);\r\n    }\r\n\r\n    openFacultyDetails() {\r\n        this.facultyDetails = !this.facultyDetails;\r\n        localStorage.setItem(\"facultyDetails\", this.facultyDetails);\r\n    }\r\n\r\n    changeUnassignedOnly() {\r\n        localStorage.setItem('unassignedOnly', this.unassignedOnly);\r\n    }\r\n\r\n    _setUpValidation() {\r\n        this.validation.addRule(1, \"errorRange\", [{\r\n            \"rule\": \"custom\", \"message\": \"Invalid ID range\",\r\n            \"valFunction\": function (context) {\r\n                var valid = true;\r\n                if (context.assignmentDetails) {\r\n                    for (var i = 0; i < context.assignmentDetails.length; i++) {\r\n                        if (context.assignmentDetails[i].notValid == 'danger') valid = false;\r\n                    }\r\n                }\r\n                return valid;\r\n            }\r\n        }]);\r\n    }\r\n\r\n    _cleanUp() {\r\n        this.firstID = 0;\r\n        this.lastID = 0;\r\n        this.requestSelected = 'table';\r\n        this.customerMessage = false;\r\n        this.selectedRequestDetail.assignments = [];\r\n        this.selectedSystem = {};\r\n    }\r\n\r\n    flag() {\r\n        var note = { noteBody: \"\", noteCategories: this.userObj.noteCategories, selectedCategory: 0 };\r\n        return this.dialog.showNote(\r\n            \"Save Changes\",\r\n            note,\r\n            ['Submit', 'Cancel']\r\n        ).whenClosed(response => {\r\n            if (!response.wasCancelled) {\r\n                this.saveNote(response.output);\r\n            } else {\r\n                console.log(\"Cancelled\");\r\n            }\r\n        });\r\n    }\r\n\r\n    async saveNote(note) {\r\n        this.people.selectNote();\r\n        this.people.selectedNote.type = \"r\";\r\n        this.people.selectedNote.personId = this.userObj._id;\r\n        this.people.selectedNote.category = this.userObj.noteCategories[note.selectedCategory];\r\n        this.people.selectedNote.note = note.note.noteBody;\r\n        this.people.selectedNote.reference = this.selectedRequestDetail._id;\r\n        this.people.selectedNote.referenceNo = this.selectedRequestDetail.requestId.clientRequestNo;\r\n        let response = await this.people.saveNote();\r\n        if (!response.error) {\r\n            this.utils.showNotification('The note was saved');\r\n        }\r\n    }\r\n\r\n    deleteRecipient(index) {\r\n        this.emailArray.splice(index, 1);\r\n    }\r\n\r\n    bulkEmail() {\r\n        this.email = { MESSAGE: \"\", INSTRUCTIONS: this.config.HELP_TICKET_INSTRUCTIONS, subject: \"\" };\r\n        this.emailArray = new Array();\r\n        this.dataTable.baseArray.forEach(item => {\r\n            let keep = true;\r\n            for (let i = 0; i < this.emailArray.length; i++) {\r\n                if (!item.requestId || !item.requestId.personId || item.requestId.personId.email === this.emailArray[i].email) keep = false;\r\n            }\r\n            if (keep) {\r\n                var systemsAssigned = \"Unassigned\";\r\n                if (item.assignments && item.assignments.length) {\r\n                    systemsAssigned = \"\"\r\n                    item.assignments.forEach(item => {\r\n                        this.systems.selectedSystemFromId(item.systemId);\r\n                        systemsAssigned += this.systems.selectedSystem.sid + \"(\" + item.client + \") \";\r\n                    })\r\n                }\r\n                this.emailArray.push({\r\n                    fullName: item.requestId.personId.fullName,\r\n                    email: item.requestId.personId.email,\r\n                    institution: item.requestId.institutionId.name,\r\n                    status: systemsAssigned\r\n                })\r\n            }\r\n        })\r\n        this.requestSelected = 'email';\r\n    }\r\n\r\n    backBulkEmail() {\r\n        this.requestSelected = 'table';\r\n    }\r\n\r\n    sendBulkEmail() {\r\n        if (this.email.MESSAGE === \"\" || this.email.subject === \"\") {\r\n            this.utils.showNotification(\"Enter a subject and messsage\", 'warning');\r\n            return;\r\n        }\r\n        if (this.emailArray.length === 0) {\r\n            this.utils.showNotification(\"You must include some recipients\", 'warning');\r\n            return;\r\n        }\r\n        return this.dialog.showMessage(\r\n            \"Are you sure you want to send the email to these recipients?\",\r\n            \"Confirm Send\",\r\n            ['Yes', 'No']\r\n        ).whenClosed(response => {\r\n            if (response.wasCancelled) {\r\n                okToProcess = false;\r\n            } else {\r\n                this.sendTheBulkEmail();\r\n            }\r\n        });\r\n    }\r\n\r\n    sendTheBulkEmail() {\r\n        var recipients = new Array();\r\n        this.emailArray.forEach(item => {\r\n            recipients.push({ name: item.fullName, email: item.email });\r\n        });\r\n\r\n        var email = { email: this.email, recipients: recipients };\r\n        this.people.sendBuikEmail(email);\r\n        this.utils.showNotification(\"Message sent\");\r\n        this.requestSelected = 'table';\r\n    }\r\n\r\n    async clearFilters() {\r\n        this.requiredDateFilterValue = \"\";\r\n        this.createdDateFilterValue = \"\";\r\n        this.requestStatusFilter = \"\";\r\n        this.productFilterValue = \"\";\r\n        this.courseFilterValue = \"\";\r\n        this.helpTicketTypeFilterValue = \"\";\r\n        this.institutionFilterValue = \"\";\r\n        this.dataTable.updateArray(this.clientRequests.requestsDetailsArray);\r\n        // await this.filterInAssigned();\r\n    }\r\n\r\n    async filterInAssigned() {\r\n\r\n        this.requiredDateFilterValue = \"\";\r\n        this.createdDateFilterValue = \"\";\r\n        this.requestStatusFilter = \"\";\r\n        this.productFilterValue = \"\";\r\n        this.courseFilterValue = \"\";\r\n        this.helpTicketTypeFilterValue = \"\";\r\n        this.institutionFilterValue = \"\";\r\n        if (this.isCheckedAssigned) {\r\n            $('#loading').show();\r\n            await this.clientRequests.getClientRequestsDetailsArray('?filter=[and]sessionId|eq|' + this.selectedSession \r\n                + ':requestStatus|in|' + this.config.UNASSIGNED_REQUEST_CODE + '$' + this.config.UPDATED_REQUEST_CODE + '$' + this.config.CUSTOMER_ACTION_REQUEST_CODE, true);\r\n            $('#loading').hide();\r\n            if (this.clientRequests.requestsDetailsArray && this.clientRequests.requestsDetailsArray.length) {\r\n                this.noRequests = false;\r\n                this.clientRequests.requestsDetailsArray.forEach(item => {\r\n                    if (item.requestId && item.requestId.courseId === null) item.requestId.courseId = { _id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME };\r\n                })\r\n                this.dataTable.updateArray(this.clientRequests.requestsDetailsArray, 'requiredDate', -1);\r\n            } else {\r\n                this.noRequests = true;\r\n                this.displayArray = new Array();\r\n            }\r\n\r\n        } else {\r\n            $('#loading').show();\r\n            await this.clientRequests.getClientRequestsDetailsArray('?filter=sessionId|eq|' + this.selectedSession, true);\r\n            $('#loading').hide();\r\n            this.clientRequests.requestsDetailsArray.forEach(item => {\r\n                if (item.requestId && item.requestId.courseId === null) item.requestId.courseId = { _id: this.config.SANDBOX_ID, name: this.config.SANDBOX_NAME };\r\n            })\r\n            this.dataTable.updateArray(this.clientRequests.requestsDetailsArray, 'requiredDate', -1);\r\n            if(this.clientRequests.requestsDetailsArray.length) this.noRequests = false;\r\n        }\r\n\r\n    }\r\n\r\n    changeManualMode() {\r\n        localStorage.setItem('manualMode', this.manualMode);\r\n\r\n    }\r\n\r\n    customNameFilter(value, item, context) {\r\n        return item.requestId && item.requestId.personId.fullName.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    }\r\n\r\n    statusCustomFilter(value, item, context) {\r\n        if (item.requestStatus == context.config.ASSIGNED_REQUEST_CODE || item.requestStatus == context.config.CANCELLED_REQUEST_CODE) return false;\r\n        return true;\r\n    }\r\n\r\n    institutionCustomFilter(value, item, context) {\r\n        return item.requestId && item.requestId.institutionId && item.requestId.institutionId.name.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    }\r\n\r\n    courseCustomFilter(value, item, context) {\r\n        return item.requestId && item.requestId.courseId.name.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    }\r\n\r\n    customProductNameFilter(value, item, context) {\r\n        return item.productId.name.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    }\r\n\r\n    customCourseSorter(sortProperty, sortDirection, sortArray, context) {\r\n        this.sortProperty = 'course';\r\n        this.sortDirection = sortDirection;\r\n        return sortArray.sort((a, b) => {\r\n            if (a['requestId'] !== null && b['requestId'] !== null && a['requestId']['courseId']['name'] && b['requestId']['courseId']['name']) {\r\n                var result = (a['requestId']['courseId']['name'] < b['requestId']['courseId']['name']) ? -1 : (a['requestId']['courseId']['name'] > b['requestId']['courseId']['name']) ? 1 : 0;\r\n            } else {\r\n                var result = -1;\r\n            }\r\n            return result * sortDirection;\r\n        });\r\n    }\r\n\r\n    customInstitutionsSorter(sortProperty, sortDirection, sortArray, context) {\r\n        this.sortProperty = 'institution';\r\n        this.sortDirection = sortDirection;\r\n        return sortArray.sort((a, b) => {\r\n            if (a['requestId'] !== null && b['requestId'] !== null && a['requestId']['institutionId'] && b['requestId']['institutionId']) {\r\n                var result = (a['requestId']['institutionId']['name'] < b['requestId']['institutionId']['name']) ? -1 : (a['requestId']['institutionId']['name'] > b['requestId']['institutionId']['name']) ? 1 : 0;\r\n            } else {\r\n                var result = -1;\r\n            }\r\n            return result * sortDirection;\r\n        });\r\n    }\r\n\r\n    customPersonSorter(sortProperty, sortDirection, sortArray, context) {\r\n        this.sortProperty = 'person';\r\n        this.sortDirection = sortDirection;\r\n        return sortArray.sort((a, b) => {\r\n            if (a['requestId'] !== null && b['requestId'] !== null && a['requestId']['personId']['lastName'] && b['requestId']['personId']['lastName']) {\r\n                var result = (a['requestId']['personId']['lastName'] < b['requestId']['personId']['lastName']) ? -1 : (a['requestId']['personId']['lastName'] > b['requestId']['personId']['lastName']) ? 1 : 0;\r\n            } else {\r\n                var result = -1;\r\n            }\r\n            return result * sortDirection;\r\n        });\r\n    }\r\n\r\n    customRequestStatusSorter(sortProperty, sortDirection, sortArray, context) {\r\n        this.sortProperty = 'status';\r\n        this.sortDirection = sortDirection;\r\n        return sortArray.sort((a, b) => {\r\n            var result = (a[sortProperty] < b[sortProperty]) ? -1 : (a[sortProperty] > b[sortProperty]) ? 1 : 0;\r\n            return result * sortDirection;\r\n        });\r\n    }\r\n\r\n    reSort() {\r\n        this.dataTable.sortArray({}, {}, true);\r\n    }\r\n\r\n    downloadExcel(){ \r\n      let csvContent = \"data:text/csv;charset=utf-8;,Due,Created,IDs,Product,Course,Faculty,Institution\";\r\n      csvContent += \"\\r\\n\";\r\n      this.dataTable.baseArray.forEach(item => {\r\n        let graduateIds = item.requestId.graduateIds === null ? 0 : item.requestId.graduateIds;\r\n        let undergradIds = item.requestId.undergradIds === null ? 0 : item.requestId.undergradIds; \r\n        let ids =  parseInt(graduateIds) + parseInt(undergradIds);\r\n\r\n          csvContent += item.requiredDate + ',';\r\n          csvContent += item.createdDate + ',';\r\n          csvContent += ids + ',';\r\n          csvContent += item.productId.name + ',';\r\n          csvContent += item.requestId.courseId.name + ',';\r\n          csvContent += item.requestId.personId.fullName + ',';\r\n          csvContent += item.requestId.institutionId.name + ',';\r\n\r\n          csvContent +=  \"\\r\\n\";\r\n      })\r\n      var encodedUri = encodeURI(csvContent);\r\n      var link = document.createElement(\"a\");\r\n      link.setAttribute(\"href\", encodedUri);\r\n      link.setAttribute(\"download\", \"requestsArchive.csv\");\r\n      document.body.appendChild(link); \r\n\r\n      link.click();\r\n  }\r\n}\r\n","// Module\nvar code = \"<template>\\n    <span id=\\\"loading\\\">\\n        <ul class=\\\"bokeh\\\">\\n            <li></li>\\n            <li></li>\\n            <li></li>\\n        </ul>\\n    </span>\\n\\n    <div show.bind=\\\"requestSelected == 'table'\\\">\\n        <compose view=\\\"./components/apjRequestsTable.html\\\"></compose>\\n    </div>\\n    <!-- <div show.bind=\\\"requestSelected == 'form'\\\">\\n        <compose view=\\\"./components/apjRequestsForm.html\\\"></compose>\\n    </div> -->\\n    <!-- <div show.bind=\\\"requestSelected == 'edit'\\\">\\n        <compose view=\\\"./components/editRequestsForm.html\\\"></compose>\\n    </div>\\n    <div show.bind=\\\"requestSelected == 'view'\\\">\\n        <compose view=\\\"./components/viewAssignmentForm.html\\\"></compose>\\n    </div> -->\\n</template>\\n\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n\\t<div class=\\\"panel panel-default rightMargin leftMargin\\\">\\r\\n      <div class=\\\"panel-body\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div show.bind=\\\"!requestSelected\\\">\\r\\n                <compose view=\\\"./components/ArchiveRequestsTable.html\\\"></compose>\\r\\n            </div> \\r\\n            <div show.bind=\\\"requestSelected\\\" >\\r\\n                <compose view=\\\"./components/ArchiveRequestsForm.html\\\"></compose>\\r\\n            </div>\\r\\n        </div> \\r\\n      </div> \\r\\n\\r\\n</template>\";\n// Exports\nexport default code;","// Module\nvar code = \"<template>\\r\\n    <span id=\\\"loading\\\">\\r\\n        <ul class=\\\"bokeh\\\">\\r\\n            <li></li>\\r\\n            <li></li>\\r\\n            <li></li>\\r\\n        </ul>\\r\\n    </span>\\r\\n    <!--\\r\\n    <div show.bind=\\\"dataTable.displayArray && dataTable.displayArray.length || initialLoaded\\\" class=\\\"panel panel-default rightMargin leftMargin\\\">\\r\\n        <div class=\\\"panel-body\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n            -->\\r\\n                <div show.bind=\\\"requestSelected == 'table'\\\">\\r\\n                    <compose view=\\\"./components/viewRequestsTable.html\\\"></compose>\\r\\n                </div>\\r\\n                <div show.bind=\\\"requestSelected == 'form'\\\">\\r\\n                    <compose view=\\\"./components/viewRequestsForm.html\\\"></compose>\\r\\n                </div>\\r\\n                <div show.bind=\\\"requestSelected == 'edit'\\\">\\r\\n                    <compose view=\\\"./components/editRequestsForm.html\\\"></compose>\\r\\n                </div>\\r\\n                <div show.bind=\\\"requestSelected == 'view'\\\">\\r\\n                    <compose view=\\\"./components/viewAssignmentForm.html\\\"></compose>\\r\\n                </div>\\r\\n                <div show.bind=\\\"requestSelected == 'email'\\\">\\r\\n                    <compose view=\\\"./components/bulkEmailForm.html\\\"></compose>\\r\\n                </div>\\r\\n                <!--\\r\\n            </div>\\r\\n        </div>\\r\\n    -->\\r\\n</template>\";\n// Exports\nexport default code;"],"names":[],"sourceRoot":""}